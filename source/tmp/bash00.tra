BASH（1）通用命令手册BASH（1）



名称
       bash  -  GNU Bourne-Again SHell

概要
       bash [选项] [文件]

版权
       Bash是自由软件基金会版权所有（C）1989-2011。

描述
       Bash是一个与sh兼容的命令语言解释器，它执行从中读取的命令
       标准输入或文件。 Bash还包含了Korn和C的有用功能
       shell（ksh和csh）。

       Bash旨在成为Shell和Utilities部分的一致实现
       IEEE POSIX规范（IEEE标准1003.1）。 Bash可以配置为POSIX-
       符合默认值。

OPTIONS
       所有单字符shell选项都记录在set内置的描述中
       调用shell时，command可用作选项。另外，bash解释了
       调用它时的以下选项：

       -c string如果存在-c选项，则从字符串中读取命令。如果有
                 字符串后面的参数，它们被分配给位置参数，
                 从$ 0开始。
       -i如果存在-i选项，则shell是交互式的。
       -l使bash行为就好像它已被作为登录shell调用一样（参见下面的INVOCATION）。
       -r如果存在-r选项，则shell将受到限制（请参阅RESTRICTED SHELL
                 下面）。
       -s如果存在-s选项，或者在选项处理后没有参数，
                 然后从标准输入读取命令。这个选项允许
                 调用交互式shell时要设置的参数。
       -D在标准输出上打印所有以$开头的双引号字符串的列表
                 放。这些是在语言翻译时需要进行语言翻译的字符串
                 当前区域设置不是C或POSIX。这意味着-n选项;没有命令会
                 被执行。
       [ -  +] O [shopt_option]
                 shopt_option是内置商店接受的shell选项之一（参见SHELL
                 下面的建筑命令）。如果存在shopt_option，则-O设置该值
                 选项; + O取消它。如果没有提供shopt_option，则提供名称和值
                 shopt接受的shell选项打印在标准输出上。如果
                 调用选项为+ O，输出以可重用的格式显示
                 作为输入。
        -  A  - 表示选项结束并禁用进一步的选项处理。任何
                  - 之后的参数被视为文件名和参数。一个论点 - 
                 相当于 - 。

       Bash还解释了许多多字符选项。这些选项必须出现在
       要识别的单字符选项之前的命令行。

       --debugger
              安排在shell启动之前执行调试器配置文件。打开
              扩展调试模式（请参阅shopt的extdebug选项说明
              内置于下方）。
       自卸宝串
              相当于-D，但输出在GNU gettext po（可移植对象）文件中
              格式。
       自卸串
              相当于-D。
       --help在标准输出上显示用法消息并成功退出。
       --init-file文件
       --rcfile文件
              从文件而不是标准的个人初始化文件执行命令
              〜/ .bashrc如果shell是交互式的（参见下面的INVOCATION）。

        - 登录
              相当于-l。

       --noediting
              当shell是交互式时，不要使用GNU readline库来读取命令行
              略去。

       --noprofile
              不要读取系统范围的启动文件/ etc / profile或任何个人
              初始化文件〜/ .bash_profile，〜/ .bash_login或〜/ .profile。默认情况下，
              当bash作为登录shell调用时，bash会读取这些文件（请参阅下面的INVOCATION）。

       --norc如果是shell，请不要读取和执行个人初始化文件〜/ .bashrc
              互动。如果以sh调用shell，则默认情况下此选项处于启用状态。

       --posix
              更改bash的行为，其中默认操作与POSIX stan-不同
              dard匹配标准（posix模式）。

       --restricted
              外壳变得受限制（见下面的限制外壳）。

       --rpm-要求
              生成shell脚本运行所需的文件列表。这个
              暗示'-n'并受到与编译时错误检查相同的限制
              检查;命令替换，条件表达式和eval内置不是
              解析，因此可能会遗漏一些依赖项。

       --verbose
              相当于-v。

        - 版
              在标准输出上显示此bash实例的版本信息并退出
              成功。

ARGUMENTS
       如果参数处理后参数仍然存在，则-c和-s选项都不存在
       如果提供，则假定第一个参数是包含shell命令的文件的名称。
       如果以这种方式调用bash，则将$ 0设置为文件名和位置
       参数设置为其余参数。 Bash从中读取并执行命令
       文件，然后退出。 Bash的退出状态是执行的最后一个命令的退出状态
       剧本。如果未执行任何命令，则退出状态为0.首先尝试
       打开当前目录中的文件，如果没有找到文件，那么就是shell
       在PATH中的目录中搜索脚本。

INVOCATION
       登录shell是其参数零的第一个字符是 - 或者以。开头的一个
       --login选项。

       交互式shell是在没有非选项参数且没有-c选项的情况下启动的
       其标准输入和错误都连接到终端（由确定
       isatty（3）），或以-i选项开头的。 PS1已设置且$  - 如果bash为，则包含i
       交互式，允许shell脚本或启动文件测试此状态。

       以下段落描述了bash如何执行其启动文件。如果有任何文件
       存在但无法读取，bash报告错误。 Tildes在文件名中扩展为
       下面在EXPANSION部分的Tilde Expansion下描述。

       当bash作为交互式登录shell调用时，或作为非交互式shell调用
       --login选项，它首先从文件/ etc / profile读取并执行命令，如果是这样的话
       文件已存在。读取该文件后，它会查找〜/ .bash_profile，〜/ .bash_login和
       〜/ .profile，按此顺序，从第一个存在的命令读取和执行命令
       并且是可读的。当shell启动禁止时，可以使用--noprofile选项
       这种行为。

       当登录shell退出时，bash从文件〜/ .bash_logout读取并执行命令
       和/etc/bash.bash_logout，如果文件存在。

       当启动不是登录shell的交互式shell时，bash会读取并执行
       来自〜/ .bashrc的命令，如果该文件存在的话。这可以通过使用--norc来禁止
       选项。 --rcfile文件选项将强制bash从文件中读取和执行命令
       而不是〜/ .bashrc。

       当bash以非交互方式启动时，例如，要运行shell脚本，它会查找
       环境中的变量BASH_ENV，如果出现在那里，则展开其值，并使用
       扩展值作为要读取和执行的文件的名称。 Bash表现得好像
       低位命令被执行：
              if [-n“$ BASH_ENV”];然后 。 “$ BASH_ENV”;科幻
       但PATH变量的值不用于搜索文件名。

       如果使用名称sh调用bash，它会尝试模仿历史的启动行为
       sh的版本尽可能接近，同时符合POSIX标准。
       当作为交互式登录shell或带有--login的非交互式shell调用时
       选项，它首先尝试从/ etc / profile和〜/ .profile中读取和执行命令
       那个命令。 --noprofile选项可用于禁止此行为。当被调用为
       一个名为sh的交互式shell，bash查找变量ENV，扩展其值
       如果已定义，则使用扩展值作为要读取和执行的文件的名称。
       由于以sh调用的shell不会尝试从任何其他命令读取和执行命令
       启动文件，--rcfile选项无效。用。调用的非交互式shell
       name sh不会尝试读取任何其他启动文件。当调用为sh时，bash进入
       读取启动文件后的posix模式。

       当bash以posix模式启动时，与--posix命令行选项一样，它遵循
       启动文件的POSIX标准。在此模式下，交互式shell扩展ENV变量
       从名称为扩展值的文件中读取和执行命令。没有
       读取其他启动文件。

       Bash尝试确定何时将其标准输入连接到网络运行
       工作连接，如由远程shell守护程序执行，通常是rshd或安全
       shell守护进程sshd。如果bash确定它以这种方式运行，它会读取并执行
       来自〜/ .bashrc的cutes命令，如果该文件存在且可读。如果，它不会这样做
       作为sh调用。 --norc选项可用于禁止此行为，以及--rcfile
       选项可用于强制读取另一个文件，但rshd通常不会调用
       具有这些选项的shell或允许指定它们。

       如果以有效用户（组）id不等于真实用户启动shell
       （组）id，并且未提供-p选项，未读取任何启动文件，shell函数
       不是从环境继承的，SHELLOPTS，BASHOPTS，CDPATH和GLOBIGNORE
       变量（如果它们出现在环境中）将被忽略，并设置有效的用户ID
       到真正的用户ID。如果在调用时提供了-p选项，则启动行为为
       相同，但有效的用户ID不会重置。

定义
       本文档的其余部分将使用以下定义。
       空白空格或制表符。
       单词由shell视为单个单元的字符序列。又称为
              令牌。
       name仅由字母数字字符和下划线组成的单词，以及开头
              用字母字符或下划线。也称为标识符。
       元字符
              一个字符，当不加引号时，分隔单词。以下之一：
              | ＆; （）<>空格标签
       控制操作员
              执行控制功能的令牌。它是以下符号之一：
              || &&&; ;; （）| |＆<newline>

保留字
       保留字是对shell具有特殊含义的字。以下是
       在不加引号时被识别为保留，并且是简单命令的第一个单词（参见
       下面的SHELL GRAMMAR）或案例的第三个词或命令：

       ！案例做完elif else esac fi for function如果在select中那么直到{{time] [[]]

SHELL GRAMMAR
   简单的命令
       一个简单的命令是一系列可选的变量赋值，后跟空格分隔
       单词和重定向，并由控制操作符终止。第一个单词指定
       要执行的命令，并作为参数零传递。其余的单词传递为
       调用命令的参数。

       简单命令的返回值是其退出状态，如果命令是termi，则返回128 + n
       由信号n。

   管道
       管道是由一个控制操作符分隔的一个或多个命令的序列
       |或|＆。管道的格式是：

              [时间[-p]] [！ ]命令[[|⎪|＆] command2 ...]

       命令的标准输出通过管道连接到command2的标准输入。
       此连接在命令指定的任何重定向之前执行（请参阅REDI-
       下面的评论）。如果使用|＆，则命令的标准错误连接到command2
       通过管道输入标准;它是2>＆1 |的简写。这种隐式重定向
       在命令指定的任何重定向之后执行标准错误。

       除非pipefail，否则管道的返回状态是最后一个命令的退出状态
       选项已启用。如果启用了pipefail，则管道的返回状态为值
       最后（最右边）命令以非零状态退出，如果所有命令退出则返回零
       成功。如果保留字！在管道之前，该管道的退出状态 - 
       line是如上所述的退出状态的逻辑否定。 shell等待
       管道中的所有命令在返回值之前终止。

       如果时间保留字在管道之前，则经过时间以及用户和系统时间
       管道终止时会报告其执行所消耗的内容。 -p选项更改
       输出格式为POSIX指定的格式。当shell处于posix模式时，它不会
       如果下一个标记以“ - ”开头，则将时间识别为保留字。 TIMEFORMAT
       可以将变量设置为指定定时信息应该如何的格式字符串
       显示;请参阅下面的Shell变量下的TIMEFORMAT说明。

       当shell处于posix模式时，时间可能后跟换行符。在这种情况下，
       shell显示shell及其子级占用的总用户和系统时间。该
       TIMEFORMAT变量可用于指定时间信息的格式。

       流水线中的每个命令作为单独的过程（即，在子壳中）执行。

   清单
       列表是由一个运算符分隔的一个或多个管道的序列;，＆，&&，
       或||，并可选择以;，＆或<newline>之一终止。

       在这些列表运算符中，&&和||具有相同的优先权，其次是;和＆，有
       同等优先权。

       一个或多个换行符的序列可以出现在列表中而不是分号中以进行分隔
       命令。

       如果命令由控制操作符＆终止，则shell执行命令
       子壳中的背景。 shell不会等待命令完成，而且
       返回状态为0.命令由a分隔;按顺序执行; shell等待
       为每个命令轮流终止。返回状态是最后一个的退出状态
       命令已执行。

       AND和OR列表是由&&和||分隔的一个或多个管道的序列控制
       运营商，分别。 AND和OR列表以左关联性执行。一个AND
       列表有表格

              command1 && command2

       当且仅当command1返回退出状态为零时，才执行command2。

       OR列表具有表单

              command1 ||命令2

       当且仅当command1返回非零退出状态时才执行command2。回报
       AND和OR列表的状态是列表中执行的最后一个命令的退出状态。

   复合命令
       复合命令是以下之一：

       （list）列表在子shell环境中执行（请参阅命令执行环境
              下面）。影响shell环境的变量赋值和内置命令
              命令完成后，命令不会保持有效。返回状态是
              列表的退出状态。

       {list; }
              list只是在当前的shell环境中执行。列表必须终止
              换行或分号。这称为组命令。返回状态
              是列表的退出状态。请注意，与元字符（和）不同，{和}
              是保留字，必须出现在允许保留字被识别的地方
              识别的。由于它们不会导致单词分隔，因此必须将它们与list by分开
              空白或其他shell元字符。

       （（表达））
              根据ARITHMETIC下面描述的规则评估表达式
              评价。如果表达式的值不为零，则返回状态为0;
              否则返回状态为1.这与let“expression”完全相同。

       [[表达]]
              根据条件表达式的计算，返回0或1的状态
              表达。表达式由CONDI-下面描述的原色组成 - 
              TIONAL EXPRESSIONS。不执行单词拆分和路径名扩展
              [[和]]之间的单词;波浪扩展，参数和变量扩展，
              算术扩展，命令替换，进程替换和引用删除
              执行。诸如-f之类的条件运算符必须不加引号才能被识别
              作为初选。

              与[[，<和>运算符一起使用时，使用当前值按字典顺​​序排序
              语言环境。

              当使用==和！=运算符时，运算符右侧的字符串是
              考虑一种模式并根据下面描述的规则进行匹配
              燕鸥匹配。如果启用了shell选项nocasematch，则执行匹配
              不考虑字母字符的情况。如果返回值为0
              字符串匹配（==）或不匹配（！=）模式，否则为1。任何部分
              可以引用模式以强制它匹配为字符串。

              可以使用另一个二元运算符=〜，其优先级与==和相同
              ！=。使用时，操作员右侧的字符串被视为a
              扩展正则表达式并相应地匹配（如在regex（3）中）。回报
              如果字符串与模式匹配，则值为0，否则为1。如果经常
              表达式在语法上是不正确的，条件表达式的返回值是
              2.如果启用了shell选项nocasematch，则不执行匹配
              关于字母字符的情况。可以引用该模式的任何部分
              强制它匹配为一个字符串。子字符串与括号内的子字符串匹配
              正则表达式中的压力保存在数组变量中
              BASH_REMATCH。索引为0的BASH_REMATCH元素是字符串的一部分
              匹配整个正则表达式。索引为n的BASH_REMATCH元素为
              匹配第n个带括号的子表达式的字符串部分。

              表达式可以使用以下运算符组合，以递减列出
              优先顺序：

              （表达）
                     返回表达式的值。这可以用于覆盖正常
                     运营商的优先权。
              ！表达
                     如果表达式为false，则为True。
              expression1 && expression2
                     如果expression1和expression2都为true，则为True。
              expression1 ||表达式2
                     如果expression1或expression2为true，则为true。

              &&和||如果expression1的值为，则运算符不会计算expression2
              足以确定整个条件表达式的返回值。

       名称[[in [word ...]]; ]列表; DONE
              扩展后面的单词列表，生成项目列表。变量
              能够依次将该名称设置为该列表的每个元素，并且每个元素都执行一次
              时间。如果省略in字，for命令对每个posi执行一次列表
              设置的参数（参见下面的参数）。返回状态是退出
              执行的最后一个命令的状态。如果扩展项目如下
              在结果为空列表中，不执行任何命令，返回状态为0。

       for（（expr1; expr2; expr3））;做清单; DONE
              首先，根据所描述的规则评估算术表达式expr1
              在算术评估下面。然后算术表达式expr2进行评估
              反复进行，直到评估为零。每次expr2计算为非零
              执行value，list并计算算术表达式expr3。如果有的话
              表达式被省略，它的行为就好像它的计算结果为1.返回值是
              退出执行列表中最后一个命令的状态，如果是，则返回false
              表达式无效。

       选择名称[在单词];做清单; DONE
              扩展后面的单词列表，生成项目列表。这套
              扩展的单词打印在标准错误上，每个前面都有一个数字。如果
              在word中省略，打印位置参数（参见下面的参数）。
              然后显示PS3提示并从标准输入读取一行。如果
              line包含一个对应于其中一个显示单词的数字，然后是
              name的值设置为该单词。如果该行为空，则单词和提示符为
              再次显示。如果读取EOF，则命令完成。读取任何其他值
              导致name设置为null。读取的行保存在变量REPLY中。该
              每次选择后执行list，直到执行break命令。出口
              select的状态是列表中执行的最后一个命令的退出状态，如果是，则为零
              没有执行任何命令。

       [[（] pattern [| pattern] ...）列表中的案例单词;; ] ... esac
              case命令首先扩展word，并尝试将其与每个模式匹配
              转向，使用与路径名扩展相同的匹配规则（请参阅路径名扩展 - 
              在下面）。使用波浪扩展，参数和变量扩展该词
              扩展，算术替换，命令替换，过程替换和
              报价删除。检查的每个模式使用波浪扩展参数进行扩展
              和变量扩展，算术替换，命令替换和过程
              代换。如果启用了shell选项nocasematch，则执行匹配
              不考虑字母字符的情况。当找到匹配时，
              执行相应的列表。如果;;使用运算符，没有后续匹配
              在第一次模式匹配后尝试。使用;代替;;导致执行
              继续处理与下一组模式相关联的列表。使用;;＆
              代替;;导致shell测试语句中的下一个模式列表if
              any，并在成功匹配时执行任何关联列表。退出状态为零
              如果没有模式匹配。否则，它是最后一个命令exe的退出状态
              列表中列出。

       如果列表;然后列出; [elif list;然后列出; ] ... [else list; ] fi
              if列表被执行。如果其退出状态为零，则执行then列表。
              否则，每个elif列表依次执行，如果其退出状态为零，则
              执行相应的列表并完成命令。否则，否则
              列表执行，如果存在。退出状态是最后一个退出状态
              执行命令，如果没有条件测试，则为零。

       而list-1;做list-2; DONE
       直到list-1;做list-2; DONE
              只要最后一个命令，while命令就会连续执行列表list-2
              在列表列表-1中返回退出状态为零。 until命令是相同的
              到while命令，除了测试被否定; list-2只要执行就可以执行
              list-1中的最后一个命令返回非零退出状态。退出状态
              while和until命令是list-2中执行的最后一个命令的退出状态，
              如果没有执行则为零。

   协进程
       协处理是一个shell命令，前面是coproc保留字。协同进程是exe-
       在子shell中异步提取，就好像命令已经以＆con结尾
       控制操作员，在执行的外壳和主机之间建立双向管道
       塞斯。

       协同进程的格式是：

              coproc [NAME]命令[redirections]

       这将创建一个名为NAME的协同进程。如果未提供NAME，则默认名称为COPROC。
       如果command是一个简单的命令，则不得提供NAME（见上文）;否则就是
       被解释为简单命令的第一个单词。当执行coproc时，
       shell在执行的上下文中创建一个名为NAME的数组变量（请参阅下面的数组）
       壳。命令的标准输出通过管道连接到文件描述符
       执行shell，并将该文件描述符分配给NAME [0]。标准输入
       命令通过管道连接到执行shell中的文件描述符，并且
       文件描述符分配给NAME [1]。此管道在任何重定向之前建立
       由命令指定（参见下面的REDIRECTION）。文件描述符可以用作
       使用标准单词扩展的shell命令和重定向的参数。这个过程
       为执行协同进程而生成的shell的ID可用作变量的值
       NAME_PID。 wait builtin命令可用于等待协处理器终止。

       协同进程的返回状态是命令的退出状态。

   壳函数定义
       shell函数是一个被称为简单命令并执行复合的对象
       带有一组新位置参数的命令。 Shell函数声明如下：

       name（）compound-command [重定向]
       函数名[（）]复合命令[重定向]
              这定义了一个名为name的函数。保留字功能是可选的。如果
              提供了函数保留字，括号是可选的。的身体
              function是复合命令compound-command（参见上面的Compound命令）。
              该命令通常是{和}之间的命令列表，但可以是任何命令
              在上面的复合命令下列出。只要名称是，就执行复合命令
              指定为简单命令的名称。任何重定向（请参阅下面的重定向）
              执行函数时执行定义函数时指定的值。
              除非发生语法错误或a，否则函数定义的退出状态为零
              已存在具有相同名称的只读函数。执行时，退出状态
              函数的函数是在正文中执行的最后一个命令的退出状态。 （看到
              功能如下。）

评论
       在非交互式shell中，或者是interactive_comments中的交互式shell
       购物中心内置的选项已启用（参见下面的SHELL BUILTIN命令），一个单词开头
       with＃会导致该行以及该行上的所有剩余字符被忽略。一个
       未启用interactive_comments选项的活动shell不允许注释。该
       交互式shell中默认启用interactive_comments选项。

QUOTING
       引用用于删除shell中某些字符或单词的特殊含义。
       引用可用于禁用特殊字符的特殊处理，以防止
       保留字不被识别，并防止参数扩展。

       上面在DEFINITIONS下面列出的每个元字符对shell都有特殊的含义
       如果要代表自己，必须引用。

       使用命令历史记录扩展功能时（参见下面的历史扩展），
       通常，必须引用历史扩展字符以防止历史扩展。

       有三种引用机制：转义字符，单引号和双引号。

       未引用的反斜杠（\）是转义字符。它保留了字面值
       下一个字符，<newline>除外。如果是\ <换行符>对
       出现，并且反斜杠本身没有引用，\ <newline>被视为一行con
       tinuation（即，它从输入流中删除并被有效忽略）。

       用单引号括起字符
