 没有价值，默认
              值为10.如果不存在，则EOF表示shell的输入结束。
       INPUTRC
              readline启动文件的文件名，覆盖默认的〜/ .inputrc
              （见下面的READLINE）。
       LANG用于确定未明确选择的任何类别的区域设置类别
              变量以LC_开头。
       LC_ALL此变量覆盖LANG的值以及指定a的任何其他LC_变量
              区域类别。
       LC_COLLATE
              此变量确定排序路径结果时使用的归类顺序 - 
              名称扩展，并确定范围表达式的行为，等价
              路径名扩展和模式匹配中的类和整理序列。
       LC_CTYPE
              此变量确定字符的解释和char-的行为
              路径名扩展和模式匹配中的acter类。
       LC_MESSAGES
              此变量确定用于转换前面引用的双引号字符串的语言环境
              一个$。
       LC_NUMERIC
              此变量确定用于数字格式的区域设置类别。
       LINES select复合命令用于确定打印的列长度
              选择清单。收到SIGWINCH后自动设置。
       MAIL如果此参数设置为文件或目录名称，则MAILPATH变量为
              未设置，bash通知用户邮件到达指定文件或
              Maildir格式目录。
       MAILCHECK
              指定bash检查邮件的频率（以秒为单位）。默认值为60秒。
              当需要检查邮件时，shell会在显示主邮件之前执行此操作
              提示。如果未设置此变量，或设置的值不是更大的数字
              大于或等于零，shell禁用邮件检查。
       MAILPATH
              要检查邮件的以冒号分隔的文件名列表。消息是
              当邮件到达特定文件时打印可以通过分离来指定
              带有“？”的消息中的文件名。在消息文本中使用时，$ _
              扩展为当前邮件文件的名称。例：
              MAILPATH ='/ var / mail / bfox？“你有邮件”：〜/ shell-mail？“$ _有邮件！”'
              Bash为此变量提供默认值，但提供用户邮件的位置
              它使用的文件是系统相关的（例如，/ var / mail / $ USER）。
       OPTERR如果设置为值1，则bash显示由内置的getopts生成的错误消息
              命令（参见下面的SHELL BUILTIN命令）。 OPTERR每次初始化为1
              调用shell或执行shell脚本。
       PATH命令的搜索路径。它是以冒号分隔的目录列表
              shell查找命令（请参阅下面的COMMAND EXECUTION）。零长度（null）
              PATH值中的目录名称表示当前目录。一个空的指示
              保守名称可以显示为两个相邻的冒号，或者作为初始或尾随冒号。
              默认路径是系统相关的，由安装的管理员设置
              庆典。一个常见的值是``/ usr / gnu / bin：/ usr / local / bin：/ usr / ucb：/ bin：/ usr / bin''。
       POSIXLY_CORRECT
              如果此变量在bash启动时处于环境中，则shell将进入posix模式
              在读取启动文件之前，好像-posix调用选项已经支持
              合股。如果在shell运行时设置它，则bash启用posix模式，就好像
              命令集-o posix已被执行。
       PROMPT_COMMAND
              如果设置，则在发出每个主要提示之前将该值作为命令执行。
       PROMPT_DIRTRIM
              如果设置为大于零的数字，则将该值用作尾随数
              扩展\ w和\ W提示字符串转义时保留的目录组件
              （见下面的提示）。删除的字符将替换为省略号。
       PS1此参数的值已扩展（请参阅下面的PROMPTING）并用作pri
              玛丽提示字符串。默认值为``\ s- \ v \ $''。
       PS2此参数的值与PS1一样展开，并用作辅助提示
              串。默认为“>”。
       PS3此参数的值用作select命令的提示符（请参阅SHELL
              上面的GRAMMAR）。
       PS4此参数的值与PS1一样扩展，之前打印该值
              每个命令bash在执行跟踪期间显示。 PS4的第一个字符是
              必要时多次复制以指示多个间接级别。
              默认为“+”。
       SHELL shell的完整路径名保存在此环境变量中。如果不是
              在shell启动时设置，bash为其分配当前的完整路径名
              用户的登录shell。
       时间格式
              此参数的值用作指定时序方式的格式字符串
              应显示以时间保留字为前缀的管道信息。
              ％字符引入了一个转义为时间值或的转义序列
              其他信息。逃逸序列及其含义如下;该
              大括号表示可选部分。
              %%一个字面％。
              ％[p] [l] R以秒为单位的经过时间。
              ％[p] [l] U在用户模式下花费的CPU秒数。
              ％[p] [l] S在系统模式下花费的CPU秒数。
              ％P CPU百分比，计算方式为（％U +％S）/％R。

              可选p是指定精度，小数位数的数字
              小数点后。值为0表示没有小数点或分数超出
              放。最多可以指定小数点后的三个位置; p的值
              大于3将更改为3.如果未指定p，则使用值3。

              可选的l指定MMmSS.FFs格式的更长格式，包括分钟。
              p的值确定是否包括分数。

              如果未设置此变量，则bash就像具有该值一样
              $ '\ nreal \ T％3LR \ n用户\ T％3LU \ NSYS％3LS'。如果该值为null，则没有计时信息
              被展示。显示格式字符串时，将添加尾随换行符。
       TMOUT如果设置为大于零的值，TMOUT将被视为默认超时
              读内置。如果在TMOUT之后输入未到达，则select命令终止
              输入来自终端的秒数。在交互式shell中，值为
              解释为发出主要数据后等待输入的秒数
              提示。如果输入没有，则等待该秒数后Bash终止
              到达。
       TMPDIR如果设置，bash使用其值作为bash创建节点的目录的名称
              用于shell的rary文件。
       auto_resume
              此变量控制shell如何与用户和作业控件交互。如果
              设置此变量后，将处理不带重定向的单字简单命令
              作为恢复现有停工的候选人。没有含糊之处
              允许;如果有一个以键入的字符串开头的多个作业，则该作业最多
              最近访问被选中。在这种情况下，已停止作业的名称是
              用于启动它的命令行。如果设置为exact，则必须提供字符串
              完全匹配已停止作业的名称;如果设置为substring，则提供字符串
              需要匹配已停止作业名称的子字符串。子串值pro-
              提供类似于％的功能？作业标识符（参见下面的JOB CONTROL）。如果
              设置为任何其他值，提供的字符串必须是已停止作业的前缀
              名称;这提供了类似于％字符串作业标识符的功能。
       histchars
              控制历史扩展和标记化的两个或三个字符（参见
              下面的历史扩展）。第一个字符是历史扩展字符，
              表示历史扩展开始的字符，通常是“！”。该
              第二个字符是快速替换字符，用作速记
              重新运行上一个输入的命令，用一个字符串代替另一个字符串
              命令。默认为“^”。可选的第三个字符是字符
              表示当找到第一个字符时，该行的其余部分是注释
              一句话，通常是'＃'。历史评论字符导致历史记录替代
              要跳过该行上剩余的单词的tution。它不一定
              使shell解析器将该行的其余部分视为注释。

   数组
       Bash提供一维索引和关联数组变量。任何变量都可能是
       用作索引数组; declare builtin将显式声明一个数组。有
       没有数组大小的最大限制，也没有要求成员编入索引或
       连续分配。索引数组使用整数引用（包括算术）
       表达式）并且基于零;关联数组使用任意引用
       字符串。

       如果使用语法分配任何变量，则会自动创建索引数组
       名称[下标] =值。下标被视为必须的算术表达式
       评估一个数字。如果下标的计算结果小于零，则将其用作
       从一个大于数组的最大索引的偏移量（所以-1的子标题指的是
       数组的最后一个元素）。要显式声明索引数组，请使用declare -a name
       （参见下面的SHELL BUILTIN命令）。声明-a name [下标]也被接受;子
       脚本被忽略。

       使用declare -A name创建关联数组。

       可以使用declare和readonly builtins为数组变量指定属性。
       每个属性都适用于数组的所有成员。

       数组被赋值为使用形式名称=（value1 ... valuen）的复合赋值，
       其中每个值的格式为[subscript] = string。索引数组赋值没有
       需要括号和下标。分配给索引数组时，如果是可选的
       提供括号和下标，该索引被分配给;否则索引
       已分配的元素是语句分配的最后一个索引加一。索引开始
       在零。

       分配给关联数组时，下标是必需的。

       声明内置也接受此语法。各个数组元素可以是
       分配使用上面介绍的名称[subscript] = value语法。

       可以使用$ {name [subscript]}引用数组的任何元素。大括号是
       要求避免与路径名扩展冲突。如果下标是@或*，那么这个词
       扩展到名称的所有成员。这些下标仅在单词出现时才有所不同
       双引号。如果单词是双引号，$ {name [*]}会扩展为单个单词
       每个数组成员的值由IFS特殊变量的第一个字符分隔，
       和$ {name [@]}将name的每个元素扩展为一个单独的单词。没有数组的时候
       成员，$ {name [@]}扩展为空。如果双引号扩展发生在a
       单词，第一个参数的扩展与原始的初始部分相连接
       最后一个字，最后一个参数的扩展与原始的最后一部分相结合
       内在的词。这类似于特殊参数*和@的扩展（参见Spe-
       上面的cial参数）。 $ {＃name [下标]}扩展为$ {name [下标]}的长度。
       如果下标是*或@，则扩展是数组中元素的数量。引用
       没有下标的数组变量相当于引用带有子代的数组
       脚本0。

       如果已为下标指定值，则认为数组变量已设置。 null
       string是一个有效值。

       未设置的内置用于销毁数组。未设置的名称[下标]破坏了数组元素 - 
       索引下标。必须注意避免路径引起的不良副作用 - 
       名称扩展。取消设置名称，其中name是数组，或取消设置名称[下标]，其中sub-
       script是*或@，删除整个数组。

       declare，local和readonly内置函数都接受-a选项来指定索引
       array和-A选项以指定关联数组。如果提供了两个选项，则为-A
       优先。 read builtin接受-a选项来分配从中读取的单词列表
       数组的标准输入。 set和declare builtins以某种方式显示数组值
       这允许他们作为作业重复使用。

扩张
       在将命令行拆分为单词后，将在命令行上执行扩展。有
       执行七种扩展：支撑扩展，波浪扩展，参数和变量
       能够扩展，命令替换，算术扩展，分词和路径名
       扩张。

       扩展的顺序是：支撑扩展，波浪扩展，参数，变量和
       算术扩展和命令替换（以从左到右的方式完成），单词
       拆分和路径名扩展。

       在可以支持它的系统上，还有一个额外的扩展可用：进程替代
       形式予以。

       只有大括号扩展，单词拆分和路径名扩展才能改变单词的数量
       扩张;其他扩展将单个单词扩展为单个单词。唯一的例外 - 
       对此的扩展是“$ @”和“$ {name [@]}”的扩展，如上所述（参见PARAME-
       TERS）。

   支持扩张
       支撑扩展是一种可以生成任意字符串的机制。这个机制
       类似于路径名扩展，但生成的文件名不需要存在。模式
       采用可选序言的形式进行扩展，然后是一系列的
       逗号分隔的字符串或一对大括号之间的序列表达式，后跟一个
       可选的附言。前导码以括号内包含的每个字符串为前缀，
       然后将postscript附加到每个结果字符串，从左到右展开。

       Brace扩展可以嵌套。每个扩展字符串的结果都没有排序;剩下
       保持正确的秩序。例如，{d，c，b} e扩展为“ade ace abe”。

       序列表达式采用{x..y [.. incr]}的形式，其中x和y是整数或
       单个字符和incr（可选的增量）是一个整数。当整数是支持
       plied，表达式扩展到x和y之间的每个数字，包括0和y。提供的整数
       可以以0为前缀以强制每个术语具有相同的宽度。当x或y时
       从零开始，shell尝试强制所有生成的术语包含相同的内容
       必要时的位数，零填充。提供字符时，表达 - 
       sion在x和y之间按字典顺序扩展到每个字符，包括在内。注意
       x和y必须是相同的类型。当提供增量时，它被用作
       每个术语之间的差异。根据需要，默认增量为1或-1。

       在任何其他扩展之前执行大括号扩展，以及任何特殊的字符
       结果中保留了其他扩展。这是严格的文字。 Bash不适用
       任何语法解释扩展的上下文或文本之间的文本
       括号。

       正确形成的支撑膨胀必须包含不带引号的开口和闭合支撑，以及
       至少一个不带引号的逗号或有效的序列表达式。任何错误形成的支撑
       扩张保持不变。一个{或者，可以用反斜杠引用以防止其存在
       被认为是大括号表达的一部分。为避免与参数扩展冲突，
       string $ {不被视为有资格进行大括号扩展。

       当字符串的公共前缀为时，此构造通常用作速记
       生成的时间比上例更长：

              mkdir / usr / local / src / bash / {old，new，dist，bugs}
       要么
              chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

       支撑扩展引入了与sh的历史版本的轻微不兼容。 SH
       当它们作为单词的一部分出现时，不会特别处理打开或关闭括号，以及
       在输出中保留它们。 Bash从大括号中删除大括号
       扩张。例如，输入sh作为文件{1,2}的单词在out-out中出现相同
       放。在bash扩展后，同一个单词输出为file1 file2。如果严格兼容
       需要使用sh的bility，使用+ B选项启动bash或使用禁用括号扩展
       set命令的+ B选项（参见下面的SHELL BUILTIN命令）。

   Tilde扩张
       如果一个单词以不带引号的代字号（“〜”）开头，则前面是所有字符
       第一个未加引号的斜杠（或所有字符，如果没有未加引号的斜杠）被考虑
       一个波浪号前缀。如果没有引用tilde-prefix中的字符，则为字符
       在代字号后面的波浪号前缀被视为可能的登录名。如果这
       login name是空字符串，tilde替换为shell参数的值
       家。如果未设置HOME，则替换执行shell的用户的主目录
       代替。否则，tilde-prefix将替换为与之关联的主目录
       指定的登录名。

       如果波浪号前缀是“〜+”，则shell变量PWD的值将替换波浪号 - 前 - 
       固定。如果tilde-prefix是“〜 - ”，则shell变量OLDPWD的值（如果已设置）
       被取代。如果波浪号前缀中波浪号后面的字符由a组成
       数字N，可选地以“+”或“ - ”为前缀，代字号前缀替换为cor-
       来自目录堆栈的响应元素，因为它将由内置的dirs显示
       使用tilde-prefix作为参数调用。如果字符后面的波浪号
       tilde-prefix由一个没有前导“+”或“ - ”的数字组成，假定为“+”。

       如果登录名无效，或者代字号扩展失败，则该字不变。

       在以下情况之后立即检查每个变量赋值的未加引号的波浪号前缀：
       或者第一个=。在这些情况下，还执行波浪扩展。因此，有人可能
       在PATH，MAILPATH和CDPATH以及shell的赋值中使用带有波浪号的文件名
       分配扩展值。

   参数扩展
       `$'字符引入了参数扩展，命令替换或算术
       扩张。要展开的参数名称或符号可以用大括号括起来
       是可选的，但用于保护变量立即从字符扩展
       跟随它可以被解释为名称的一部分。

       使用大括号时，匹配的结束括号是第一个没有反斜杠转义的`}'
       或者在带引号的字符串中，而不是在嵌入式算术扩展中，命令substi-
       tution，或参数扩展。

       $ {}参数
              参数的值被替换。当参数为a时，需要括号
              具有多个数字的位置参数，或者当参数后跟a时
              不应被解释为其名称一部分的字符。

       如果参数的第一个字符是感叹号（！），则变量indi-的级别
       反思是介绍的。 Bash使用由其余参数形成的变量的值
       ter作为变量的名称;然后展开此变量并使用该值
       替换的其余部分，而不是参数本身的值。这被称为
       间接扩张。对此的例外是$ {！prefix *}和扩展
       $ {！name [@]}如下所述。感叹号必须紧跟左支撑
       为了引入间接。

       在下面的每个案例中，单词都受波形扩展，参数扩展，
       mand替换和算术扩展。

       当不执行子串扩展时，使用下面记录的表单，bash测试a
       未设置的参数或null。省略冒号只会导致参数测试
       这是未设置的。

       $ {参数：-word}
              使用默认值。如果参数未设置或为null，则单词的扩展为substi-
              tuted。否则，参数的值将被替换。
       $ {参数：=词}
              分配默认值。如果参数未设置或为null，则单词的扩展为
              分配给参数。然后替换参数的值。位置
              不能以这种方式分配参数和特殊参数。
       $ {参数：？单词}
              如果为空或未设置则显示错误。如果参数为null或未设置，则扩展
              如果单词不存在，则将单词（或该效果的消息）写入标准
              错误和shell，如果不是交互式，则退出。否则，值
              参数被替换。
       $ {参数：+单词}
              使用替代值。如果参数为null或未设置，则不替换任何内容，其他 - 
              明智的是，词语的扩展被取代了。
       $ {参数：偏移}
       $ {参数：偏移量：长度}
              子串扩展。从最开始扩展到参数的最大长度字符
              offset指定的字符。如果省略length，则扩展为子字符串
              参数从offset指定的字符开始。长度和偏移量
              算术表达式（参见下面的算术评估）。如果偏移评估为a
              如果数字小于零，则该值用作值的末尾的偏移量
              参数。如果length的计算结果小于零，且参数不是@
              而不是索引或关联数组，它被解释为从末尾开始的偏移量
              参数的值而不是一些字符，而扩展是
              两个偏移之间的字符。如果参数为@，则结果为length
              从偏移开始的位置参数。如果参数是索引数组名称
              由@或*下标，结果是以数组开头的长度成员
              $ {参数[偏移]}。相对于大于1的负偏移
              指定数组的最大索引。子串扩展应用于关联
              数组产生未定义的结果。请注意，必须分隔负偏移
              从冒号到至少一个空间，以避免与： - 扩展混淆。
              除非使用位置参数，否则子串索引是从零开始的
              case索引默认从1开始。如果offset是0，那么位置参数 - 
              使用eters，$ 0以列表为前缀。

       $ {！前缀*}
       $ {！前缀@}
              名称匹配前缀。扩展为名称以变量开头的变量的名称
              前缀，由IFS特殊变量的第一个字符分隔。什么时候
              使用和扩展出现在双引号内，每个变量名称扩展为a
              单词。

       $ {！名称[@]}
       $ {！名称[*]}
              数组键列表。如果name是数组变量，则展开到数组列表
              名称中指定的索引（键）。如果name不是数组，则如果name为，则展开为0
              set，否则为null。使用@时，扩展显示在double内
              引号，每个键扩展为一个单独的单词。

       $ {＃参数}
              参数长度。参数值的字符长度为substi-
              tuted。如果参数是*或@，则替换的值是位置数
              参数。如果参数是由*或@下标的数组名称，则值为substi-
              tuted是数组中元素的数量。

       $ {参数＃字}
       $ {参数##字}
              删除匹配的前缀模式。这个词被扩展为产生一个模式
              在路径名扩展中。如果模式匹配参数值的开头
              ter，那么扩展的结果就是参数的扩展值
              最短匹配模式（“＃”情况）或最长匹配模式（
              ``##''case）已删除。如果参数是@或*，则模式删除操作为
              依次应用于每个位置参数，并且扩展是结果
              名单。如果参数是使用@或*下标的数组变量，则为模式
              删除操作依次应用于数组的每个成员，并进行扩展
              是结果列表。

       $ {参数％字}
       $ {参数%%词}
              删除匹配的后缀模式。这个词被扩展为产生一个模式
              在路径名扩展中。如果模式匹配展开的尾部
              参数的值，那么扩展的结果是参数的扩展值
              使用最短的匹配模式（“％”的情况）或最长的匹配
              模式（``%%''案例）已删除。如果参数是@或*，则删除模式
              操作依次应用于每个位置参数，扩展为
              结果清单。如果参数是使用@或*下标的数组变量，那么
              tern删除操作依次应用于数组的每个成员，并且
              扩展是结果列表。

       $ {参数/模式/字符串}
              模式替换。扩展模式以产生一种模式，就像在路径中一样
              名称扩展。参数被扩展并且模式与其最长匹配
              value被替换为string。如果模式以/开头，则模式的所有匹配都是
              用字符串替换。通常只替换第一场比赛。如果模式开始
              使用＃，它必须在参数的扩展值的开头匹配。如果pat-
              tern以％开头，它必须在参数的扩展值的末尾匹配。如果
              string为null，删除模式的匹配，并且/ following模式可以是
              省略。如果参数是@或*，则替换操作将应用于每个参数
              依次定位参数，扩展是结果列表。如果参数
              是使用@或*下标的数组变量，应用替换操作
              依次对数组的每个成员，扩展是结果列表。

       $ {参数M模式}
       $ {参数^^模式}
       $ {参数，模式}
       $ {参数,,模式}
              案例修改。此扩展修改了字母字符的大小写
              参数。扩展模式以生成模式，就像路径名扩展一样
              锡永。 ^运算符将匹配模式的小写字母转换为大写;该
              ，operator将匹配的大写字母转换为小写。 ^^和,,扩展 - 
              sions转换扩展值中的每个匹配字符; ^和，扩展
              匹配并仅转换展开值中的第一个字符。如果模式是
              省略，它被视为一个？，它匹配每个字符。如果参数是@
              或者*，将大小写修改操作应用于每个位置参数
              转，扩展是结果列表。如果参数是数组变量
              使用@或*下标，案例修改操作适用于每个成员
              依次是数组，扩展是结果列表。

   命令替换
       命令替换允许输出命令来替换命令名称。有
       两种形式：

              $（命令）
       要么
              `command`

       Bash执行expa
