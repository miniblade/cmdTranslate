nsion by executing command and  replacing  the  command  substitution
       with the standard output of the command, with any trailing newlines deleted.  Embedded new‐
       lines are not deleted, but they may be removed during word splitting.  The command  substi‐
       tution $(cat file) can be replaced by the equivalent but faster $(< file).

       When  the  old-style  backquote form of substitution is used, backslash retains its literal
       meaning except when followed by $, `, or \.  The first backquote not preceded  by  a  back‐
       slash  terminates the command substitution.  When using the $(command) form, all characters
       between the parentheses make up the command; none are treated specially.

       Command substitutions may be nested.  To nest when using the backquoted  form,  escape  the
       inner backquotes with backslashes.

       If the substitution appears within double quotes, word splitting and pathname expansion are
       not performed on the results.

   Arithmetic Expansion
       Arithmetic expansion allows the evaluation of an arithmetic expression and the substitution
       of the result.  The format for arithmetic expansion is:

              $((expression))

       The expression is treated as if it were within double quotes, but a double quote inside the
       parentheses is not treated specially.  All  tokens  in  the  expression  undergo  parameter
       expansion,  string  expansion,  command substitution, and quote removal.  Arithmetic expan‐
       sions may be nested.

       The evaluation is performed according to the rules listed below  under  ARITHMETIC  EVALUA‐
       TION.   If expression is invalid, bash prints a message indicating failure and no substitu‐
       tion occurs.

   Process Substitution
       Process substitution is supported on systems  that  support  named  pipes  (FIFOs)  or  the
       /dev/fd method of naming open files.  It takes the form of <(list) or >(list).  The process
       list is run with its input or output connected to a FIFO or some file in /dev/fd.  The name
       of  this  file  is passed as an argument to the current command as the result of the expan‐
       sion.  If the >(list) form is used, writing to the file will provide input  for  list.   If
       the  <(list) form is used, the file passed as an argument should be read to obtain the out‐
       put of list.

       When available, process substitution is performed simultaneously with parameter  and  vari‐
       able expansion, command substitution, and arithmetic expansion.

   Word Splitting
       The  shell  scans  the results of parameter expansion, command substitution, and arithmetic
       expansion that did not occur within double quotes for word splitting.

       The shell treats each character of IFS as a delimiter, and splits the results of the  other
       expansions  into  words  on  these  characters.   If  IFS is unset, or its value is exactly
       <space><tab><newline>, the default, then sequences of <space>, <tab>, and <newline> at  the
       beginning  and  end of the results of the previous expansions are ignored, and any sequence
       of IFS characters not at the beginning or end serves to delimit words.  If IFS has a  value
       other  than  the  default,  then  sequences  of the whitespace characters space and tab are
       ignored at the beginning and end of the word, as long as the whitespace character is in the
       value  of  IFS  (an IFS whitespace character).  Any character in IFS that is not IFS white‐
       space, along with any adjacent IFS whitespace characters, delimits a field.  A sequence  of
       IFS  whitespace characters is also treated as a delimiter.  If the value of IFS is null, no
       word splitting occurs.

       Explicit null arguments ("" or '') are retained.  Unquoted implicit null arguments, result‐
       ing from the expansion of parameters that have no values, are removed.  If a parameter with
       no value is expanded within double quotes, a null argument results and is retained.

       Note that if no expansion occurs, no splitting is performed.

   Pathname Expansion
       After word splitting, unless the -f option has been set, bash scans each word for the char‐
       acters  *,  ?,  and  [.  If one of these characters appears, then the word is regarded as a
       pattern, and replaced with an alphabetically sorted list of file names  matching  the  pat‐
       tern.   If  no matching file names are found, and the shell option nullglob is not enabled,
       the word is left unchanged.  If the nullglob option is set, and no matches are  found,  the
       word  is  removed.  If the failglob shell option is set, and no matches are found, an error
       message is printed and the command is not executed.  If  the  shell  option  nocaseglob  is
       enabled,  the match is performed without regard to the case of alphabetic characters.  When
       a pattern is used for pathname expansion, the character ``.''  at the start of  a  name  or
       immediately  following  a slash must be matched explicitly, unless the shell option dotglob
       is set.  When matching a pathname, the slash character must always be  matched  explicitly.
       In  other  cases,  the  ``.''   character is not treated specially.  See the description of
       shopt below under SHELL BUILTIN COMMANDS for a description  of  the  nocaseglob,  nullglob,
       failglob, and dotglob shell options.

       The GLOBIGNORE shell variable may be used to restrict the set of file names matching a pat‐
       tern.  If GLOBIGNORE is set, each matching file name that also matches one of the  patterns
       in  GLOBIGNORE  is removed from the list of matches.  The file names ``.''  and ``..''  are
       always ignored when GLOBIGNORE is set and not null.  However, setting GLOBIGNORE to a  non-
       null  value  has  the  effect of enabling the dotglob shell option, so all other file names
       beginning with a ``.''  will match.  To get the old behavior of ignoring file names  begin‐
       ning  with  a ``.'', make ``.*''  one of the patterns in GLOBIGNORE.  The dotglob option is
       disabled when GLOBIGNORE is unset.

       Pattern Matching

       Any character that appears  in  a  pattern,  other  than  the  special  pattern  characters
       described  below,  matches  itself.  The NUL character may not occur in a pattern.  A back‐
       slash escapes the following character; the escaping backslash is discarded  when  matching.
       The special pattern characters must be quoted if they are to be matched literally.

       The special pattern characters have the following meanings:

              *      Matches  any  string,  including  the  null  string.  When the globstar shell
                     option is enabled, and * is used in a pathname expansion context,  two  adja‐
                     cent *s used as a single pattern will match all files and zero or more direc‐
                     tories and subdirectories.  If followed by a /, two adjacent  *s  will  match
                     only directories and subdirectories.
              ?      Matches any single character.
              [...]  Matches  any  one of the enclosed characters.  A pair of characters separated
                     by a hyphen denotes a range expression;  any  character  that  sorts  between
                     those  two  characters,  inclusive,  using  the  current  locale's  collating
                     sequence and character set, is matched.  If the first character following the
                     [  is  a  !   or a ^ then any character not enclosed is matched.  The sorting
                     order of characters in range expressions is determined by the current  locale
                     and  the  value of the LC_COLLATE shell variable, if set.  A - may be matched
                     by including it as the first or last character  in  the  set.   A  ]  may  be
                     matched by including it as the first character in the set.

                     Within  [  and  ],  character  classes  can  be  specified  using  the syntax
                     [:class:], where class is one of the following classes defined in  the  POSIX
                     standard:
                     alnum  alpha ascii blank cntrl digit graph lower print punct space upper word
                     xdigit
                     A character class matches any character belonging to that  class.   The  word
                     character class matches letters, digits, and the character _.

                     Within [ and ], an equivalence class can be specified using the syntax [=c=],
                     which matches all characters with the same collation weight  (as  defined  by
                     the current locale) as the character c.

                     Within [ and ], the syntax [.symbol.] matches the collating symbol symbol.

       Several  extended pattern matching operators are recognized.  In the following description,
       a pattern-list is a list of one or more patterns separated by a |.  Composite patterns  may
       be formed using one or more of the following sub-patterns:

              ?(pattern-list)
                     Matches zero or one occurrence of the given patterns
              *(pattern-list)
                     Matches zero or more occurrences of the given patterns
              +(pattern-list)
                     Matches one or more occurrences of the given patterns
              @(pattern-list)
                     Matches one of the given patterns

       If  the extglob shell option is enabled using the shopt builtin, following pattern matching
       operator is recognized as well:

              !(pattern-list)
                     Matches anything except one of the given patterns

   Quote Removal
       After the preceding expansions, all unquoted occurrences of the characters \, ', and " that
       did not result from one of the above expansions are removed.

REDIRECTION
       Before  a command is executed, its input and output may be redirected using a special nota‐
       tion interpreted by the shell.  Redirection may also be used to open and  close  files  for
       the  current  shell execution environment.  The following redirection operators may precede
       or appear anywhere within a simple command or may follow a command.  Redirections are  pro‐
       cessed in the order they appear, from left to right.

       Each  redirection  that may be preceded by a file descriptor number may instead be preceded
       by a word of the form {varname}.  In this case, for each redirection  operator  except  >&-
       and  <&-,  the  shell will allocate a file descriptor greater than 10 and assign it to var‐
       name.  If >&- or <&- is preceded by {varname},  the  value  of  varname  defines  the  file
       descriptor to close.

       In  the  following  descriptions,  if  the file descriptor number is omitted, and the first
       character of the redirection operator is <, the redirection refers to  the  standard  input
       (file  descriptor  0).   If the first character of the redirection operator is >, the redi‐
       rection refers to the standard output (file descriptor 1).

       The word following the redirection operator in the following descriptions, unless otherwise
       noted,  is subjected to brace expansion, tilde expansion, parameter expansion, command sub‐
       stitution, arithmetic expansion, quote removal, pathname expansion, and word splitting.  If
       it expands to more than one word, bash reports an error.

       Note that the order of redirections is significant.  For example, the command

              ls > dirlist 2>&1

       directs both standard output and standard error to the file dirlist, while the command

              ls 2>&1 > dirlist

       directs only the standard output to file dirlist, because the standard error was duplicated
       from the standard output before the standard output was redirected to dirlist.

       Bash handles several filenames specially when they are used in redirections,  as  described
       in the following table:

              /dev/fd/fd
                     If fd is a valid integer, file descriptor fd is duplicated.
              /dev/stdin
                     File descriptor 0 is duplicated.
              /dev/stdout
                     File descriptor 1 is duplicated.
              /dev/stderr
                     File descriptor 2 is duplicated.
              /dev/tcp/host/port
                     If  host is a valid hostname or Internet address, and port is an integer port
                     number or service name, bash attempts to open a TCP connection to the  corre‐
                     sponding socket.
              /dev/udp/host/port
                     If  host is a valid hostname or Internet address, and port is an integer port
                     number or service name, bash attempts to open a UDP connection to the  corre‐
                     sponding socket.

       A failure to open or create a file causes the redirection to fail.

       Redirections  using  file  descriptors greater than 9 should be used with care, as they may
       conflict with file descriptors the shell uses internally.

   Redirecting Input
       Redirection of input causes the file whose name results from the expansion of  word  to  be
       opened  for reading on file descriptor n, or the standard input (file descriptor 0) if n is
       not specified.

       The general format for redirecting input is:

              [n]<word

   Redirecting Output
       Redirection of output causes the file whose name results from the expansion of word  to  be
       opened for writing on file descriptor n, or the standard output (file descriptor 1) if n is
       not specified.  If the file does not exist it is created; if it does exist it is  truncated
       to zero size.

       The general format for redirecting output is:

              [n]>word

       If  the  redirection  operator  is  >, and the noclobber option to the set builtin has been
       enabled, the redirection will fail if the file whose name results  from  the  expansion  of
       word  exists  and is a regular file.  If the redirection operator is >|, or the redirection
       operator is > and the noclobber option to the set builtin command is not enabled, the redi‐
       rection is attempted even if the file named by word exists.

   Appending Redirected Output
       Redirection of output in this fashion causes the file whose name results from the expansion
       of word to be opened for appending on file descriptor  n,  or  the  standard  output  (file
       descriptor 1) if n is not specified.  If the file does not exist it is created.

       The general format for appending output is:

              [n]>>word

   Redirecting Standard Output and Standard Error
       This  construct  allows both the standard output (file descriptor 1) and the standard error
       output (file descriptor 2) to be redirected to the file whose  name  is  the  expansion  of
       word.

       There are two formats for redirecting standard output and standard error:

              &>word
       and
              >&word

       Of the two forms, the first is preferred.  This is semantically equivalent to

              >word 2>&1

   Appending Standard Output and Standard Error
       This  construct  allows both the standard output (file descriptor 1) and the standard error
       output (file descriptor 2) to be appended to the file whose name is the expansion of word.

       The format for appending standard output and standard error is:

              &>>word

       This is semantically equivalent to

              >>word 2>&1

   Here Documents
       This type of redirection instructs the shell to read input from the current source until  a
       line containing only delimiter (with no trailing blanks) is seen.  All of the lines read up
       to that point are then used as the standard input for a command.

       The format of here-documents is:

              <<[-]word
                      here-document
              delimiter

       No parameter expansion, command substitution, arithmetic expansion, or  pathname  expansion
       is performed on word.  If any characters in word are quoted, the delimiter is the result of
       quote removal on word, and the lines in the here-document are not  expanded.   If  word  is
       unquoted, all lines of the here-document are subjected to parameter expansion, command sub‐
       stitution, and arithmetic expansion.  In the latter case, the character sequence \<newline>
       is ignored, and \ must be used to quote the characters \, $, and `.

       If the redirection operator is <<-, then all leading tab characters are stripped from input
       lines and the line containing delimiter.  This allows here-documents within  shell  scripts
       to be indented in a natural fashion.

   Here Strings
       A variant of here documents, the format is:

              <<<word

       The word is expanded and supplied to the command on its standard input.

   Duplicating File Descriptors
       The redirection operator

              [n]<&word

       is  used  to  duplicate input file descriptors.  If word expands to one or more digits, the
       file descriptor denoted by n is made to be a copy of that file descriptor.  If  the  digits
       in  word  do  not specify a file descriptor open for input, a redirection error occurs.  If
       word evaluates to -, file descriptor n is closed.  If n  is  not  specified,  the  standard
       input (file descriptor 0) is used.

       The operator

              [n]>&word

       is  used  similarly to duplicate output file descriptors.  If n is not specified, the stan‐
       dard output (file descriptor 1) is used.  If the digits in  word  do  not  specify  a  file
       descriptor  open  for output, a redirection error occurs.  As a special case, if n is omit‐
       ted, and word does not expand to one or more digits, the standard output and standard error
       are redirected as described previously.

   Moving File Descriptors
       The redirection operator

              [n]<&digit-

       moves  the file descriptor digit to file descriptor n, or the standard input (file descrip‐
       tor 0) if n is not specified.  digit is closed after being duplicated to n.

       Similarly, the redirection operator

              [n]>&digit-

       moves the file descriptor digit to file descriptor n, or the standard output (file descrip‐
       tor 1) if n is not specified.

   Opening File Descriptors for Reading and Writing
       The redirection operator

              [n]<>word

       causes the file whose name is the expansion of word to be opened for both reading and writ‐
       ing on file descriptor n, or on file descriptor 0 if n is not specified.  If the file  does
       not exist, it is created.

ALIASES
       Aliases  allow a string to be substituted for a word when it is used as the first word of a
       simple command.  The shell maintains a list of aliases that may be set and unset  with  the
       alias  and  unalias builtin commands (see SHELL BUILTIN COMMANDS below).  The first word of
       each simple command, if unquoted, is checked to see if it has an alias.  If so,  that  word
       is  replaced  by the text of the alias.  The characters /, $, `, and = and any of the shell
       metacharacters or quoting characters listed above may not appear in  an  alias  name.   The
       replacement  text  may  contain any valid shell input, including shell metacharacters.  The
       first word of the replacement text is tested for aliases, but a word that is  identical  to
       an alias being expanded is not expanded a second time.  This means that one may alias ls to
       ls -F, for instance, and bash does not try to recursively expand the replacement text.   If
       the  last character of the alias value is a blank, then the next command word following the
       alias is also checked for alias expansion.

       Aliases are created and listed with the alias command, and removed with  the  unalias  com‐
       mand.

       There  is  no  mechanism  for  using  arguments  in the replacement text.  If arguments are
       needed, a shell function should be used (see FUNCTIONS below).

       Aliases are not expanded when the shell is not interactive, unless the expand_aliases shell
       option  is  set  using  shopt  (see  the  description of shopt under SHELL BUILTIN COMMANDS
       below).

       The rules concerning the definition and use of aliases are somewhat confusing.  Bash always
       reads  at  least  one  complete  line of input before executing any of the commands on that
       line.  Aliases are expanded when a command is read, not when it is executed.  Therefore, an
       alias  definition  appearing on the same line as another command does not take effect until
       the next line of input is read.  The commands following the alias definition on  that  line
       are  not affected by the new alias.  This behavior is also an issue when functions are exe‐
       cuted.  Aliases are expanded when a function definition is read, not when the  function  is
       executed,  because  a  function definition is itself a compound command.  As a consequence,
       aliases defined in a function are not available until after that function is executed.   To
       be  safe, always put alias definitions on a separate line, and do not use alias in compound
       commands.

       For almost every purpose, aliases are superseded by shell functions.

FUNCTIONS
       A shell function, defined as described above under SHELL GRAMMAR, stores a series  of  com‐
       mands  for  later execution.  When the name of a shell function is used as a simple command
       name, the list of commands associated with that function name is executed.   Functions  are
       executed  in  the context of the current shell; no new process is created to interpret them
       (contrast this with the execution of a shell script).  When a  function  is  executed,  the
       arguments  to the function become the positional parameters during its execution.  The spe‐
       cial parameter # is updated to reflect the change.  Special parameter 0 is unchanged.   The
       first  element  of the FUNCNAME variable is set to the name of the function while the func‐
       tion is executing.

       All other aspects of the shell execution environment are identical between a  function  and
       its  caller  with these exceptions:  the DEBUG and RETURN traps (see the description of the
       trap builtin under SHELL BUILTIN COMMANDS below) are not inherited unless the function  has
       been given the trace attribute (see the description of the declare builtin below) or the -o
       functrace shell option has been enabled with the set builtin (in which case  all  functions
       inherit  the  DEBUG  and  RETURN  traps),  and  the ERR trap is not inherited unless the -o
       errtrace shell option has been enabled.

       Variables local to the function may be declared with the local builtin  command.   Ordinar‐
       ily, variables and their values are shared between the function and its caller.

       The FUNCNEST variable, if set to a numeric value greater than 0, defines a maximum function
       nesting level.  Function invocations that exceed the limit  cause  the  entire  command  to
       abort.

       If  the builtin command return is executed in a function, the function completes and execu‐
       tion resumes with the next command after the function call.  Any  command  associated  with
       the  RETURN trap is executed before execution resumes.  When a function completes, the val‐
       ues of the positional parameters and the special parameter # are  restored  to  the  values
       they had prior to the function's execution.

       Function  names  and definitions may be listed with the -f option to the declare or typeset
       builtin commands.  The -F option to declare or typeset will list the  function  names  only
       (and  optionally the source file and line number, if the extdebug shell option is enabled).
       Functions may be exported so that subshells automatically have them  defined  with  the  -f
       option  to the export builtin.  A function definition may be deleted using the -f option to
       the unset builtin.  Note that shell functions and variables with the same name  may  result
       in  multiple  identically-named  entries in the environment passed to the shell's children.
       Care should be taken in cases where this may cause a problem.

       Functions may be recursive.  The FUNCNEST variable may be used to limit the  depth  of  the
       function  call stack and restrict the number of function invocations.  By default, no limit
       is imposed on the number of recursive calls.

ARITHMETIC EVALUATION
       The shell allows arithmetic expressions to be evaluated, under certain  circumstances  (see
       the  let  and  declare  builtin  commands and Arithmetic Expansion).  Evaluation is done in
       fixed-width integers with no check for overflow,  though  division  by  0  is  trapped  and
       flagged as an error.  The operators and their precedence, associativity, and values are the
       same as in the C language.  The following list of  operators  is  grouped  into  levels  of
       equal-precedence operators.  The levels are listed in order of decreasing precedence.

       id++ id--
              variable post-increment and post-decrement
       ++id --id
              variable pre-increment and pre-decrement
       - +    unary minus and plus
       ! ~    logical and bitwise negation
       **     exponentiation
       * / %  multiplication, division, remainder
       + -    addition, subtraction
       << >>  left and right bitwise shifts
       <= >= < >
              comparison
       == !=  equality and inequality
       &      bitwise AND
       ^      bitwise exclusive OR
       |      bitwise OR
       &&     logical AND
       ||     logical OR
       expr?expr:expr
              conditional operator
       = *= /= %= += -= <<= >>= &= ^= |=
              assignment
       expr1 , expr2
              comma

       Shell  variables  are  allowed  as  operands;  parameter  expansion is performed before the
       expression is evaluated.  Within an expression, shell variables may also be  referenced  by
       name  without using the parameter expansion syntax.  A shell variable that is null or unset
       evaluates to 0 when referenced by name without using the parameter expansion  syntax.   The
       value of a variable is evaluated as an arithmetic expression when it is referenced, or when
       a variable which has been given the integer attribute using declare -i is assigned a value.
       A  null  value evaluates to 0.  A shell variable need not have its integer attribute turned
       on to be used in an expression.

       Constants with a leading 0 are interpreted as octal numbers.  A leading 0x  or  0X  denotes
       hexadecimal.  Otherwise, numbers take the form [base#]n, where the optional base is a deci‐
       mal number between 2 and 64 representing the arithmetic base, and n is  a  number  in  that
       base.   If  base#  is  omitted, then base 10 is used.  The digits greater than 9 are repre‐
       sented by the lowercase letters, the uppercase letters, @, and _, in that order.   If  base
       is less than or equal to 36, lowercase and uppercase letters may be used interchangeably to
       represent numbers between 10 and 35.

       Operators are evaluated in order of precedence.  Sub-expressions in parentheses are  evalu‐
       ated first and may override the precedence rules above.

CONDITIONAL EXPRESSIONS
       Conditional expressions are used by the [[ compound command and the test and [ builtin com‐
       mands to test file attributes and perform string and arithmetic  comparisons.   Expressions
       are  formed  from  the following unary or binary primaries.  If any file argument to one of
       the primaries is of the form /dev/fd/n, then file descriptor n is  checked.   If  the  file
       argument  to  one  of the primaries is one of /dev/stdin, /dev/stdout, or /dev/stderr, file
       descriptor 0, 1, or 2, respectively, is checked.

       Unless otherwise specified, primaries that operate on files follow symbolic links and oper‐
       ate on the target of the link, rather than the link itself.

       When  used  with [[, the < and > operators sort lexicographically using the current locale.
       The test command sorts using ASCII ordering.

       -a file
              True if file exists.
       -b file
              True if file exists and is a block special file.
       -c file
              True if file exists and is a character special file.
       -d file
              True if file exists and is a directory.
       -e file
              True if file exists.
       -f file
              True if file exists and is a regular file.
       -g file
              True if file exists and is set-group-id.
       -h file
              True if file exists and is a symbolic link.
       -k file
              True if file exists and its ``sticky'' bit is set.
       -p file
              True if file exists and is a named pipe (FIFO).
       -r file
              True if file exists and is readable.
       -s file
              True if file exists and has a size greater than zero.
       -t fd  True if file descriptor fd is open and refers to a terminal.
       -u file
              True if file exists and its set-user-id bit is set.
       -w file
              True if file exists and is writable.
       -x file
              True if file exists and is executable.
       -G file
              True if file exists and is owned by the effective group id.
       -L file
              True if file exists and is a symbolic link.
       -N file
              True if file exists and has been modified since it was last read.
       -O file
              True if file exists and is owned by the effective user id.
       -S file
              True if file exists and is a socket.
       file1 -ef file2
              True if file1 an