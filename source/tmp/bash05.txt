in characters of the common prefix of a list of possible completions that
              is displayed without modification.  When set to a value greater  than  zero,  common
              prefixes longer than this value are replaced with an ellipsis when displaying possi‐
              ble completions.
       completion-query-items (100)
              This determines when the user is queried about viewing the number of  possible  com‐
              pletions  generated by the possible-completions command.  It may be set to any inte‐
              ger value greater than or equal to zero.  If the number of possible  completions  is
              greater  than  or  equal to the value of this variable, the user is asked whether or
              not he wishes to view them; otherwise they are simply listed on the terminal.
       convert-meta (On)
              If set to On, readline will convert characters with the eighth bit set to  an  ASCII
              key  sequence  by  stripping  the  eighth  bit and prefixing an escape character (in
              effect, using escape as the meta prefix).
       disable-completion (Off)
              If set to On, readline will inhibit word completion.  Completion characters will  be
              inserted into the line as if they had been mapped to self-insert.
       editing-mode (emacs)
              Controls  whether readline begins with a set of key bindings similar to Emacs or vi.
              editing-mode can be set to either emacs or vi.
       echo-control-characters (On)
              When set to On, on operating systems that indicate they support it, readline  echoes
              a character corresponding to a signal generated from the keyboard.
       enable-keypad (Off)
              When  set  to  On,  readline  will  try  to enable the application keypad when it is
              called.  Some systems need this to enable the arrow keys.
       enable-meta-key (On)
              When set to On, readline will try to enable  any  meta  modifier  key  the  terminal
              claims  to  support  when  it is called.  On many terminals, the meta key is used to
              send eight-bit characters.
       expand-tilde (Off)
              If set to On, tilde expansion is performed when readline attempts word completion.
       history-preserve-point (Off)
              If set to On, the history code attempts to place point at the same location on  each
              history line retrieved with previous-history or next-history.
       history-size (0)
              Set  the  maximum  number  of  history entries saved in the history list.  If set to
              zero, the number of entries in the history list is not limited.
       horizontal-scroll-mode (Off)
              When set to On, makes readline use a single line for display,  scrolling  the  input
              horizontally  on  a  single screen line when it becomes longer than the screen width
              rather than wrapping to a new line.
       input-meta (Off)
              If set to On, readline will enable eight-bit input (that is, it will not  strip  the
              high  bit  from  the characters it reads), regardless of what the terminal claims it
              can support.  The name meta-flag is a synonym for this variable.
       isearch-terminators (``C-[C-J'')
              The string of characters that should terminate an incremental search without  subse‐
              quently executing the character as a command.  If this variable has not been given a
              value, the characters ESC and C-J will terminate an incremental search.
       keymap (emacs)
              Set the  current  readline  keymap.   The  set  of  valid  keymap  names  is  emacs,
              emacs-standard, emacs-meta, emacs-ctlx, vi, vi-command, and vi-insert.  vi is equiv‐
              alent to vi-command; emacs is equivalent to emacs-standard.  The  default  value  is
              emacs; the value of editing-mode also affects the default keymap.
       mark-directories (On)
              If set to On, completed directory names have a slash appended.
       mark-modified-lines (Off)
              If  set  to On, history lines that have been modified are displayed with a preceding
              asterisk (*).
       mark-symlinked-directories (Off)
              If set to On, completed names which are symbolic links to directories have  a  slash
              appended (subject to the value of mark-directories).
       match-hidden-files (On)
              This variable, when set to On, causes readline to match files whose names begin with
              a `.' (hidden files) when performing filename completion.  If set to Off, the  lead‐
              ing `.' must be supplied by the user in the filename to be completed.
       menu-complete-display-prefix (Off)
              If  set  to  On,  menu completion displays the common prefix of the list of possible
              completions (which may be empty) before cycling through the list.
       output-meta (Off)
              If set to On, readline will display characters with  the  eighth  bit  set  directly
              rather than as a meta-prefixed escape sequence.
       page-completions (On)
              If  set  to  On, readline uses an internal more-like pager to display a screenful of
              possible completions at a time.
       print-completions-horizontally (Off)
              If set to On, readline will display completions with matches sorted horizontally  in
              alphabetical order, rather than down the screen.
       revert-all-at-newline (Off)
              If  set to On, readline will undo all changes to history lines before returning when
              accept-line is executed.  By default, history lines may be modified and retain indi‐
              vidual undo lists across calls to readline.
       show-all-if-ambiguous (Off)
              This  alters  the default behavior of the completion functions.  If set to On, words
              which have more than one possible completion cause the matches to be listed  immedi‐
              ately instead of ringing the bell.
       show-all-if-unmodified (Off)
              This alters the default behavior of the completion functions in a fashion similar to
              show-all-if-ambiguous.  If set to On, words which have more than one  possible  com‐
              pletion  without  any  possible  partial  completion (the possible completions don't
              share a common prefix) cause the matches to be listed immediately instead of ringing
              the bell.
       skip-completed-text (Off)
              If  set  to  On, this alters the default completion behavior when inserting a single
              match into the line.  It's only active when performing completion in the middle of a
              word.   If  enabled,  readline  does  not insert characters from the completion that
              match characters after point in the word being completed, so portions  of  the  word
              following the cursor are not duplicated.
       visible-stats (Off)
              If  set to On, a character denoting a file's type as reported by stat(2) is appended
              to the filename when listing possible completions.

   Readline Conditional Constructs
       Readline implements a facility similar in spirit to the conditional compilation features of
       the  C  preprocessor which allows key bindings and variable settings to be performed as the
       result of tests.  There are four parser directives used.

       $if    The $if construct allows bindings to be made based on the editing mode, the terminal
              being  used, or the application using readline.  The text of the test extends to the
              end of the line; no characters are required to isolate it.

              mode   The mode= form of the $if directive is used to test whether  readline  is  in
                     emacs  or  vi mode.  This may be used in conjunction with the set keymap com‐
                     mand, for instance, to set bindings  in  the  emacs-standard  and  emacs-ctlx
                     keymaps only if readline is starting out in emacs mode.

              term   The term= form may be used to include terminal-specific key bindings, perhaps
                     to bind the key sequences output by the terminal's function keys.   The  word
                     on the right side of the = is tested against the both full name of the termi‐
                     nal and the portion of the terminal name before the first -.  This allows sun
                     to match both sun and sun-cmd, for instance.

              application
                     The  application  construct is used to include application-specific settings.
                     Each program using the readline library sets the  application  name,  and  an
                     initialization  file  can test for a particular value.  This could be used to
                     bind key sequences to functions useful for a specific program.  For instance,
                     the following command adds a key sequence that quotes the current or previous
                     word in bash:

                     $if Bash
                     # Quote the current or previous word
                     "\C-xq": "\eb\"\ef\""
                     $endif

       $endif This command, as seen in the previous example, terminates an $if command.

       $else  Commands in this branch of the $if directive are executed if the test fails.

       $include
              This directive takes a single filename as an argument and reads commands  and  bind‐
              ings from that file.  For example, the following directive would read /etc/inputrc:

              $include  /etc/inputrc

   Searching
       Readline  provides  commands  for searching through the command history (see HISTORY below)
       for lines containing a specified string.  There are two search modes: incremental and  non-
       incremental.

       Incremental  searches begin before the user has finished typing the search string.  As each
       character of the search string is typed, readline displays the next entry from the  history
       matching  the  string typed so far.  An incremental search requires only as many characters
       as needed to find the desired history entry.  The characters present in the  value  of  the
       isearch-terminators variable are used to terminate an incremental search.  If that variable
       has not been assigned a value the Escape and Control-J characters will terminate an  incre‐
       mental  search.   Control-G will abort an incremental search and restore the original line.
       When the search is terminated, the history entry containing the search string  becomes  the
       current line.

       To  find  other matching entries in the history list, type Control-S or Control-R as appro‐
       priate.  This will search backward or forward in the history for the  next  entry  matching
       the  search  string  typed so far.  Any other key sequence bound to a readline command will
       terminate the search and execute that command.  For instance, a newline will terminate  the
       search and accept the line, thereby executing the command from the history list.

       Readline remembers the last incremental search string.  If two Control-Rs are typed without
       any intervening characters defining a new search string, any remembered  search  string  is
       used.

       Non-incremental searches read the entire search string before starting to search for match‐
       ing history lines.  The search string may be typed by the user or be part of  the  contents
       of the current line.

   Readline Command Names
       The following is a list of the names of the commands and the default key sequences to which
       they are bound.  Command names without an accompanying key sequence are unbound by default.
       In the following descriptions, point refers to the current cursor position, and mark refers
       to a cursor position saved by the set-mark command.  The text between the point and mark is
       referred to as the region.

   Commands for Moving
       beginning-of-line (C-a)
              Move to the start of the current line.
       end-of-line (C-e)
              Move to the end of the line.
       forward-char (C-f)
              Move forward a character.
       backward-char (C-b)
              Move back a character.
       forward-word (M-f)
              Move  forward to the end of the next word.  Words are composed of alphanumeric char‐
              acters (letters and digits).
       backward-word (M-b)
              Move back to the start of the current or  previous  word.   Words  are  composed  of
              alphanumeric characters (letters and digits).
       shell-forward-word
              Move  forward  to the end of the next word.  Words are delimited by non-quoted shell
              metacharacters.
       shell-backward-word
              Move back to the start of the current or previous word.  Words are delimited by non-
              quoted shell metacharacters.
       clear-screen (C-l)
              Clear  the  screen leaving the current line at the top of the screen.  With an argu‐
              ment, refresh the current line without clearing the screen.
       redraw-current-line
              Refresh the current line.

   Commands for Manipulating the History
       accept-line (Newline, Return)
              Accept the line regardless of where the cursor is.  If this line is  non-empty,  add
              it  to  the history list according to the state of the HISTCONTROL variable.  If the
              line is a modified history line, then restore  the  history  line  to  its  original
              state.
       previous-history (C-p)
              Fetch the previous command from the history list, moving back in the list.
       next-history (C-n)
              Fetch the next command from the history list, moving forward in the list.
       beginning-of-history (M-<)
              Move to the first line in the history.
       end-of-history (M->)
              Move to the end of the input history, i.e., the line currently being entered.
       reverse-search-history (C-r)
              Search  backward starting at the current line and moving `up' through the history as
              necessary.  This is an incremental search.
       forward-search-history (C-s)
              Search forward starting at the current line and moving `down' through the history as
              necessary.  This is an incremental search.
       non-incremental-reverse-search-history (M-p)
              Search  backward through the history starting at the current line using a non-incre‐
              mental search for a string supplied by the user.
       non-incremental-forward-search-history (M-n)
              Search forward through the history using a non-incremental search for a string  sup‐
              plied by the user.
       history-search-forward
              Search forward through the history for the string of characters between the start of
              the current line and the point.  This is a non-incremental search.
       history-search-backward
              Search backward through the history for the string of characters between  the  start
              of the current line and the point.  This is a non-incremental search.
       yank-nth-arg (M-C-y)
              Insert  the  first  argument to the previous command (usually the second word on the
              previous line) at point.  With an argument n, insert the nth word from the  previous
              command  (the words in the previous command begin with word 0).  A negative argument
              inserts the nth word from the end of the previous command.  Once the argument  n  is
              computed, the argument is extracted as if the "!n" history expansion had been speci‐
              fied.
       yank-last-arg (M-., M-_)
              Insert the last argument to the previous command (the last word of the previous his‐
              tory entry).  With a numeric argument, behave exactly like yank-nth-arg.  Successive
              calls to yank-last-arg move back through the history list, inserting the  last  word
              (or the word specified by the argument to the first call) of each line in turn.  Any
              numeric argument supplied to these successive calls determines the direction to move
              through the history.  A negative argument switches the direction through the history
              (back or forward).  The history expansion facilities are used to  extract  the  last
              argument, as if the "!$" history expansion had been specified.
       shell-expand-line (M-C-e)
              Expand  the  line  as  the shell does.  This performs alias and history expansion as
              well as all of the shell  word  expansions.   See  HISTORY  EXPANSION  below  for  a
              description of history expansion.
       history-expand-line (M-^)
              Perform  history  expansion  on the current line.  See HISTORY EXPANSION below for a
              description of history expansion.
       magic-space
              Perform history expansion on the current line  and  insert  a  space.   See  HISTORY
              EXPANSION below for a description of history expansion.
       alias-expand-line
              Perform alias expansion on the current line.  See ALIASES above for a description of
              alias expansion.
       history-and-alias-expand-line
              Perform history and alias expansion on the current line.
       insert-last-argument (M-., M-_)
              A synonym for yank-last-arg.
       operate-and-get-next (C-o)
              Accept the current line for execution and fetch the next line relative to  the  cur‐
              rent line from the history for editing.  Any argument is ignored.
       edit-and-execute-command (C-xC-e)
              Invoke  an  editor on the current command line, and execute the result as shell com‐
              mands.  Bash attempts to invoke $VISUAL, $EDITOR, and emacs as the editor,  in  that
              order.

   Commands for Changing Text
       delete-char (C-d)
              Delete  the character at point.  If point is at the beginning of the line, there are
              no characters  in  the  line,  and  the  last  character  typed  was  not  bound  to
              delete-char, then return EOF.
       backward-delete-char (Rubout)
              Delete  the  character  behind  the cursor.  When given a numeric argument, save the
              deleted text on the kill ring.
       forward-backward-delete-char
              Delete the character under the cursor, unless the cursor is at the end of the  line,
              in which case the character behind the cursor is deleted.
       quoted-insert (C-q, C-v)
              Add the next character typed to the line verbatim.  This is how to insert characters
              like C-q, for example.
       tab-insert (C-v TAB)
              Insert a tab character.
       self-insert (a, b, A, 1, !, ...)
              Insert the character typed.
       transpose-chars (C-t)
              Drag the character before point forward over the character at  point,  moving  point
              forward  as  well.  If point is at the end of the line, then this transposes the two
              characters before point.  Negative arguments have no effect.
       transpose-words (M-t)
              Drag the word before point past the word after point, moving point over that word as
              well.  If point is at the end of the line, this transposes the last two words on the
              line.
       upcase-word (M-u)
              Uppercase the current (or following) word.  With a negative argument, uppercase  the
              previous word, but do not move point.
       downcase-word (M-l)
              Lowercase  the current (or following) word.  With a negative argument, lowercase the
              previous word, but do not move point.
       capitalize-word (M-c)
              Capitalize the current (or following) word.  With a  negative  argument,  capitalize
              the previous word, but do not move point.
       overwrite-mode
              Toggle  overwrite  mode.   With  an  explicit positive numeric argument, switches to
              overwrite mode.  With an explicit non-positive numeric argument, switches to  insert
              mode.   This  command  affects  only emacs mode; vi mode does overwrite differently.
              Each call to readline() starts in insert mode.  In overwrite mode, characters  bound
              to  self-insert replace the text at point rather than pushing the text to the right.
              Characters bound to backward-delete-char replace the character before point  with  a
              space.  By default, this command is unbound.

   Killing and Yanking
       kill-line (C-k)
              Kill the text from point to the end of the line.
       backward-kill-line (C-x Rubout)
              Kill backward to the beginning of the line.
       unix-line-discard (C-u)
              Kill  backward from point to the beginning of the line.  The killed text is saved on
              the kill-ring.
       kill-whole-line
              Kill all characters on the current line, no matter where point is.
       kill-word (M-d)
              Kill from point to the end of the current word, or if between words, to the  end  of
              the next word.  Word boundaries are the same as those used by forward-word.
       backward-kill-word (M-Rubout)
              Kill  the  word  behind  point.  Word boundaries are the same as those used by back‐
              ward-word.
       shell-kill-word (M-d)
              Kill from point to the end of the current word, or if between words, to the  end  of
              the next word.  Word boundaries are the same as those used by shell-forward-word.
       shell-backward-kill-word (M-Rubout)
              Kill  the  word  behind  point.   Word  boundaries  are  the  same  as those used by
              shell-backward-word.
       unix-word-rubout (C-w)
              Kill the word behind point, using white space as a word boundary.  The  killed  text
              is saved on the kill-ring.
       unix-filename-rubout
              Kill  the  word  behind point, using white space and the slash character as the word
              boundaries.  The killed text is saved on the kill-ring.
       delete-horizontal-space (M-\)
              Delete all spaces and tabs around point.
       kill-region
              Kill the text in the current region.
       copy-region-as-kill
              Copy the text in the region to the kill buffer.
       copy-backward-word
              Copy the word before point to the kill buffer.  The word boundaries are the same  as
              backward-word.
       copy-forward-word
              Copy  the word following point to the kill buffer.  The word boundaries are the same
              as forward-word.
       yank (C-y)
              Yank the top of the kill ring into the buffer at point.
       yank-pop (M-y)
              Rotate the kill ring, and yank the new top.  Only works following yank or yank-pop.

   Numeric Arguments
       digit-argument (M-0, M-1, ..., M--)
              Add this digit to the argument already accumulating, or start a new  argument.   M--
              starts a negative argument.
       universal-argument
              This  is  another way to specify an argument.  If this command is followed by one or
              more digits, optionally with a leading minus sign, those digits define the argument.
              If  the  command  is followed by digits, executing universal-argument again ends the
              numeric argument, but is otherwise ignored.  As a special case, if this  command  is
              immediately followed by a character that is neither a digit or minus sign, the argu‐
              ment count for the next command is multiplied by four.  The argument count  is  ini‐
              tially one, so executing this function the first time makes the argument count four,
              a second time makes the argument count sixteen, and so on.

   Completing
       complete (TAB)
              Attempt to perform completion on the text before point.   Bash  attempts  completion
              treating  the  text as a variable (if the text begins with $), username (if the text
              begins with ~), hostname (if the text begins with @), or command (including  aliases
              and  functions)  in turn.  If none of these produces a match, filename completion is
              attempted.
       possible-completions (M-?)
              List the possible completions of the text before point.
       insert-completions (M-*)
              Insert all completions of the text before point that would have  been  generated  by
              possible-completions.
       menu-complete
              Similar  to complete, but replaces the word to be completed with a single match from
              the list of possible completions.  Repeated execution of menu-complete steps through
              the  list  of possible completions, inserting each match in turn.  At the end of the
              list of completions, the bell is rung (subject to the setting of bell-style) and the
              original  text  is restored.  An argument of n moves n positions forward in the list
              of matches; a negative argument may be used to move backward through the list.  This
              command is intended to be bound to TAB, but is unbound by default.
       menu-complete-backward
              Identical  to menu-complete, but moves backward through the list of possible comple‐
              tions, as if menu-complete had been given a  negative  argument.   This  command  is
              unbound by default.
       delete-char-or-list
              Deletes  the  character  under the cursor if not at the beginning or end of the line
              (like delete-char).  If at the end of the line, behaves identically to possible-com‐
              pletions.  This command is unbound by default.
       complete-filename (M-/)
              Attempt filename completion on the text before point.
       possible-filename-completions (C-x /)
              List the possible completions of the text before point, treating it as a filename.
       complete-username (M-~)
              Attempt completion on the text before point, treating it as a username.
       possible-username-completions (C-x ~)
              List the possible completions of the text before point, treating it as a username.
       complete-variable (M-$)
              Attempt completion on the text before point, treating it as a shell variable.
       possible-variable-completions (C-x $)
              List the possible completions of the text before point, treating it as a shell vari‐
              able.
       complete-hostname (M-@)
              Attempt completion on the text before point, treating it as a hostname.
       possible-hostname-completions (C-x @)
              List the possible completions of the text before point, treating it as a hostname.
       complete-command (M-!)
              Attempt completion on the text before point, treating it as a command name.  Command
              completion  attempts  to match the text against aliases, reserved words, shell func‐
              tions, shell builtins, and finally executable filenames, in that order.
       possible-command-completions (C-x !)
              List the possible completions of the text before point, treating  it  as  a  command
              name.
       dynamic-complete-history (M-TAB)
              Attempt  completion  on the text before point, comparing the text against lines from
              the history list for possible completion matches.
       dabbrev-expand
              Attempt menu completion on the text before point, comparing the text  against  lines
              from the history list for possible completion matches.
       complete-into-braces (M-{)
              Perform  filename  completion  and  insert the list of possible completions enclosed
              within braces so the list is available to the shell (see Brace Expansion above).

   Keyboard Macros
       start-kbd-macro (C-x ()
              Begin saving the characters typed into the current keyboard macro.
       end-kbd-macro (C-x ))
              Stop saving the characters typed into the current keyboard macro and store the defi‐
              nition.
       call-last-kbd-macro (C-x e)
              Re-execute  the  last  keyboard macro defined, by making the characters in the macro
              appear as if typed at the keyboard.

   Miscellaneous
       re-read-init-file (C-x C-r)
              Read in the contents of the inputrc file, and incorporate any bindings  or  variable
              assignments found there.
       abort (C-g)
              Abort  the current editing command and ring the terminal's bell (subject to the set‐
              ting of bell-style).
       do-uppercase-version (M-a, M-b, M-x, ...)
              If the metafied character x is lowercase, run the command that is bound to the  cor‐
              responding uppercase character.
       prefix-meta (ESC)
              Metafy the next character typed.  ESC f is equivalent to Meta-f.
       undo (C-_, C-x C-u)
              Incremental undo, separately remembered for each line.
       revert-line (M-r)
              Undo  all changes made to this line.  This is like executing the undo command enough
              times to return the line to its initial state.
       tilde-expand (M-&)
              Perform tilde expansion on the current word.
       set-mark (C-@, M-<space>)
              Set the mark to the point.  If a numeric argument is supplied, the mark  is  set  to
              that position.
       exchange-point-and-mark (C-x C-x)
              Swap the point with the mark.  The current cursor position is set to the saved posi‐
              tion, and the old cursor position is saved as the mark.
       character-search (C-])
              A character is read and point is moved to the next occurrence of that character.   A
              negative coun