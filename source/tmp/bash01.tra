es保留每个字符的字面值
       报价。单引号之间可能不会出现单引号，即使以a开头也是如此
       反斜杠。

       用双引号括起字符可保留其中所有字符的字面值
       引号，但$，`，\和，当启用历史记录扩展时，除了！该
       字符$和`在双引号内保留其特殊含义。反斜杠
       只有当后面跟着以下字符之一时才保留其特殊含义：$，`，“，
       \，或<newline>。双引号可以在双引号内引用，前面加上a
       反斜杠。如果启用，将执行历史记录扩展，除非！出现在dou-
       使用反斜杠转义引号。之前的反斜杠！没有删除。

       在双引号中，特殊参数*和@具有特殊含义（参见PARAMETERS
       下面）。

       $'string'形式的单词是专门处理的。这个词扩展为字符串，背面 - 
       斜杠转义字符已按ANSI C标准的规定替换。反斜杠逃脱
       序列（如果存在）按如下方式解码：
              警报（铃）
              \ b退格
              。\ E
              \ E逃脱角色
              \ f表格饲料
              \ n新行
              \ r \ n回车
              \ t水平标签
              \ v垂直标签
              \\反斜杠
              单引号
              “双引号
              \ nnnn八位字符，其值为八进制值nnn（一到三个数字 - 
                     它的）
              \ xHH八位字符，其值为十六进制值HH（一个或两个
                     十六进制数字
              \ uHHHH Unicode（ISO / IEC 10646）字符，其值为十六进制值
                     HHHH（一到四个十六进制数字）
              \ UHHHHHHHH
                     Unicode（ISO / IEC 10646）字符，其值为十六进制值
                     HHHHHHHH（一到八位十六进制数字）
              \ cx是control-x字符

       扩展结果是单引号，好像美元符号不存在一样。

       带有美元符号（$“string”）的双引号字符串将导致该字符串
       根据当前的语言环境进行翻译。如果当前的语言环境是C或POSIX，那么
       lar符号被忽略了。如果字符串被翻译和替换，则替换为双
       引。

参数
       参数是存储值的实体。它可以是名称，数字或其中之一
       特殊参数下列出的特殊字符。变量是一个参数
       用名字表示。变量具有值和零个或多个属性。属性是
       使用declare builtin命令分配（请参阅SHELL BUILTIN命令中的声明）。

       如果已为其分配了值，则会设置该参数。空字符串是有效值。
       设置变量后，只能使用unset builtin命令取消设置（参见SHELL
       下面的建筑命令）。

       可以通过表单的语句分配变量

              名称= [值]

       如果未给出值，则为变量分配空字符串。所有值都经过波浪形
       扩展，参数和变量扩展，命令替换，算术扩展，
       和报价删除（见下面的扩展）。如果变量的整数属性设置为
       然后将值计算为算术表达式，即使$（（...））扩展不是
       使用（参见下面的算术扩展）。除了例外，不执行单词拆分
       “$ @”如下面特殊参数下所述。不执行路径名扩展。
       赋值语句也可以作为别名，声明，排版，导出的参数出现，
       readonly和本地内置命令。

       在赋值语句为shell变量赋值的上下文中
       数组索引，+ =运算符可用于追加或添加到变量的前一个
       值。当+ =应用于已设置整数属性的变量时，
       value被计算为算术表达式并添加到变量的当前值，
       这也被评估。当使用复合赋值将+ =应用于数组变量时
       （参见下面的数组），变量的值不会被设置（就像使用=时一样），而新的值 - 
       ues被附加到数组，从大于数组的最大索引开始（对于
       索引数组）或作为关联数组中的附加键值对添加。什么时候
       应用于字符串值变量，值被扩展并附加到变量's
       值。

   位置参数
       位置参数是由除了单个之外的一个或多个数字表示的参数
       数字0.位置参数是在调用shell时从shell的参数赋值的，
       并且可以使用set builtin命令重新分配。位置参数可能不是
       分配给赋值语句。位置参数暂时被替换
       执行shell函数时（参见下面的功能）。

       当扩展由多个数字组成的位置参数时，它必须是
       用括号括起来（见下面的扩展）。

   特殊参数
       shell专门处理几个参数。这些参数只能被引用;
       不允许分配给他们。
       *从一个开始扩展到位置参数。当扩张发生时
              在双引号内，它使用每个参数的值扩展为单个单词
              由IFS特殊变量的第一个字符分隔。也就是说，“$ *”是
              相当于“$ 1c $ 2c ...”，其中c是IFS值的第一个字符
              变量。如果未设置IFS，则参数由空格分隔。如果IFS为null，
              参数连接时没有插入分隔符。
       @从一个开始扩展到位置参数。当扩张发生时
              在双引号内，每个参数都会扩展为单独的单词。也就是说，“$ @”是
              相当于“$ 1”“$ 2”...如果双引号扩展发生在一个单词中，
              第一个参数的扩展与原始的初始部分相结合
              nal word，并且最后一个参数的扩展与最后一部分连接在一起
              原来的字。当没有位置参数时，“$ @”和$ @展开到
              没有（即，他们被删除）。
       ＃扩展为十进制的位置参数数。
       ？扩展到最近执行的前台管道的退出状态。
        - 通过set builtin扩展到调用时指定的当前选项标志
              命令，或shell本身设置的命令（例如-i选项）。
       $扩展为shell的进程ID。在（）子shell中，它扩展到进程
              当前shell的ID，而不是子shell。
       ！扩展到最近执行的后台的进程ID（异步）
              命令。
       0扩展为shell或shell脚本的名称。这是在shell初始化时设置的
              灰。如果使用命令文件调用bash，则将$ 0设置为该名称
              文件。如果使用-c选项启动bash，则将$ 0设置为第一个参数
              在要执行的字符串之后，如果存在。否则，它被设置为
              用于调用bash的文件名，由参数zero指定。
       _在shell启动时，设置为用于调用shell或shell的绝对路径名
              正在环境或参数列表中传递的脚本。随后，
              扩展后扩展到上一个命令的最后一个参数。也设置为
              用于调用执行并放置在环境中的每个命令的完整路径名
              导出到该命令。检查邮件时，此参数保存的名称
              当前正在检查的邮件文件。

   壳变量
       以下变量由shell设置：

       BASH扩展为用于调用此bash实例的完整文件名。
       BASHOPTS
              以冒号分隔的已启用shell选项列表。列表中的每个单词都是有效的
              shopt builtin命令的-s选项的参数（参见SHELL BUILTIN命令
              下面）。出现在BASHOPTS中的选项是由shopt报告的选项。如果
              这个变量是在bash启动时的环境中，每个shell选项都在
              列表将在读取任何启动文件之前启用。该变量是只读的。
       BASHPID
              扩展为当前bash进程的进程ID。这与$$不同
              某些情况，例如不需要bash重新初始化的子shell
              化的。
       BASH_ALIASES
              一个关联数组变量，其成员对应于内部列表
              由别名内置维护的别名。添加到此数组的元素显示在
              别名列表;取消设置数组元素会导致从别名中删除别名
              名单。
       BASH_ARGC
              一个数组变量，其值是每个帧中的参数数量
              当前bash执行调用堆栈。当前子程序的参数个数 - 
              tine（用。或源执行的shell函数或脚本）位于顶部
              堆。执行子程序时，将推送传递的参数数量
              到BASH_ARGC。 shell仅在处于扩展调试模式时才设置BASH_ARGC（请参阅
              下面内置shopt的extdebug选项的描述）
       BASH_ARGV
              包含当前bash执行中所有参数的数组变量
              调用堆栈。最后一个子程序调用的最后一个参数位于顶部
              堆;初始调用的第一个参数位于底部。当一个子程序
              执行后，提供的参数将被推送到BASH_ARGV。外壳设置
              BASH_ARGV仅在扩展调试模式下（参见extdebug的说明）
              购买内置商店的选项）
       BASH_CMDS
              一个关联数组变量，其成员对应于内部哈希表
              由内置哈希维护的命令。添加到此数组的元素显示在
              哈希表;未设置的数组元素导致从哈希中删除命令
              表。
       BASH_COMMAND
              除非shell是，否则当前正在执行或即将执行的命令
              作为陷阱的结果执行命令，在这种情况下，它是命令执行 - 
              在陷阱的时候。
       BASH_EXECUTION_STRING
              -c调用选项的命令参数。
       BASH_LINENO
              一个数组变量，其成员是源文件中的行号，其中每个变量
              调用了FUNCNAME的响应成员。 $ {BASH_LINENO [$ i]}是中的行号
              源文件（$ {BASH_SOURCE [$ i + 1]}）其中调用$ {FUNCNAME [$ i]}（或
              $ {BASH_LINENO [$ i-1]}如果在另一个shell函数中引用的话）。使用LINENO来
              获取当前行号。
       BASH_REMATCH
              一个数组变量，其成员由=〜二元运算符赋值给[[
              条件命令。索引为0的元素是字符串匹配的部分
              整个正则表达式。索引为n的元素是。的部分
              匹配第n个带括号的子表达式的字符串。该变量是只读的。
       BASH_SOURCE
              一个数组变量，其成员是相应的源文件名
              定义了FUNCNAME数组变量中的shell函数名称。 shell函数
              $ {FUNCNAME [$ i]}在文件$ {BASH_SOURCE [$ i]}中定义，并从
              $ {BASH_SOURCE [$ I + 1]}。
       BASH_SUBSHELL
              每次生成子shell或子shell环境时增加1。该
              初始值为0。
       BASH_VERSINFO
              一个只读数组变量，其成员包含此实例的版本信息
              bash。分配给数组成员的值如下：
              BASH_VERSINFO [0]主要版本号（发行版）。
              BASH_VERSINFO [1]次要版本号（版本）。
              BASH_VERSINFO [2]补丁级别。
              BASH_VERSINFO [3]构建版本。
              BASH_VERSINFO [4]发布状态（例如，beta1）。
              BASH_VERSINFO [5] MACHTYPE的值。
       BASH_VERSION
              扩展为描述此bash实例版本的字符串。
       COMP_CWORD
              包含当前光标位置的单词$ {COMP_WORDS}的索引。
              此变量仅在可编程组件调用的shell函数中可用。
              许可设施（见下面的可编程完成）。
       COMP_KEY
              用于调用当前完成函数的键（或键序列的最终键）
              灰。
       COMP_LINE
              当前的命令行。此变量仅在shell函数中可用
              可编程完井设施调用的外部命令（见程序 - 
              mable完成下面）。
       COMP_POINT
              当前光标位置相对于当前开头的索引
              命令。如果当前光标位置在当前命令的末尾，则
              此变量的值等于$ {#COMP_LINE}。此变量仅可用
              在shell函数和由可编程完成调用的外部命令中
              设施（见下面的可编程完成）。
       COMP_TYPE
              设置为与尝试完成的类型相对应的整数值
              导致调用完成函数：TAB，正常完成，？，列表 - 
              连续标签后的完成，！，用于列出部分单词的备选方案
              完成，@，列出完成，如果单词未被修改，或列出％，用于菜单
              完成。此变量仅在shell函数和外部函数中可用
              由可编程完成设施调用的mands（参见可编程完成
              下面）。
       COMP_WORDBREAKS
              readline库在处理时作为单词分隔符处理的字符集
              形成单词完成。如果COMP_WORDBREAKS未设置，则会失去其特殊的适当性 - 
              关系，即使它随后被重置。
       COMP_WORDS
              一个数组变量（参见下面的数组），由变量中的单个单词组成
              租用命令行。使用时，该行被拆分为单词，因为readline会将其拆分
              COMP_WORDBREAKS如上所述。此变量仅在shell函数中可用
              可编程完成设施调用的tions（参见可编程完成
              下面）。
       COPROC创建一个数组变量（参见下面的数组），用于保存输出的文件描述符
              来自并输入到未命名的协同处理（参见上面的Coprocesses）。
       DIRSTACK
              一个数组变量（参见下面的数组），包含目标的当前内容
              保守党堆栈。目录按照它们显示的顺序出现在堆栈中
              dirs builtin。分配给此数组变量的成员可用于修改
              已经在堆栈中的目录，但必须使用pushd和popd内置函数
              添加和删​​除目录。对此变量的赋值不会更改当前值
              目录。如果未设置DIRSTACK，它将失去其特殊属性，即使它是
              随后重置。
       EUID扩展为当前用户的有效用户ID，在shell启动时初始化。
              这个变量是只读的。
       FUNCNAME
              一个数组变量，包含当前在exe中的所有shell函数的名称
              cution call stack。索引为0的元素是当前正在执行的任何元素
              shell函数。最底部的元素（索引最高的元素）是“main”。
              此变量仅在执行shell函数时存在。分配给FUNC-
              NAME无效并返回错误状态。如果未设置FUNCNAME，则会丢失它
              特殊属性，即使它随后被重置。

              此变量可与BASH_LINENO和BASH_SOURCE一起使用。 FUNC的每个元素 - 
              NAME在BASH_LINENO和BASH_SOURCE中有相应的元素来描述调用
              堆。例如，$ {FUNCNAME [$ i]}是从文件$ {BASH_SOURCE [$ i + 1]}中调用的
              在行号$ {BASH_LINENO [$ i]}。内置呼叫者显示当前呼叫
              堆栈使用此信息。
       GROUPS一个数组变量，包含当前用户为mem的组列表
              BER。对GROUPS的分配无效并返回错误状态。如果是GROUPS
              未设置，即使随后重置，它也会失去其特殊属性。
       HISTCMD
              当前命令的历史记录编号或历史记录列表中的索引。如果
              HISTCMD未设置，即使随后重置，它也会丢失其特殊属性。
       主机名
              自动设置为当前主机的名称。
       HOSTTYPE
              自动设置为唯一描述其上的机器类型的字符串
              bash正在执行。默认值取决于系统。
       LINENO每次引用此参数时，shell都会替换一个十进制数字
              在脚本或内部重新发送当前的顺序行号（以1开头）
              功能。如果不在脚本或函数中，则不保证替换值
              有意义。如果LINENO未设置，即使它失去了它的特殊属性
              随后被重置。
       MACHTYPE
              自动设置为完全描述bash所在系统类型的字符串
              以标准GNU cpu-company-system格式执行。默认为系统 - 
              依赖。
       MAPFILE
              创建一个数组变量（请参阅下面的数组）以保存mapfile读取的文本
              没有提供变量名时内置。
       OLDPWD cd命令设置的上一个工作目录。
       OPTARG getopts builtin命令处理的最后一个选项参数的值（参见
              SHELL BUILTIN COMMANDS如下）。
       OPTIND getopts builtin命令要处理的下一个参数的索引（参见
              SHELL BUILTIN COMMANDS如下）。
       OSTYPE自动设置为描述bash所在操作系统的字符串
              执行。默认值取决于系统。
       PIPESTATUS
              一个数组变量（参见下面的数组），其中包含一个退出状态值列表
              最近执行的前台管道中的进程（可能包含
              只有一个命令）。
       PPID shell的父进程ID。这个变量是只读的。
       PWD cd命令设置的当前工作目录。
       RANDOM每次引用此参数时，0到32767之间的随机整数都是
              erated。可以通过赋值来初始化随机数序​​列
              随机。如果RANDOM未设置，它将失去其特殊属性，即使它是subse-
              很快重置。
       READLINE_LINE
              readline行缓冲区的内容，用于“bind -x”（参见SHELL BUILTIN
              下面的命令）。
       READLINE_POINT
              插入点在readline行缓冲区中的位置，用于“绑定”
              -x“（参见下面的SHELL BUILTIN命令）。
       REPLY设置为read builtin命令读取的输入行，当没有参数支持时
              合股。
       SECONDS
              每次引用此参数时，自shell调用以来的秒数
              退回。如果为SECONDS分配了值，则后续返回的值
              references是分配后的秒数加上分配的值。
              如果SECONDS未设置，它将失去其特殊属性，即使它是随后的
              重启。
       SHELLOPTS
              以冒号分隔的已启用shell选项列表。列表中的每个单词都是有效的
              set builtin命令的-o选项的参数（请参阅SHELL BUILTIN命令
              下面）。 SHELLOPTS中出现的选项是由set -o报告的选项。如果
              这个变量是在bash启动时的环境中，每个shell选项都在
              列表将在读取任何启动文件之前启用。该变量是只读的。
       SHLVL每次启动bash实例时增加1。
       UID扩展为当前用户的用户标识，在shell启动时初始化。这个
              变量是只读的。

       shell使用以下变量。在某些情况下，bash会指定一个默认值
       变量;这些情况如下所述。

       BASH_ENV
              如果在bash执行shell脚本时设置了此参数，则其值为
              作为包含初始化shell的命令的文件名，如〜/ .bashrc。
              BASH_ENV的值受参数扩展，命令替换和
              算术扩展在被解释为文件名之前。 PATH不习惯
              搜索结果文件名。
       BASH_XTRACEFD
              如果设置为对应于有效文件描述符的整数，bash将写入
              将-x设置为该文件描述符时生成的跟踪输出。文件
              当取消设置BASH_XTRACEFD或分配新值时，将关闭描述符。解封
              BASH_XTRACEFD或为其分配空字符串会导致将跟踪输出发送到
              标准错误。请注意，将BASH_XTRACEFD设置为2（标准错误文件
              描述符）然后取消设置将导致标准错误被关闭。
       CDPATH cd命令的搜索路径。这是以冒号分隔的目录列表
              其中shell查找cd命令指定的目标目录。一个
              样本值为“。：〜：/ usr”。
       列
              select复合命令用于确定打印时的端子宽度
              选择清单。收到SIGWINCH后自动设置。
       COMPREPLY
              一个数组变量，bash从中读取a生成的可能完成
              可编程完成工具调用的shell函数（参见Programmable
              完成下面）。
       EMACS如果bash在shell以值“t”开头时在环境中找到此变量，
              它假定shell在Emacs shell缓冲区中运行并禁用行
              编辑。
       ENV类似于BASH_ENV;在POSIX模式下调用shell时使用。
       FCEDIT fc内置命令的默认编辑器。
       FIGNORE
              执行文件名完成时要忽略的以冒号分隔的后缀列表
              （见下面的READLINE）。一个文件名，其后缀与FIGNORE中的一个条目匹配
              从匹配的文件名列表中排除。示例值为“.o：〜”。
       FUNCNEST
              如果设置为大于0的数值，则定义最大函数嵌套级别。
              超过此嵌套级别的函数调用将导致当前命令
              中止。
       GLOBIGNORE
              以冒号分隔的模式列表，用于定义要忽略的文件名集
              路径名扩展。如果文件名也与路径名扩展模式匹配
              匹配GLOBIGNORE中的一个模式，它将从匹配列表中删除。
       HISTCONTROL
              以冒号分隔的值列表，用于控制命令在历史记录中的保存方式
              名单。如果值列表包括ignorespace，则以空格开头的行
              字符未保存在历史记录列表中。 ignoredups的值会导致行
              匹配以前的历史记录条目以保存。 ignoreboth的值是
              ignorespace和ignoredups的简写。 erasedups的值会导致之前的所有内容
              匹配要从该行之前的历史列表中删除的当前行的行
              得救了。忽略上面列表中没有的任何值。如果未设置HISTCONTROL，或
              不包含有效值，shell解析器读取的所有行都保存在
              历史列表，受HISTIGNORE的价值限制。第二行和后续行
              未测试多行复合命令，并将其添加到历史记录中
              无论HISTCONTROL的值如何。
       HISTFILE
              保存命令历史记录的文件的名称（请参阅下面的历史记录）。该
              默认值是〜/ .bash_history。如果未设置，则不会保存命令历史记录
              一个交互式shell退出。
       HISTFILESIZE
              历史文件中包含的最大行数。当这个变量是
              如果分配了一个值，则必要时通过删除旧的 - 来截断历史文件
              est条目，包含不超过该行数。默认值为
              500.历史文件在写入时也会被截断为此大小
              交互式shell退出。
       HISTIGNORE
              用冒号分隔的模式列表，用于决定应该使用哪些命令行
              保存在历史列表中。每个模式都锚定在行的开头
              并且必须匹配整行（不附加隐式`*'）。每种模式都是
              在应用HISTCONTROL指定的检查后对该行进行测试。在
              除了正常的shell模式匹配字符外，`＆'匹配前一个
              历史路线。 `＆'可以使用反斜杠进行转义;之前删除了反斜杠
              尝试比赛。多行化合物的第二行和后续行
              未经测试，并且无论HISTIG的价值如何，都被添加到历史记录中
              NORE。
       HISTSIZE
              命令历史记录中要记住的命令数（请参阅下面的历史记录）。该
              默认值为500。
       HISTTIMEFORMAT
              如果设置此变量且不为null，则其值将用作strf-的格式字符串
              time（3）打印与显示的每个历史条目相关联的时间戳
              历史建立。如果设置了此变量，则会将时间戳记写入历史记录
              文件，以便它们可以跨shell会话保留。这使用历史评论
              用于区分时间戳与其他历史记录行的字符。
       HOME当前用户的主目录; cd builtin com的默认参数
              普通话。执行波浪扩展时也使用此变量的值。
       HOSTFILE
              包含与应读取的/ etc / hosts格式相同的文件名
              当shell需要完成主机名时。可能的主机名列表 - 
              在shell运行时可能会改变tions;下次主机名完成
              在更改值后尝试，bash将新文件的内容添加到
              现有清单。如果设置了HOSTFILE但没有值，或者没有命名读取
              有能力的文件，bash尝试读取/ etc / hosts以获取可能的主机名列表
              落成。取消设置HOSTFILE时，将清除主机名列表。
       IFS内部字段分隔符，用于扩展后的分词和
              使用read builtin命令将行拆分为单词。默认值为
              ``<空间> <标签> <换行符> ''。
       IGNOREEOF
              控制交互式shell在接收EOF字符时的操作
              唯一的输入。如果设置，则该值是连续EOF字符的数量
              必须在bash退出之前输入输入行上的第一个字符。如果
              变量存在但没有数值，或
