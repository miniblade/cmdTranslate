d file2指的是相同的设备和inode编号。
       file1 -nt file2
              如果file1比file2更新（根据修改日期），或者如果file1更新，则为True
              存在而file2没有。
       file1 -ot file2
              如果file1早于file2，或者file2存在且file1不存在，则为True。
       -o optname
              如果启用了shell选项optname，则为True。请参阅下面的选项列表
              下面的set builtin的-o选项的描述。
       -v varname
              如果设置了shell变量varname，则为True（已分配值）。
       -z字符串
              如果字符串的长度为零，则为True。
       串
       -n string
              如果字符串的长度不为零，则为True。

       string1 == string2
       string1 = string2
              如果字符串相等则为True。 =应该与POSIX的测试命令一起使用
              一致性。

       string1！= string2
              如果字符串不相等则为True。

       string1 <string2
              如果string1按字典顺序在string2之前排序，则为True。

       string1> string2
              如果string1按字典顺序在string2之后排序，则为True。

       arg1 OP arg2
              OP是-eq，-ne，-lt，-le，-gt或-ge之一。这些算术二元运算符
              如果arg1等于，不等于，小于，小于或等于，则返回true，
              分别大于，或大于或等于arg2。 Arg1和arg2可能是
              正整数或负整数。

简单的命令扩展
       当执行一个简单的命令时，shell执行以下扩展，分配 - 
       从左到右的重叠和重定向。

       1.解析器标记为变量赋值的单词（前面的那些）
              命令名称）和重定向被保存以供以后处理。

       2.扩展不是变量赋值或重定向的单词。如果有的话
              扩展后的单词仍然存在，第一个单词被视为命令的名称
              其余的词是争论。

       3.重定向按照上述REDIRECTION中的描述进行。

       4.每个变量赋值中=后的文本经历波浪扩展，参数 - 
              以前的扩展，命令替换，算术扩展和引用删除
              被分配给变量。

       如果未生成命令名称，则变量赋值会影响当前的shell环境。
       否则，变量将添加到已执行命令的环境中，而不是
       影响当前的shell环境。如果任何分配尝试分配值
       对于只读变量，发生错误，并且命令以非零状态退出。

       如果没有命令名称结果，则执行重定向，但不影响当前shell
       环境。重定向错误导致命令以非零状态退出。

       如果在扩展后留下命令名称，则执行如下所述。
       否则，该命令退出。如果其中一个扩展包含命令替换，
       命令的退出状态是最后一个命令替换的退出状态
       形成。如果没有命令替换，则命令以状态为零退出。

命令执行
       将命令拆分为单词后，如果它导致一个简单的命令和一个
       可选的参数列表，采取以下操作。

       如果命令名称不包含斜杠，则shell会尝试找到它。如果存在
       通过该名称的shell函数，该函数如上面在FUNCTIONS中所述被调用。
       如果名称与函数不匹配，shell将在shell列表中搜索它
       内建命令。如果找到匹配项，则调用该内置项。

       如果名称既不是shell函数也不是内置函数，并且不包含斜杠，bash
       搜索PATH的每个元素以查找包含可执行文件的目录
       名称。 Bash使用哈希表来记住可执行文件的完整路径名（请参阅哈希
       在SHELL BUILTIN COMMANDS下面）。执行PATH中目录的完整搜索
       仅当在哈希表中找不到该命令时。如果搜索不成功，则
       shell搜索名为command_not_found_handle的已定义shell函数。如果那个功能 - 
       如果存在，则使用原始命令和原始命令的参数调用它
       作为参数，函数的退出状态成为shell的退出状态。如果
       如果没有定义该函数，shell会输出错误消息并返回退出状态
       127。

       如果搜索成功，或者命令名称包含一个或多个斜杠，则为shell
       在单独的执行环境中执行指定的程序。参数0设置为
       给定名称，并将命令的其余参数设置为给定的参数if
       任何。

       如果此执行失败，因为该文件不是可执行格式，并且该文件不是
       目录，它被假定为一个shell脚本，一个包含shell命令的文件。一个子
       生成shell以执行它。这个子shell重新初始化，因此效果是
       就好像调用了一个新shell来处理脚本一样，除了loca
       父母记住的命令数量（请参阅SHELL BUILTIN命令下的哈希）
       由孩子保留。

       如果程序是以＃！开头的文件，则第一行的其余部分指定一个
       该计划的口译员。 shell在运行时执行指定的解释器
       不自行处理此可执行格式的系统。相互之间的争论
       preter由第一个解释器名称后面的单个可选参数组成
       程序的行，然后是程序的名称，然后命令参数 - 
       如果有的话。

命令执行环境
       shell有一个执行环境，它包含以下内容：

       ·在调用时由shell继承的打开文件，由重定向支持修改
              与内建执行官合作

       ·当前工作目录由cd，pushd或popd设置，或由。继承
              shell调用

       ·文件创建模式掩码，由umask设置或从shell的父级继承

       ·陷阱设置的当前陷阱

       ·由变量赋值或set或者继承的shell参数
              shell的父级环境

       ·shell函数在执行期间定义或从shell的父元素继承
              环境

       ·调用时启用的选项（默认情况下或使用命令行参数）或
              按集

       ·由shopt启用的选项

       ·使用别名定义的shell别名

       ·各种进程ID，包括后台作业，$$的值和
              PPID的值

       当要执行除内置函数或shell函数之外的简单命令时，它就是
       在包含以下内容的单独执行环境中调用。除非其他 - 
       明智地指出，这些值是从shell继承而来的。


       ·shell的打开文件，以及redirec指定的任何修改和添加 - 
              这个命令

       ·当前的工作目录

       ·文件创建模式掩码

       ·标记为导出的shell变量和函数，以及为其导出的变量
              命令，在环境中传递

       ·shell捕获的陷阱被重置为从shell的父级继承的值，
              并忽略shell忽略的陷阱

       在这个单独的环境中调用的命令不会影响shell的执行环境
       换货。

       命令替换，用括号分组的命令和异步命令是
       在子shell环境中调用，该环境是shell环境的副本，但不包括
       shell捕获的陷阱将重置为shell从其父级继承的值
       在调用。还会执行作为管道的一部分调用的内置命令
       在子shell环境中。对子shell环境所做的更改不会影响
       shell的执行环境。

       产生执行命令替换的子shell继承了-e选项的值
       父shell。当不处于posix模式时，bash会清除这些子shell中的-e选项。

       如果命令后跟＆且作业控件未激活，则为默认标准输入
       该命令是空文件/ dev / null。否则，调用的命令继承
       由重定向修改的调用shell的文件描述符。

环境
       调用程序时，会给出一个称为环境的字符串数组。这是
       名称 - 值对的列表，格式为name = value。

       shell提供了几种操作环境的方法。在调用时，shell
       扫描自己的环境并为找到的每个名称创建一个参数，自动标记 - 
       将其导出到子进程。执行的命令继承环境。该
       export和declare -x命令允许添加和删除参数和函数
       来自环境。如果修改了环境中参数的值，则为新的
       价值成为环境的一部分，取代旧的。任何环境继承的环境
       执行命令由shell的初始环境组成，其值可以修改
       在shell中，少了unset命令删除的任何对，加上通过的任何添加
       export和declare -x命令。

       任何简单命令或功能的环境可以通过前缀临时增加 - 
       使用参数分配，如上面参数中所述。这些任务
       语句仅影响该命令所看到的环境。

       如果设置了-k选项（请参阅下面的set builtin命令），那么所有参数分配
       放置在命令的环境中，而不仅仅是命令名称之前的命令。

       当bash调用外部命令时，变量_被设置为的完整文件名
       命令并在其环境中传递给该命令。

退出状态
       执行命令的退出状态是waitpid系统调用或返回的值
       等效功能。然而，退出状态介于0到255之间，如下所述
       shell可能会特别使用125以上的值。从shell builtins和compound中退出状态
       命令也限于此范围。在某些情况下，shell会使用
       表示特定故障模式的特殊值。

       出于shell的目的，以零退出状态退出的命令已成功。一个
       退出状态为零表示成功。非零退出状态表示失败。当一个
       命令终止于致命信号N，bash使用128 + N的值作为退出状态。

       如果未找到命令，则为执行该命令而创建的子进程将返回状态127。
       如果找到命令但不可执行，则返回状态为126。

       如果命令因扩展或重定向期间的错误而失败，则退出状态为
       大于零。

       如果成功，Shell builtin命令返回状态0（true），如果成功则返回非零（false）状态
       执行时发生错误。所有内置函数都返回退出状态2以表示
       用法不正确。

       除非出现语法错误，否则Bash本身会返回最后执行的命令的退出状态
       发生，在这种情况下，它以非零值退出。另请参见exit builtin命令
       下面。

SIGNALS
       当bash是交互式的时候，在没有任何陷阱的情况下，它会忽略SIGTERM（因此kill 0
       不会杀死交互式shell），并且会捕获并处理SIGINT（以便等待
       内置是可中断的）。在所有情况下，bash都会忽略SIGQUIT。如果工作控制在
       效果，bash忽略SIGTTIN，SIGTTOU和SIGTSTP。

       由bash运行的非内置命令将信号处理程序设置为由。继承的值
       来自其父级的shell。当作业控制无效时，异步命令会忽略
       除了这些继承的处理程序之外，还有SIGINT和SIGQUIT。命令运行的结果
       命令替换忽略键盘生成的作业控制信号SIGTTIN，SIGTTOU，
       和SIGTSTP。

       收到SIGHUP后，shell默认退出。在退出之前，交互式shell
       将SIGHUP重新发送到所有正在运行或已停止的作业。已停止的作业将被发送到SIGCONT
       确保他们收到SIGHUP。防止shell将信号发送到
       特别的工作，应该使用disown builtin从jobs表中删除它（参见SHELL
       下面的BUILTIN命令）或标记为不使用disown -h接收SIGHUP。

       如果使用shopt设置了huponexit shell选项，则bash会在所有作业发送一个SIGHUP
       一个交互式登录shell退出。

       如果bash正在等待命令完成并收到陷阱所具有的信号
       如果已设置，则在命令完成之前不会执行陷阱。当bash在等待
       对于通过等待内置的异步命令，接收一个信号a
       已设置陷阱将导致等待内置立即返回退出状态
       大于128，紧接着执行陷阱。

工作控制
       作业控制是指有选择地停止（暂停）进程执行的能力
       并在以后继续（恢复）他们的执行。用户通常使用它
       通过操作系统内核联合提供的交互式界面来实现设施
       终端司机和bash。

       shell将作业与每个管道相关联。它保留了当前正在执行的表
       可以使用jobs命令列出的作业。当bash异步启动一个作业时（在
       背景），它打印一行看起来像：

              [1] 25647

       表示此作业是作业编号1，表示该作业中的最后一个进程的进程ID
       与此作业关联的管道是25647.单个管道中的所有进程都是
       同一份工作的成员。 Bash使用作业抽象作为工作控制的基础。

       为了便于实现作业控制的用户界面，操作系统
       维护当前终端进程组ID的概念。此流程组的成员
       （进程组ID等于当前终端进程组ID的进程）
       接收键盘生成的信号，如SIGINT。这些过程据说是在
       前景。后台进程是那些进程组ID与termi不同的进程
       最终的;这些过程不受键盘生成的信号的影响。只有前台进程
       允许读取或者如果用户如此指定stty tostop，则写入termi-
       最终。尝试读取的后台进程（写入stty tostop时的进程
       效果）终端由内核的终端驱动程序发送SIGTTIN（SIGTTOU）信号，
       除非被捕，否则暂停该过程。

       如果运行bash的操作系统支持作业控制，则bash包含facil-
       使用它。在进程的时候键入暂停字符（通常是^ Z，Control-Z）
       运行导致该进程停止并将控制权返回给bash。输入延迟
       暂停字符（通常是^ Y，Control-Y）会导致进程停止
       尝试从终端读取输入，并控制返回bash。用户可以
       然后操纵这个工作的状态，使用bg命令在后面继续它 - 
       地面，fg命令在前台继续它，或者kill命令来杀死它。一个
       ^ Z立即生效，并具有导致待定输出的附加副作用
       并输入要删除的内容。

       有很多方法可以引用shell中的作业。角色％介绍了一个
       工作规范（jobspec）。作业号n可以称为％n。工作也可能是
       引用使用用于启动它的名称的前缀，或使用出现的子字符串
       在其命令行中。例如，％ce指的是停止的作业。如果前缀匹配
       不止一个工作，bash报告错误。另一方面，使用％？ce指的是任何工作
       在命令行中包含字符串ce。如果子字符串匹配多个作业，
       bash报告错误。符号%%和％+是指shell的当前概念
       工作，这是最后一份工作，当它在前台或在后面开始时停止 - 
       地面。可以使用％ - 引用上一个作业。如果只有一个作业，％+
       和％ - 都可以用来指代那份工作。在与工作有关的输出中（例如，
       put of the jobs命令），当前作业总是标有+和前一个作业
       用 - 。单个％（没有伴随作业规范）也指当前
       工作。

       简单地命名一个作业可以用来将它带到前台：％1是``fg的同义词
       ％1''，将作业1从后台带入前景。同样，``％1＆''恢复
       作业1在后台，相当于“bg％1”。

       当作业改变状态时，shell立即学习。通常，bash会等到它
       在报告作业状态的变化之前打印一个提示，以便不相互关联
       破坏任何其他输出。如果启用了set builtin命令的-b选项，则使用bash
       立即报告此类更改。 SIGCHLD上的任何陷阱都是针对每个孩子执行的
       退出。

       如果在作业停止时（或者，如果checkjobs shell）尝试退出bash
       选项已经使用内置的shopt运行，运行），shell打印一个警告信息
       sage，如果启用了checkjobs选项，则列出作业及其状态。工作
       然后可以使用命令检查其状态。如果第二次尝试退出
       没有干预命令，shell不会打印另一个警告，并且任何停止
       工作被终止。

PROMPTING
       交互式执行时，bash在准备好读取时显示主提示符PS1
       当需要更多输入来完成命令时，命令和辅助提示PS2。
       Bash允许通过插入一些反斜杠来自定义这些提示字符串 - 
       转义特殊字符，解码如下：
              \ a一个ASCII铃铛字符（07）
              \ d“工作日月日期”格式的日期（例如“5月26日星期二”）
              \ d {格式}
                     格式传递给strftime（3）并将结果插入到
                     提示字符串;空格式导致特定于语言环境的时间表示
                     灰。大括号是必需的
              \ e ASCII转义字符（033）
              \ h主机名最多为第一个`。'
              \ H主机名
              \ j目前由shell管理的作业数量
              \ l shell的终端设备名称的基本名称
              \ n换行
              \ r \ n回车
              \ ss shell的名称，$ 0的基本名称（最终版本后面的部分）
                     削减）
              \ t当前时间为24小时HH：MM：SS格式
              \ T当前时间为12小时HH：MM：SS格式
              \ @当前时间为12小时上午/下午格式
              \当前时间为24小时HH：MM格式
              \ u当前用户的用户名
              \ v bash的版本（例如，2.00）
              \ v发布bash，版本+补丁级别（例如2.00.0）
              \ w当前工作目录，$ HOME缩写为波浪号（使用
                     PROMPT_DIRTRIM变量的值）
              \ W当前工作目录的基本名称，$ HOME缩写为a
                     波浪号
              \！此命令的历史编号
              \＃此命令的命令编号
              \ $如果有效UID为0，则为＃，否则为$
              \ nnn对应八进制数nnn的字符
              反斜杠
              \ [开始一系列非打印字符，可用于嵌入
                     终端控制序列进入提示
              \]结束一系列非打印字符

       命令编号和历史编号通常不同：a的历史编号
       command是它在历史列表中的位置，可能包括从中恢复的命令
       历史文件（参见下面的HISTORY），而命令编号是序列中的位置
       在当前shell会话期间执行的命令。字符串解码后，它是
       通过参数扩展，命令替换，算术扩展和引用进行扩展
       删除，取决于promptvars shell选项的值（请参阅的说明
       在SHELL BUILTIN COMMANDS下面的shopt命令）。

READLINE
       这是在使用交互式shell时处理读取输入的库，除非
        - 在shell调用时给出了nonoiting选项。使用时也使用行编辑
       读取内置的-e选项。默认情况下，行编辑命令与这些命令类似
       Emacs。还提供vi风格的线编辑界面。行编辑即可
       使用-o emacs或-o vi选项随时启用set builtin（请参阅SHELL
       下面的建筑命令）。要在shell运行后关闭行编辑，请使用+ o
       设置内置的emacs或+ o vi选项。

   Readline表示法
       在本节中，Emacs样式表示法用于表示击键。控制键是
       用C键表示，例如，C-n表示Control-N。类似地，元键由M键表示，因此
       M-x表示Meta-X。 （在没有元键的键盘上，M-x表示ESC x，即按下
       退出键然后是x键。这使得ESC成为元前缀。 M-C-x的组合意味着
       ESC-Control-x，或按Esc键，然后在按住x键的同时按住Control键。）

       Readline命令可以给出数字参数，通常用作重复计数。
       然而，有时，这是论证的重要标志。通过否定
       在向前方向上作用的命令的参数（例如，kill-line）导致该com-
       要求向后行动。带有参数的行为偏离的命令
       这在下面说明。

       当命令被描述为杀死文本时，将删除已删除的文本以备将来使用
       检索（yanking）。被杀死的文本保存在杀戮戒指中。连续的杀戮导致了
       文本要累积到一个单元中，可以一次全部拉出。做的命令
       不要杀死文本分开杀戮戒指上的文本块。

   读取线初始化
       通过将命令放入初始化文件（inputrc文件）来自定义Readline。
       此文件的名称取自INPUTRC变量的值。如果那个变量是
       未设置，默认为〜/ .inputrc。当使用readline库的程序启动时
       up，读取初始化文件，并设置键绑定和变量。有
       readline初始化文件中只允许一些基本结构。空行是
       忽略。以＃开头的行是注释。以$开头的行表示条件
       国家结构。其他行表示键绑定和变量设置。

       可以使用inputrc文件更改默认键绑定。其他使用它的程序
       库可以添加自己的命令和绑定。

       例如，放置

              M-Control-u：普遍参数
       要么
              C-Meta-u：普遍论证
       进入inputrc将使M-C-u执行readline命令universal-argument。

       识别以下符号字符名称：RUBOUT，DEL，ESC，LFD，NEWLINE，RET，
       RETURN，SPC，SPACE和TAB。

       除了命令名称之外，readline还允许将键绑定到插入的字符串
       按下键时（宏）。

   Readline键绑定
       用于控制inputrc文件中的键绑定的语法很简单。一切都是
       required是命令的名称或宏的文本以及宏的键序列
       应该受到约束。可以用以下两种方式之一指定名称：作为符号键名，pos-
       使用Meta-或Control-前缀，或作为关键序列。

       使用表单keyname：function-name或macro时，keyname是拼写的键的名称
       用英语说。例如：

              Control-u：通用参数
              Meta-Rubout：反向杀戮词
              Control-o：“>输出”

       在上面的例子中，C-u绑定到函数universal-argument，M-DEL绑定到
       函数backward-kill-word，和C-o绑定运行右边表示的宏
       手边（即将文本“输出”插入到行中）。

       在第二种形式，“keyseq”：function-name或macro，keyseq与上面的keyname不同
       表示整个键序列的字符串可以通过放置序列来指定
       在双引号内。可以使用一些GNU Emacs样式键转义，如下所示
       例如，但无法识别符号字符名称。

              “\ C-u”：普遍论证
              “\ C-x \ C-r”：重新读取-init-file
              “\ e [11~”：“功能键1”

       在此示例中，C-u再次绑定到函数universal-argument。 C-x C-r受约束
       到函数re-read-init-file，ESC [1 1~必然会插入文本``Function
       关键1''。

       完整的GNU Emacs样式转义序列是
              \ C-控制前缀
              \ M-元前缀
              \ e逃脱角色
              \\反斜杠
              \“文字”
              \'文字'

       除了GNU Emacs样式转义序列之外，还有第二组反斜杠转义符
       可供选择：
              警报（铃）
              \ b退格
              \ d删除
              \ f表格饲料
              \ n换行
              \ r \ n回车
              \ t水平标签
              \ v垂直标签
              \ nnnn八位字符，其值为八进制值nnn（一到三个数字 - 
                     它的）
              \ xHH八位字符，其值为十六进制值HH（一个或两个
                     十六进制数字

       输入宏的文本时，必须使用单引号或双引号来表示宏
       定义。假设未加引号的文本是函数名称。在宏体中，背面 - 
       上面描述的斜线逃逸被扩展。反斜杠将引用任何其他字符
       宏文本，包括“和”。

       Bash允许使用bind显示或修改当前的readline键绑定
       内置命令。可以在交互式使用期间通过使用-o来切换编辑模式
       set builtin命令的选项（参见下面的SHELL BUILTIN命令）。

   Readline变量
       Readline具有可用于进一步定制其行为的变量。变量可以
       在inputrc文件中设置一个表单的声明

              设置变量名称值

       除非另有说明，否则readline变量可以取值On或Off（不考虑
       案件）。无法识别的变量名称将被忽略。读取变量值时，为空或
       空值，“on”（不区分大小写），“1”等效于On。所有其他值都是
       相当于Off。变量及其默认值为：

       钟式（可听）
              控制当readline想要敲响终端铃时会发生什么。如果设置为
              没有，readline永远不会响铃。如果设置为visible，则readline使用可见
              如果有可用铃。如果设置为可听，则readline尝试响铃
              纳尔的钟声。
       bind-tty-special-chars（On）
              如果设置为On，则readline尝试绑定由特殊处理的控制字符
              内核的终端驱动程序与其readline等价物。
       comment-begin（``＃''）
              执行readline insert-comment命令时插入的字符串。
              此命令绑定到emacs模式下的M-＃和vi命令模式下的＃。
       完成 - 忽略 - 案例（关闭）
              如果设置为On，则readline在不区分大小写的情况下执行文件名匹配和完成
              时尚。
       completion-prefix-display-length（0）
              长度
