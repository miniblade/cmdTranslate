d file2 refer to the same device and inode numbers.
       file1 -nt file2
              True if file1 is newer (according to modification date)  than  file2,  or  if  file1
              exists and file2 does not.
       file1 -ot file2
              True if file1 is older than file2, or if file2 exists and file1 does not.
       -o optname
              True  if  the  shell  option  optname is enabled.  See the list of options under the
              description of the -o option to the set builtin below.
       -v varname
              True if the shell variable varname is set (has been assigned a value).
       -z string
              True if the length of string is zero.
       string
       -n string
              True if the length of string is non-zero.

       string1 == string2
       string1 = string2
              True if the strings are equal.  = should be used with the  test  command  for  POSIX
              conformance.

       string1 != string2
              True if the strings are not equal.

       string1 < string2
              True if string1 sorts before string2 lexicographically.

       string1 > string2
              True if string1 sorts after string2 lexicographically.

       arg1 OP arg2
              OP  is  one  of  -eq, -ne, -lt, -le, -gt, or -ge.  These arithmetic binary operators
              return true if arg1 is equal to, not equal to, less than, less  than  or  equal  to,
              greater  than, or greater than or equal to arg2, respectively.  Arg1 and arg2 may be
              positive or negative integers.

SIMPLE COMMAND EXPANSION
       When a simple command is executed, the shell performs  the  following  expansions,  assign‐
       ments, and redirections, from left to right.

       1.     The  words  that  the parser has marked as variable assignments (those preceding the
              command name) and redirections are saved for later processing.

       2.     The words that are not variable assignments or redirections are  expanded.   If  any
              words  remain after expansion, the first word is taken to be the name of the command
              and the remaining words are the arguments.

       3.     Redirections are performed as described above under REDIRECTION.

       4.     The text after the = in each variable assignment undergoes tilde expansion,  parame‐
              ter  expansion, command substitution, arithmetic expansion, and quote removal before
              being assigned to the variable.

       If no command name results, the variable assignments affect the current shell  environment.
       Otherwise,  the  variables  are added to the environment of the executed command and do not
       affect the current shell environment.  If any of the assignments attempts to assign a value
       to a readonly variable, an error occurs, and the command exits with a non-zero status.

       If no command name results, redirections are performed, but do not affect the current shell
       environment.  A redirection error causes the command to exit with a non-zero status.

       If there is a command name left after expansion, execution  proceeds  as  described  below.
       Otherwise,  the  command exits.  If one of the expansions contained a command substitution,
       the exit status of the command is the exit status of the  last  command  substitution  per‐
       formed.  If there were no command substitutions, the command exits with a status of zero.

COMMAND EXECUTION
       After  a  command  has  been  split  into  words,  if it results in a simple command and an
       optional list of arguments, the following actions are taken.

       If the command name contains no slashes, the shell attempts to locate it.  If there  exists
       a  shell  function  by that name, that function is invoked as described above in FUNCTIONS.
       If the name does not match a function, the shell searches for  it  in  the  list  of  shell
       builtins.  If a match is found, that builtin is invoked.

       If  the  name  is  neither  a  shell  function nor a builtin, and contains no slashes, bash
       searches each element of the PATH for a directory containing an  executable  file  by  that
       name.   Bash uses a hash table to remember the full pathnames of executable files (see hash
       under SHELL BUILTIN COMMANDS below).  A full search of the directories in PATH is performed
       only  if  the  command  is not found in the hash table.  If the search is unsuccessful, the
       shell searches for a defined shell function named command_not_found_handle.  If that  func‐
       tion  exists,  it is invoked with the original command and the original command's arguments
       as its arguments, and the function's exit status becomes the exit status of the shell.   If
       that  function is not defined, the shell prints an error message and returns an exit status
       of 127.

       If the search is successful, or if the command name contains one or more slashes, the shell
       executes  the  named program in a separate execution environment.  Argument 0 is set to the
       name given, and the remaining arguments to the command are set to the arguments  given,  if
       any.

       If this execution fails because the file is not in executable format, and the file is not a
       directory, it is assumed to be a shell script, a file containing shell  commands.   A  sub‐
       shell  is spawned to execute it.  This subshell reinitializes itself, so that the effect is
       as if a new shell had been invoked to handle the script, with the exception that the  loca‐
       tions  of  commands  remembered by the parent (see hash below under SHELL BUILTIN COMMANDS)
       are retained by the child.

       If the program is a file beginning with #!, the remainder of the first  line  specifies  an
       interpreter  for  the  program.   The shell executes the specified interpreter on operating
       systems that do not handle this executable format themselves.  The arguments to the  inter‐
       preter  consist  of  a single optional argument following the interpreter name on the first
       line of the program, followed by the name of the program, followed  by  the  command  argu‐
       ments, if any.

COMMAND EXECUTION ENVIRONMENT
       The shell has an execution environment, which consists of the following:

       ·      open  files  inherited  by the shell at invocation, as modified by redirections sup‐
              plied to the exec builtin

       ·      the current working directory as set by cd, pushd, or  popd,  or  inherited  by  the
              shell at invocation

       ·      the file creation mode mask as set by umask or inherited from the shell's parent

       ·      current traps set by trap

       ·      shell  parameters  that are set by variable assignment or with set or inherited from
              the shell's parent in the environment

       ·      shell functions defined during execution or inherited from the shell's parent in the
              environment

       ·      options  enabled at invocation (either by default or with command-line arguments) or
              by set

       ·      options enabled by shopt

       ·      shell aliases defined with alias

       ·      various process IDs, including those of background jobs, the value of  $$,  and  the
              value of PPID

       When  a  simple  command  other  than  a builtin or shell function is to be executed, it is
       invoked in a separate execution environment that consists of the following.  Unless  other‐
       wise noted, the values are inherited from the shell.


       ·      the  shell's  open files, plus any modifications and additions specified by redirec‐
              tions to the command

       ·      the current working directory

       ·      the file creation mode mask

       ·      shell variables and functions marked for export, along with variables  exported  for
              the command, passed in the environment

       ·      traps caught by the shell are reset to the values inherited from the shell's parent,
              and traps ignored by the shell are ignored

       A command invoked in this separate environment cannot affect the shell's execution environ‐
       ment.

       Command  substitution,  commands  grouped  with  parentheses, and asynchronous commands are
       invoked in a subshell environment that is a duplicate of the shell environment, except that
       traps  caught by the shell are reset to the values that the shell inherited from its parent
       at invocation.  Builtin commands that are invoked as part of a pipeline are  also  executed
       in  a  subshell  environment.   Changes  made to the subshell environment cannot affect the
       shell's execution environment.

       Subshells spawned to execute command substitutions inherit the value of the -e option  from
       the parent shell.  When not in posix mode, bash clears the -e option in such subshells.

       If  a  command is followed by a & and job control is not active, the default standard input
       for the command is the empty file /dev/null.  Otherwise, the invoked command  inherits  the
       file descriptors of the calling shell as modified by redirections.

ENVIRONMENT
       When  a program is invoked it is given an array of strings called the environment.  This is
       a list of name-value pairs, of the form name=value.

       The shell provides several ways to manipulate the environment.  On  invocation,  the  shell
       scans  its own environment and creates a parameter for each name found, automatically mark‐
       ing it for export to child processes.  Executed  commands  inherit  the  environment.   The
       export  and  declare  -x commands allow parameters and functions to be added to and deleted
       from the environment.  If the value of a parameter in the environment is modified, the  new
       value becomes part of the environment, replacing the old.  The environment inherited by any
       executed command consists of the shell's initial environment, whose values may be  modified
       in  the  shell,  less  any  pairs  removed by the unset command, plus any additions via the
       export and declare -x commands.

       The environment for any simple command or function may be augmented temporarily by  prefix‐
       ing  it  with  parameter  assignments,  as described above in PARAMETERS.  These assignment
       statements affect only the environment seen by that command.

       If the -k option is set (see the set builtin command below), then all parameter assignments
       are placed in the environment for a command, not just those that precede the command name.

       When  bash  invokes an external command, the variable _ is set to the full file name of the
       command and passed to that command in its environment.

EXIT STATUS
       The exit status of an executed command is the value returned by the waitpid system call  or
       equivalent function.  Exit statuses fall between 0 and 255, though, as explained below, the
       shell may use values above 125 specially.  Exit statuses from shell builtins  and  compound
       commands  are  also  limited to this range. Under certain circumstances, the shell will use
       special values to indicate specific failure modes.

       For the shell's purposes, a command which exits with a zero exit status has succeeded.   An
       exit  status  of zero indicates success.  A non-zero exit status indicates failure.  When a
       command terminates on a fatal signal N, bash uses the value of 128+N as the exit status.

       If a command is not found, the child process created to execute it returns a status of 127.
       If a command is found but is not executable, the return status is 126.

       If  a command fails because of an error during expansion or redirection, the exit status is
       greater than zero.

       Shell builtin commands return a status of 0 (true) if successful, and non-zero  (false)  if
       an  error  occurs  while they execute.  All builtins return an exit status of 2 to indicate
       incorrect usage.

       Bash itself returns the exit status of the last command executed,  unless  a  syntax  error
       occurs,  in  which  case it exits with a non-zero value.  See also the exit builtin command
       below.

SIGNALS
       When bash is interactive, in the absence of any traps, it ignores SIGTERM (so that  kill  0
       does  not  kill  an  interactive shell), and SIGINT is caught and handled (so that the wait
       builtin is interruptible).  In all cases, bash ignores  SIGQUIT.   If  job  control  is  in
       effect, bash ignores SIGTTIN, SIGTTOU, and SIGTSTP.

       Non-builtin  commands  run  by bash have signal handlers set to the values inherited by the
       shell from its parent.  When job control is not in  effect,  asynchronous  commands  ignore
       SIGINT  and  SIGQUIT  in addition to these inherited handlers.  Commands run as a result of
       command substitution ignore the keyboard-generated job control  signals  SIGTTIN,  SIGTTOU,
       and SIGTSTP.

       The  shell exits by default upon receipt of a SIGHUP.  Before exiting, an interactive shell
       resends the SIGHUP to all jobs, running or stopped.   Stopped  jobs  are  sent  SIGCONT  to
       ensure  that  they  receive  the SIGHUP.  To prevent the shell from sending the signal to a
       particular job, it should be removed from the jobs table with the disown builtin (see SHELL
       BUILTIN COMMANDS below) or marked to not receive SIGHUP using disown -h.

       If the huponexit shell option has been set with shopt, bash sends a SIGHUP to all jobs when
       an interactive login shell exits.

       If bash is waiting for a command to complete and receives a signal for  which  a  trap  has
       been  set, the trap will not be executed until the command completes.  When bash is waiting
       for an asynchronous command via the wait builtin, the reception of a  signal  for  which  a
       trap  has  been  set  will cause the wait builtin to return immediately with an exit status
       greater than 128, immediately after which the trap is executed.

JOB CONTROL
       Job control refers to the ability to selectively stop (suspend) the execution of  processes
       and  continue  (resume)  their  execution  at a later point.  A user typically employs this
       facility via an interactive interface supplied jointly by  the  operating  system  kernel's
       terminal driver and bash.

       The  shell  associates  a  job with each pipeline.  It keeps a table of currently executing
       jobs, which may be listed with the jobs command.  When bash starts a job asynchronously (in
       the background), it prints a line that looks like:

              [1] 25647

       indicating that this job is job number 1 and that the process ID of the last process in the
       pipeline associated with this job is 25647.  All of the processes in a single pipeline  are
       members of the same job.  Bash uses the job abstraction as the basis for job control.

       To facilitate the implementation of the user interface to job control, the operating system
       maintains the notion of a current terminal process group ID.  Members of this process group
       (processes  whose  process  group  ID  is  equal  to the current terminal process group ID)
       receive keyboard-generated signals such as SIGINT.  These processes are said to be  in  the
       foreground.   Background processes are those whose process group ID differs from the termi‐
       nal's; such processes are immune to keyboard-generated signals.  Only foreground  processes
       are allowed to read from or, if the user so specifies with stty tostop, write to the termi‐
       nal.  Background processes which attempt to read from (write to  when  stty  tostop  is  in
       effect)  the  terminal are sent a SIGTTIN (SIGTTOU) signal by the kernel's terminal driver,
       which, unless caught, suspends the process.

       If the operating system on which bash is running supports job control, bash contains facil‐
       ities to use it.  Typing the suspend character (typically ^Z, Control-Z) while a process is
       running causes that process to be stopped and returns control to bash.  Typing the  delayed
       suspend  character  (typically  ^Y,  Control-Y)  causes  the  process to be stopped when it
       attempts to read input from the terminal, and control to be returned to bash.  The user may
       then  manipulate  the  state  of this job, using the bg command to continue it in the back‐
       ground, the fg command to continue it in the foreground, or the kill command to kill it.  A
       ^Z  takes  effect immediately, and has the additional side effect of causing pending output
       and typeahead to be discarded.

       There are a number of ways to refer to a job in the shell.  The character  %  introduces  a
       job  specification  (jobspec).   Job  number n may be referred to as %n.  A job may also be
       referred to using a prefix of the name used to start it, or using a substring that  appears
       in  its  command  line.   For example, %ce refers to a stopped ce job.  If a prefix matches
       more than one job, bash reports an error.  Using %?ce, on the other hand, refers to any job
       containing  the string ce in its command line.  If the substring matches more than one job,
       bash reports an error.  The symbols %% and %+ refer to the shell's notion  of  the  current
       job,  which  is the last job stopped while it was in the foreground or started in the back‐
       ground.  The previous job may be referenced using %-.  If there is only a  single  job,  %+
       and %- can both be used to refer to that job.  In output pertaining to jobs (e.g., the out‐
       put of the jobs command), the current job is always flagged with a +, and the previous  job
       with  a  -.  A single % (with no accompanying job specification) also refers to the current
       job.

       Simply naming a job can be used to bring it into the foreground: %1 is a synonym  for  ``fg
       %1'',  bringing job 1 from the background into the foreground.  Similarly, ``%1 &'' resumes
       job 1 in the background, equivalent to ``bg %1''.

       The shell learns immediately whenever a job changes state.  Normally, bash waits  until  it
       is  about  to print a prompt before reporting changes in a job's status so as to not inter‐
       rupt any other output.  If the -b option to  the  set  builtin  command  is  enabled,  bash
       reports  such  changes  immediately.   Any  trap on SIGCHLD is executed for each child that
       exits.

       If an attempt to exit bash is made while jobs are  stopped  (or,  if  the  checkjobs  shell
       option  has been enabled using the shopt builtin, running), the shell prints a warning mes‐
       sage, and, if the checkjobs option is enabled, lists the jobs and their statuses.  The jobs
       command  may  then  be  used  to inspect their status.  If a second attempt to exit is made
       without an intervening command, the shell does not print another warning, and  any  stopped
       jobs are terminated.

PROMPTING
       When executing interactively, bash displays the primary prompt PS1 when it is ready to read
       a command, and the secondary prompt PS2 when it needs more input  to  complete  a  command.
       Bash  allows  these  prompt  strings  to  be customized by inserting a number of backslash-
       escaped special characters that are decoded as follows:
              \a     an ASCII bell character (07)
              \d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
              \D{format}
                     the format is passed to strftime(3) and  the  result  is  inserted  into  the
                     prompt  string; an empty format results in a locale-specific time representa‐
                     tion.  The braces are required
              \e     an ASCII escape character (033)
              \h     the hostname up to the first `.'
              \H     the hostname
              \j     the number of jobs currently managed by the shell
              \l     the basename of the shell's terminal device name
              \n     newline
              \r     carriage return
              \s     the name of the shell, the basename of $0 (the portion  following  the  final
                     slash)
              \t     the current time in 24-hour HH:MM:SS format
              \T     the current time in 12-hour HH:MM:SS format
              \@     the current time in 12-hour am/pm format
              \A     the current time in 24-hour HH:MM format
              \u     the username of the current user
              \v     the version of bash (e.g., 2.00)
              \V     the release of bash, version + patch level (e.g., 2.00.0)
              \w     the  current working directory, with $HOME abbreviated with a tilde (uses the
                     value of the PROMPT_DIRTRIM variable)
              \W     the basename of the current working directory, with $HOME abbreviated with  a
                     tilde
              \!     the history number of this command
              \#     the command number of this command
              \$     if the effective UID is 0, a #, otherwise a $
              \nnn   the character corresponding to the octal number nnn
              \\     a backslash
              \[     begin  a  sequence of non-printing characters, which could be used to embed a
                     terminal control sequence into the prompt
              \]     end a sequence of non-printing characters

       The command number and the history number are usually different: the history  number  of  a
       command  is  its position in the history list, which may include commands restored from the
       history file (see HISTORY below), while the command number is the position in the  sequence
       of  commands executed during the current shell session.  After the string is decoded, it is
       expanded via parameter expansion, command substitution,  arithmetic  expansion,  and  quote
       removal,  subject  to  the value of the promptvars shell option (see the description of the
       shopt command under SHELL BUILTIN COMMANDS below).

READLINE
       This is the library that handles reading input when using an interactive shell, unless  the
       --noediting  option is given at shell invocation.  Line editing is also used when using the
       -e option to the read builtin.  By default, the line editing commands are similar to  those
       of  Emacs.   A  vi-style  line  editing  interface  is also available.  Line editing can be
       enabled at any time using the -o emacs or -o vi options  to  the  set  builtin  (see  SHELL
       BUILTIN  COMMANDS  below).  To turn off line editing after the shell is running, use the +o
       emacs or +o vi options to the set builtin.

   Readline Notation
       In this section, the Emacs-style notation is used to denote keystrokes.  Control  keys  are
       denoted by C-key, e.g., C-n means Control-N.  Similarly, meta keys are denoted by M-key, so
       M-x means Meta-X.  (On keyboards without a meta key, M-x  means  ESC  x,  i.e.,  press  the
       Escape  key  then  the x key.  This makes ESC the meta prefix.  The combination M-C-x means
       ESC-Control-x, or press the Escape key then hold the Control key while pressing the x key.)

       Readline commands may be given numeric arguments, which normally act  as  a  repeat  count.
       Sometimes, however, it is the sign of the argument that is significant.  Passing a negative
       argument to a command that acts in the forward direction (e.g., kill-line) causes that com‐
       mand  to act in a backward direction.  Commands whose behavior with arguments deviates from
       this are noted below.

       When a command is described as killing text, the text deleted is saved for possible  future
       retrieval (yanking).  The killed text is saved in a kill ring.  Consecutive kills cause the
       text to be accumulated into one unit, which can be yanked all at once.  Commands  which  do
       not kill text separate the chunks of text on the kill ring.

   Readline Initialization
       Readline  is  customized  by putting commands in an initialization file (the inputrc file).
       The name of this file is taken from the value of the INPUTRC variable.  If that variable is
       unset,  the  default  is ~/.inputrc.  When a program which uses the readline library starts
       up, the initialization file is read, and the key bindings and variables are set.  There are
       only  a  few basic constructs allowed in the readline initialization file.  Blank lines are
       ignored.  Lines beginning with a # are comments.  Lines beginning with a $ indicate  condi‐
       tional constructs.  Other lines denote key bindings and variable settings.

       The default key-bindings may be changed with an inputrc file.  Other programs that use this
       library may add their own commands and bindings.

       For example, placing

              M-Control-u: universal-argument
       or
              C-Meta-u: universal-argument
       into the inputrc would make M-C-u execute the readline command universal-argument.

       The following symbolic character names are recognized: RUBOUT, DEL, ESC, LFD, NEWLINE, RET,
       RETURN, SPC, SPACE, and TAB.

       In addition to command names, readline allows keys to be bound to a string that is inserted
       when the key is pressed (a macro).

   Readline Key Bindings
       The syntax for controlling key bindings in  the  inputrc  file  is  simple.   All  that  is
       required  is  the name of the command or the text of a macro and a key sequence to which it
       should be bound. The name may be specified in one of two ways: as a symbolic key name, pos‐
       sibly with Meta- or Control- prefixes, or as a key sequence.

       When  using  the  form keyname:function-name or macro, keyname is the name of a key spelled
       out in English.  For example:

              Control-u: universal-argument
              Meta-Rubout: backward-kill-word
              Control-o: "> output"

       In the above example, C-u is bound to the function universal-argument, M-DEL  is  bound  to
       the  function  backward-kill-word, and C-o is bound to run the macro expressed on the right
       hand side (that is, to insert the text ``> output'' into the line).

       In the second form, "keyseq":function-name or macro, keyseq differs from keyname  above  in
       that  strings  denoting  an  entire  key  sequence may be specified by placing the sequence
       within double quotes.  Some GNU Emacs style key escapes can be used, as  in  the  following
       example, but the symbolic character names are not recognized.

              "\C-u": universal-argument
              "\C-x\C-r": re-read-init-file
              "\e[11~": "Function Key 1"

       In  this  example, C-u is again bound to the function universal-argument.  C-x C-r is bound
       to the function re-read-init-file, and ESC [ 1 1 ~ is bound to insert the  text  ``Function
       Key 1''.

       The full set of GNU Emacs style escape sequences is
              \C-    control prefix
              \M-    meta prefix
              \e     an escape character
              \\     backslash
              \"     literal "
              \'     literal '

       In  addition  to the GNU Emacs style escape sequences, a second set of backslash escapes is
       available:
              \a     alert (bell)
              \b     backspace
              \d     delete
              \f     form feed
              \n     newline
              \r     carriage return
              \t     horizontal tab
              \v     vertical tab
              \nnn   the eight-bit character whose value is the octal value nnn (one to three dig‐
                     its)
              \xHH   the  eight-bit  character whose value is the hexadecimal value HH (one or two
                     hex digits)

       When entering the text of a macro, single or double quotes must be used to indicate a macro
       definition.   Unquoted text is assumed to be a function name.  In the macro body, the back‐
       slash escapes described above are expanded.  Backslash will quote any  other  character  in
       the macro text, including " and '.

       Bash  allows  the  current  readline key bindings to be displayed or modified with the bind
       builtin command.  The editing mode may be switched during interactive use by using  the  -o
       option to the set builtin command (see SHELL BUILTIN COMMANDS below).

   Readline Variables
       Readline  has variables that can be used to further customize its behavior.  A variable may
       be set in the inputrc file with a statement of the form

              set variable-name value

       Except where noted, readline variables can take the values On or  Off  (without  regard  to
       case).   Unrecognized  variable names are ignored.  When a variable value is read, empty or
       null values, "on" (case-insensitive), and "1" are equivalent to On.  All other  values  are
       equivalent to Off.  The variables and their default values are:

       bell-style (audible)
              Controls  what  happens  when  readline  wants to ring the terminal bell.  If set to
              none, readline never rings the bell.  If set to visible,  readline  uses  a  visible
              bell  if  one is available.  If set to audible, readline attempts to ring the termi‐
              nal's bell.
       bind-tty-special-chars (On)
              If set to On, readline attempts to bind the control characters treated specially  by
              the kernel's terminal driver to their readline equivalents.
       comment-begin (``#'')
              The  string  that  is inserted when the readline insert-comment command is executed.
              This command is bound to M-# in emacs mode and to # in vi command mode.
       completion-ignore-case (Off)
              If set to On, readline performs filename matching and completion in a  case-insensi‐
              tive fashion.
       completion-prefix-display-length (0)
              The length 