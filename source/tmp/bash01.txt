es preserves the literal value of each character  within
       the  quotes.   A  single quote may not occur between single quotes, even when preceded by a
       backslash.

       Enclosing characters in double quotes preserves the literal value of all characters  within
       the  quotes, with the exception of $, `, \, and, when history expansion is enabled, !.  The
       characters $ and ` retain their  special  meaning  within  double  quotes.   The  backslash
       retains its special meaning only when followed by one of the following characters: $, `, ",
       \, or <newline>.  A double quote may be quoted within double quotes by preceding it with  a
       backslash.   If enabled, history expansion will be performed unless an !  appearing in dou‐
       ble quotes is escaped using a backslash.  The backslash preceding the !  is not removed.

       The special parameters * and @ have special meaning when in double quotes  (see  PARAMETERS
       below).

       Words  of the form $'string' are treated specially.  The word expands to string, with back‐
       slash-escaped characters replaced as specified by the ANSI C  standard.   Backslash  escape
       sequences, if present, are decoded as follows:
              \a     alert (bell)
              \b     backspace
              \e
              \E     an escape character
              \f     form feed
              \n     new line
              \r     carriage return
              \t     horizontal tab
              \v     vertical tab
              \\     backslash
              \'     single quote
              \"     double quote
              \nnn   the eight-bit character whose value is the octal value nnn (one to three dig‐
                     its)
              \xHH   the eight-bit character whose value is the hexadecimal value HH (one  or  two
                     hex digits)
              \uHHHH the  Unicode  (ISO/IEC  10646) character whose value is the hexadecimal value
                     HHHH (one to four hex digits)
              \UHHHHHHHH
                     the Unicode (ISO/IEC 10646) character whose value is  the  hexadecimal  value
                     HHHHHHHH (one to eight hex digits)
              \cx    a control-x character

       The expanded result is single-quoted, as if the dollar sign had not been present.

       A  double-quoted  string  preceded by a dollar sign ($"string") will cause the string to be
       translated according to the current locale.  If the current locale is C or POSIX, the  dol‐
       lar  sign is ignored.  If the string is translated and replaced, the replacement is double-
       quoted.

PARAMETERS
       A parameter is an entity that stores values.  It can be a name, a number,  or  one  of  the
       special  characters  listed  below  under  Special  Parameters.   A variable is a parameter
       denoted by a name.  A variable has a value and zero or  more  attributes.   Attributes  are
       assigned using the declare builtin command (see declare below in SHELL BUILTIN COMMANDS).

       A  parameter  is  set  if  it has been assigned a value.  The null string is a valid value.
       Once a variable is set, it may be unset only by using the unset builtin command (see  SHELL
       BUILTIN COMMANDS below).

       A variable may be assigned to by a statement of the form

              name=[value]

       If  value is not given, the variable is assigned the null string.  All values undergo tilde
       expansion, parameter and variable expansion, command  substitution,  arithmetic  expansion,
       and  quote  removal  (see EXPANSION below).  If the variable has its integer attribute set,
       then value is evaluated as an arithmetic expression even if the $((...)) expansion  is  not
       used (see Arithmetic Expansion below).  Word splitting is not performed, with the exception
       of "$@" as explained below under Special Parameters.  Pathname expansion is not  performed.
       Assignment  statements may also appear as arguments to the alias, declare, typeset, export,
       readonly, and local builtin commands.

       In the context where an assignment statement is assigning a value to a  shell  variable  or
       array  index,  the  +=  operator can be used to append to or add to the variable's previous
       value.  When += is applied to a variable for which the  integer  attribute  has  been  set,
       value  is  evaluated as an arithmetic expression and added to the variable's current value,
       which is also evaluated.  When += is applied to an array variable using compound assignment
       (see Arrays below), the variable's value is not unset (as it is when using =), and new val‐
       ues are appended to the array beginning at one greater than the array's maximum index  (for
       indexed  arrays)  or  added  as  additional  key-value pairs in an associative array.  When
       applied to a string-valued variable, value is  expanded  and  appended  to  the  variable's
       value.

   Positional Parameters
       A  positional parameter is a parameter denoted by one or more digits, other than the single
       digit 0.  Positional parameters are assigned from the shell's arguments when it is invoked,
       and  may  be  reassigned  using  the set builtin command.  Positional parameters may not be
       assigned to with assignment statements.  The positional parameters are temporarily replaced
       when a shell function is executed (see FUNCTIONS below).

       When  a positional parameter consisting of more than a single digit is expanded, it must be
       enclosed in braces (see EXPANSION below).

   Special Parameters
       The shell treats several parameters specially.  These parameters may  only  be  referenced;
       assignment to them is not allowed.
       *      Expands  to the positional parameters, starting from one.  When the expansion occurs
              within double quotes, it expands to a single word with the value of  each  parameter
              separated  by  the  first  character  of the IFS special variable.  That is, "$*" is
              equivalent to "$1c$2c...", where c is the first character of the value  of  the  IFS
              variable.  If IFS is unset, the parameters are separated by spaces.  If IFS is null,
              the parameters are joined without intervening separators.
       @      Expands to the positional parameters, starting from one.  When the expansion  occurs
              within  double  quotes, each parameter expands to a separate word.  That is, "$@" is
              equivalent to "$1" "$2" ...  If the double-quoted expansion occurs  within  a  word,
              the expansion of the first parameter is joined with the beginning part of the origi‐
              nal word, and the expansion of the last parameter is joined with the  last  part  of
              the  original  word.  When there are no positional parameters, "$@" and $@ expand to
              nothing (i.e., they are removed).
       #      Expands to the number of positional parameters in decimal.
       ?      Expands to the exit status of the most recently executed foreground pipeline.
       -      Expands to the current option flags as specified upon invocation, by the set builtin
              command, or those set by the shell itself (such as the -i option).
       $      Expands to the process ID of the shell.  In a () subshell, it expands to the process
              ID of the current shell, not the subshell.
       !      Expands to the process ID of the most recently  executed  background  (asynchronous)
              command.
       0      Expands  to the name of the shell or shell script.  This is set at shell initializa‐
              tion.  If bash is invoked with a file of commands, $0 is set to  the  name  of  that
              file.   If  bash is started with the -c option, then $0 is set to the first argument
              after the string to be executed, if one is present.  Otherwise, it  is  set  to  the
              file name used to invoke bash, as given by argument zero.
       _      At  shell  startup,  set  to the absolute pathname used to invoke the shell or shell
              script being executed as passed in the environment or argument list.   Subsequently,
              expands  to the last argument to the previous command, after expansion.  Also set to
              the full pathname used to invoke each command executed and placed in the environment
              exported  to that command.  When checking mail, this parameter holds the name of the
              mail file currently being checked.

   Shell Variables
       The following variables are set by the shell:

       BASH   Expands to the full file name used to invoke this instance of bash.
       BASHOPTS
              A colon-separated list of enabled shell options.  Each word in the list is  a  valid
              argument  for the -s option to the shopt builtin command (see SHELL BUILTIN COMMANDS
              below).  The options appearing in BASHOPTS are those reported as on  by  shopt.   If
              this  variable  is  in the environment when bash starts up, each shell option in the
              list will be enabled before reading any startup files.  This variable is read-only.
       BASHPID
              Expands to the process ID of the current bash process.  This differs from  $$  under
              certain  circumstances, such as subshells that do not require bash to be re-initial‐
              ized.
       BASH_ALIASES
              An associative array variable whose members  correspond  to  the  internal  list  of
              aliases  as maintained by the alias builtin.  Elements added to this array appear in
              the alias list; unsetting array elements cause aliases to be removed from the  alias
              list.
       BASH_ARGC
              An  array  variable  whose  values are the number of parameters in each frame of the
              current bash execution call stack.  The number of parameters to the current  subrou‐
              tine  (shell  function  or  script  executed  with . or source) is at the top of the
              stack.  When a subroutine is executed, the number of  parameters  passed  is  pushed
              onto  BASH_ARGC.  The shell sets BASH_ARGC only when in extended debugging mode (see
              the description of the extdebug option to the shopt builtin below)
       BASH_ARGV
              An array variable containing all of the parameters in  the  current  bash  execution
              call  stack.   The  final parameter of the last subroutine call is at the top of the
              stack; the first parameter of the initial call is at the bottom.  When a  subroutine
              is  executed,  the  parameters  supplied  are pushed onto BASH_ARGV.  The shell sets
              BASH_ARGV only when in extended debugging mode (see the description of the  extdebug
              option to the shopt builtin below)
       BASH_CMDS
              An associative array variable whose members correspond to the internal hash table of
              commands as maintained by the hash builtin.  Elements added to this array appear  in
              the  hash table; unsetting array elements cause commands to be removed from the hash
              table.
       BASH_COMMAND
              The command currently being executed or about to be executed, unless  the  shell  is
              executing a command as the result of a trap, in which case it is the command execut‐
              ing at the time of the trap.
       BASH_EXECUTION_STRING
              The command argument to the -c invocation option.
       BASH_LINENO
              An array variable whose members are the line numbers in source files where each cor‐
              responding member of FUNCNAME was invoked.  ${BASH_LINENO[$i]} is the line number in
              the  source  file  (${BASH_SOURCE[$i+1]})  where  ${FUNCNAME[$i]}  was  called   (or
              ${BASH_LINENO[$i-1]}  if  referenced  within another shell function).  Use LINENO to
              obtain the current line number.
       BASH_REMATCH
              An array variable whose members are assigned by the =~ binary  operator  to  the  [[
              conditional command.  The element with index 0 is the portion of the string matching
              the entire regular expression.  The element with index  n  is  the  portion  of  the
              string matching the nth parenthesized subexpression.  This variable is read-only.
       BASH_SOURCE
              An  array  variable  whose  members are the source filenames where the corresponding
              shell function names in the FUNCNAME array variable are defined.  The shell function
              ${FUNCNAME[$i]}   is   defined  in  the  file  ${BASH_SOURCE[$i]}  and  called  from
              ${BASH_SOURCE[$i+1]}.
       BASH_SUBSHELL
              Incremented by one each time a subshell or subshell  environment  is  spawned.   The
              initial value is 0.
       BASH_VERSINFO
              A  readonly  array variable whose members hold version information for this instance
              of bash.  The values assigned to the array members are as follows:
              BASH_VERSINFO[0]        The major version number (the release).
              BASH_VERSINFO[1]        The minor version number (the version).
              BASH_VERSINFO[2]        The patch level.
              BASH_VERSINFO[3]        The build version.
              BASH_VERSINFO[4]        The release status (e.g., beta1).
              BASH_VERSINFO[5]        The value of MACHTYPE.
       BASH_VERSION
              Expands to a string describing the version of this instance of bash.
       COMP_CWORD
              An index into ${COMP_WORDS} of the word  containing  the  current  cursor  position.
              This  variable is available only in shell functions invoked by the programmable com‐
              pletion facilities (see Programmable Completion below).
       COMP_KEY
              The key (or final key of a key sequence) used to invoke the current completion func‐
              tion.
       COMP_LINE
              The  current  command  line.  This variable is available only in shell functions and
              external commands invoked by the programmable completion  facilities  (see  Program‐
              mable Completion below).
       COMP_POINT
              The  index  of  the current cursor position relative to the beginning of the current
              command.  If the current cursor position is at the end of the current  command,  the
              value  of  this variable is equal to ${#COMP_LINE}.  This variable is available only
              in shell functions and external commands  invoked  by  the  programmable  completion
              facilities (see Programmable Completion below).
       COMP_TYPE
              Set  to  an  integer  value  corresponding  to the type of completion attempted that
              caused a completion function to be called: TAB, for normal completion, ?, for  list‐
              ing  completions  after successive tabs, !, for listing alternatives on partial word
              completion, @, to list completions if the word is not unmodified,  or  %,  for  menu
              completion.   This  variable  is available only in shell functions and external com‐
              mands invoked by the programmable completion facilities (see Programmable Completion
              below).
       COMP_WORDBREAKS
              The  set of characters that the readline library treats as word separators when per‐
              forming word completion.  If COMP_WORDBREAKS is unset, it loses its special  proper‐
              ties, even if it is subsequently reset.
       COMP_WORDS
              An  array variable (see Arrays below) consisting of the individual words in the cur‐
              rent command line.  The line is split into words as readline would split  it,  using
              COMP_WORDBREAKS  as described above.  This variable is available only in shell func‐
              tions invoked by the programmable completion facilities (see Programmable Completion
              below).
       COPROC An array variable (see Arrays below) created to hold the file descriptors for output
              from and input to an unnamed coprocess (see Coprocesses above).
       DIRSTACK
              An array variable (see Arrays below) containing the current contents of  the  direc‐
              tory  stack.  Directories appear in the stack in the order they are displayed by the
              dirs builtin.  Assigning to members of this array variable may  be  used  to  modify
              directories  already  in  the stack, but the pushd and popd builtins must be used to
              add and remove directories.  Assignment to this variable will not change the current
              directory.   If  DIRSTACK  is  unset, it loses its special properties, even if it is
              subsequently reset.
       EUID   Expands to the effective user ID of the current user, initialized at shell  startup.
              This variable is readonly.
       FUNCNAME
              An  array variable containing the names of all shell functions currently in the exe‐
              cution call stack.  The element with index 0 is the name of any  currently-executing
              shell function.  The bottom-most element (the one with the highest index) is "main".
              This variable exists only when a shell function is executing.  Assignments to  FUNC‐
              NAME  have no effect and return an error status.  If FUNCNAME is unset, it loses its
              special properties, even if it is subsequently reset.

              This variable can be used with BASH_LINENO and BASH_SOURCE.  Each element  of  FUNC‐
              NAME  has corresponding elements in BASH_LINENO and BASH_SOURCE to describe the call
              stack.  For instance, ${FUNCNAME[$i]} was called from the file  ${BASH_SOURCE[$i+1]}
              at  line  number  ${BASH_LINENO[$i]}.   The caller builtin displays the current call
              stack using this information.
       GROUPS An array variable containing the list of groups of which the current user is a  mem‐
              ber.  Assignments to GROUPS have no effect and return an error status.  If GROUPS is
              unset, it loses its special properties, even if it is subsequently reset.
       HISTCMD
              The history number, or index in the  history  list,  of  the  current  command.   If
              HISTCMD is unset, it loses its special properties, even if it is subsequently reset.
       HOSTNAME
              Automatically set to the name of the current host.
       HOSTTYPE
              Automatically  set  to a string that uniquely describes the type of machine on which
              bash is executing.  The default is system-dependent.
       LINENO Each time this parameter is referenced, the shell substitutes a decimal number  rep‐
              resenting  the  current  sequential line number (starting with 1) within a script or
              function.  When not in a script or function, the value substituted is not guaranteed
              to  be  meaningful.  If LINENO is unset, it loses its special properties, even if it
              is subsequently reset.
       MACHTYPE
              Automatically set to a string that fully describes the system type on which bash  is
              executing,  in  the  standard GNU cpu-company-system format.  The default is system-
              dependent.
       MAPFILE
              An array variable (see Arrays below) created to hold the text read  by  the  mapfile
              builtin when no variable name is supplied.
       OLDPWD The previous working directory as set by the cd command.
       OPTARG The  value of the last option argument processed by the getopts builtin command (see
              SHELL BUILTIN COMMANDS below).
       OPTIND The index of the next argument to be processed by the getopts builtin  command  (see
              SHELL BUILTIN COMMANDS below).
       OSTYPE Automatically  set  to a string that describes the operating system on which bash is
              executing.  The default is system-dependent.
       PIPESTATUS
              An array variable (see Arrays below) containing a list of exit  status  values  from
              the  processes  in the most-recently-executed foreground pipeline (which may contain
              only a single command).
       PPID   The process ID of the shell's parent.  This variable is readonly.
       PWD    The current working directory as set by the cd command.
       RANDOM Each time this parameter is referenced, a random integer between 0 and 32767 is gen‐
              erated.   The  sequence of random numbers may be initialized by assigning a value to
              RANDOM.  If RANDOM is unset, it loses its special properties, even if it  is  subse‐
              quently reset.
       READLINE_LINE
              The  contents of the readline line buffer, for use with "bind -x" (see SHELL BUILTIN
              COMMANDS below).
       READLINE_POINT
              The position of the insertion point in the readline line buffer, for use with  "bind
              -x" (see SHELL BUILTIN COMMANDS below).
       REPLY  Set to the line of input read by the read builtin command when no arguments are sup‐
              plied.
       SECONDS
              Each time this parameter is referenced, the number of seconds since shell invocation
              is  returned.  If a value is assigned to SECONDS, the value returned upon subsequent
              references is the number of seconds since the assignment plus  the  value  assigned.
              If  SECONDS  is  unset,  it loses its special properties, even if it is subsequently
              reset.
       SHELLOPTS
              A colon-separated list of enabled shell options.  Each word in the list is  a  valid
              argument  for  the  -o option to the set builtin command (see SHELL BUILTIN COMMANDS
              below).  The options appearing in SHELLOPTS are those reported as on by set -o.   If
              this  variable  is  in the environment when bash starts up, each shell option in the
              list will be enabled before reading any startup files.  This variable is read-only.
       SHLVL  Incremented by one each time an instance of bash is started.
       UID    Expands to the user ID of the current user,  initialized  at  shell  startup.   This
              variable is readonly.

       The following variables are used by the shell.  In some cases, bash assigns a default value
       to a variable; these cases are noted below.

       BASH_ENV
              If this parameter is set when bash is executing a shell script, its value is  inter‐
              preted  as  a filename containing commands to initialize the shell, as in ~/.bashrc.
              The value of BASH_ENV is subjected to parameter expansion, command substitution, and
              arithmetic  expansion  before being interpreted as a file name.  PATH is not used to
              search for the resultant file name.
       BASH_XTRACEFD
              If set to an integer corresponding to a valid file descriptor, bash will  write  the
              trace  output  generated  when  set -x is enabled to that file descriptor.  The file
              descriptor is closed when BASH_XTRACEFD is unset or assigned a new value.  Unsetting
              BASH_XTRACEFD or assigning it the empty string causes the trace output to be sent to
              the standard error.  Note that setting BASH_XTRACEFD to 2 (the standard  error  file
              descriptor) and then unsetting it will result in the standard error being closed.
       CDPATH The  search  path for the cd command.  This is a colon-separated list of directories
              in which the shell looks for destination directories specified by the cd command.  A
              sample value is ".:~:/usr".
       COLUMNS
              Used  by  the  select compound command to determine the terminal width when printing
              selection lists.  Automatically set upon receipt of a SIGWINCH.
       COMPREPLY
              An array variable from which bash reads the  possible  completions  generated  by  a
              shell  function  invoked  by  the programmable completion facility (see Programmable
              Completion below).
       EMACS  If bash finds this variable in the environment when the shell starts with value "t",
              it  assumes  that  the  shell  is running in an Emacs shell buffer and disables line
              editing.
       ENV    Similar to BASH_ENV; used when the shell is invoked in POSIX mode.
       FCEDIT The default editor for the fc builtin command.
       FIGNORE
              A colon-separated list of suffixes to ignore  when  performing  filename  completion
              (see READLINE below).  A filename whose suffix matches one of the entries in FIGNORE
              is excluded from the list of matched filenames.  A sample value is ".o:~".
       FUNCNEST
              If set to a numeric value greater than 0, defines a maximum function nesting  level.
              Function  invocations  that exceed this nesting level will cause the current command
              to abort.
       GLOBIGNORE
              A colon-separated list of patterns defining the set of filenames to  be  ignored  by
              pathname  expansion.   If  a  filename  matched by a pathname expansion pattern also
              matches one of the patterns in GLOBIGNORE, it is removed from the list of matches.
       HISTCONTROL
              A colon-separated list of values controlling how commands are saved on  the  history
              list.   If  the  list of values includes ignorespace, lines which begin with a space
              character are not saved in the history list.  A value  of  ignoredups  causes  lines
              matching  the  previous  history  entry  to  not be saved.  A value of ignoreboth is
              shorthand for ignorespace and ignoredups.  A value of erasedups causes all  previous
              lines matching the current line to be removed from the history list before that line
              is saved.  Any value not in the above list is ignored.  If HISTCONTROL is unset,  or
              does  not include a valid value, all lines read by the shell parser are saved on the
              history list, subject to the value of HISTIGNORE.  The second and  subsequent  lines
              of  a  multi-line  compound  command  are  not  tested, and are added to the history
              regardless of the value of HISTCONTROL.
       HISTFILE
              The name of the file in which command history is saved  (see  HISTORY  below).   The
              default  value  is ~/.bash_history.  If unset, the command history is not saved when
              an interactive shell exits.
       HISTFILESIZE
              The maximum number of lines contained in the history file.  When  this  variable  is
              assigned  a value, the history file is truncated, if necessary, by removing the old‐
              est entries, to contain no more than that number of lines.   The  default  value  is
              500.   The  history  file  is  also  truncated to this size after writing it when an
              interactive shell exits.
       HISTIGNORE
              A colon-separated list of patterns used to decide  which  command  lines  should  be
              saved  on  the  history list.  Each pattern is anchored at the beginning of the line
              and must match the complete line (no implicit `*' is  appended).   Each  pattern  is
              tested  against  the line after the checks specified by HISTCONTROL are applied.  In
              addition to the normal shell pattern matching characters, `&' matches  the  previous
              history line.  `&' may be escaped using a backslash; the backslash is removed before
              attempting a match.  The second and subsequent lines of a multi-line  compound  com‐
              mand are not tested, and are added to the history regardless of the value of HISTIG‐
              NORE.
       HISTSIZE
              The number of commands to remember in the command history (see HISTORY below).   The
              default value is 500.
       HISTTIMEFORMAT
              If this variable is set and not null, its value is used as a format string for strf‐
              time(3) to print the time stamp associated with each history entry displayed by  the
              history  builtin.   If  this variable is set, time stamps are written to the history
              file so they may be preserved across shell sessions.  This uses the history  comment
              character to distinguish timestamps from other history lines.
       HOME   The home directory of the current user; the default argument for the cd builtin com‐
              mand.  The value of this variable is also used when performing tilde expansion.
       HOSTFILE
              Contains the name of a file in the same format as /etc/hosts  that  should  be  read
              when  the shell needs to complete a hostname.  The list of possible hostname comple‐
              tions may be changed while the shell is running; the next time  hostname  completion
              is  attempted  after the value is changed, bash adds the contents of the new file to
              the existing list.  If HOSTFILE is set, but has no value, or does not name  a  read‐
              able  file, bash attempts to read /etc/hosts to obtain the list of possible hostname
              completions.  When HOSTFILE is unset, the hostname list is cleared.
       IFS    The Internal Field Separator that is used for word splitting after expansion and  to
              split  lines  into  words  with  the  read  builtin  command.   The default value is
              ``<space><tab><newline>''.
       IGNOREEOF
              Controls the action of an interactive shell on receipt of an EOF  character  as  the
              sole  input.   If  set,  the value is the number of consecutive EOF characters which
              must be typed as the first characters on an input line before bash  exits.   If  the
              variable  exists  but  does  not  have a numeric value, or