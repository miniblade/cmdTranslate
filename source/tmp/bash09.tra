它
                      是cd命令的参数。此选项仅供交互使用
                      贝壳。
              cdable_vars
                      如果设置，则cd builtin命令的参数不是目录
                      假定是变量的名称，其值是要更改的目录
                      至。
              cdspell如果设置，cd com中目录组件的拼写中的小错误
                      授权将得到纠正。检查的错误是转置字符，a
                      缺少一个角色，一个角色太多了。如果找到更正，
                      打印更正的文件名，然后命令继续。这个选项
                      仅供交互式shell使用。
              checkhash
                      如果设置，bash将检查哈希表中找到的命令是否存在
                      试图执行它。如果散列命令不再存在，则为正常路径
                      搜索已执行。
              checkjobs
                      如果设置，bash会在退出之前列出任何已停止和正在运行的作业的状态
                      交互式shell。如果正在运行任何作业，则会导致退出
                      推迟到第二次退出时没有干预命令
                      （见上面的JOB CONTROL）。如果有任何工作，shell总是推迟退出
                      停止。
              checkwinsize
                      如果设置，bash会在每个命令后检查窗口大小，如果需要，
                      更新LINES和COLUMNS的值。
              cmdhist如果设置，bash会尝试保存多行命令的所有行
                      相同的历史记录。这样可以轻松地重新编辑多行命令。
              compat31
                      如果设置，bash将其行为更改为版本3.1的行为
                      引用[[条件命令的=〜运算符]的参数。
              compat32
                      如果设置，bash将其行为更改为版本3.2的行为
                      使用[[条件命令的<]时特定于语言环境的字符串比较
                      和>运营商。 bash-4.1之前的Bash版本使用ASCII排序规则和
                      的strcmp（3）; bash-4.1及更高版本使用当前语言环境的归类序列
                      和strcoll（3）。
              compat40
                      如果设置，bash将其行为更改为版本4.0的行为
                      使用[[条件命令的<]时特定于语言环境的字符串比较
                      和>运算符（参见上一项）以及中断命令的效果
                      名单。
              compat41
                      如果设置，bash，在posix模式下，用双引号处理单引号
                      参数扩展为特殊字符。单引号必须匹配
                      （偶数）和单引号之间的字符被考虑
                      引。这是posix模式到4.1版的行为。该
                      默认的bash行为仍然与以前的版本一样。
              direxpand
                      如果设置，bash将使用单词扩展的结果替换目录名称
                      执行文件名完成时。这改变了阅读的内容 - 
                      行编辑缓冲区。如果未设置，bash会尝试保留用户的内容
                      类型。
              dirspell
                      如果设置，bash会在单词期间尝试对目录名进行拼写校正
                      如果最初提供的目录名称不存在，则完成。
              dotglob如果设置，bash包含以“。”开头的文件名。在路径的结果 - 
                      名称扩展。
              execfail
                      如果设置，如果无法执行文件，则不会退出非交互式shell
                      指定为exec builtin命令的参数。交互式shell
                      如果exec失败，则不会退出。
              expand_aliases
                      如果设置，则如上所述在ALIASES下扩展别名。这个选项
                      默认情况下为交互式shell启用。
              extdebug
                      如果设置，则启用供调试器使用的行为：
                      1. declare builtin的-F选项显示源文件名
                             和作为一个提供的每个函数名对应的行号
                             论点。
                      2.如果DEBUG陷阱运行的命令返回非零值，则
                             跳过下一个命令而不执行。
                      3.如果DEBUG陷阱运行的命令返回值2，则
                             shell正在子例程（shell函数或shell）中执行
                             脚本执行的。或来源内置），一个回复的呼吁是
                             模拟。
                      4. BASH_ARGC和BASH_ARGV按其描述中的描述进行更新。
                             以上。
                      5.启用了函数跟踪：命令替换，shell函数，
                             和（命令）调用的子shell继承DEBUG和RETURN
                             陷阱。
                      6.启用了错误跟踪：命令替换，shell函数和
                             用（命令）调用的子shell继承ERR陷阱。
              extglob如果设置，则上面描述的扩展模式匹配功能
                      名称扩展已启用。
              extquote
                      如果设置，$'string'和$“string”引用在$ {parameter}内执行
                      扩展名用双引号括起来。默认情况下启用此选项。
              failglob
                      如果设置，则在路径名扩展期间无法匹配文件名的模式
                      导致扩展错误。
              force_fignore
                      如果设置，则由FIGNORE shell变量指定的后缀会导致单词
                      在执行单词完成时被忽略，即使被忽略的单词是
                      只有可能的完成。有关说明，请参见上面的SHELL VARIABLES
                      FIGNORE。默认情况下启用此选项。
              globstar
                      如果设置，路径名扩展上下文中使用的模式**将匹配所有
                      文件和零个或多个目录和子目录。如果模式是
                      后跟一个/，只有目录和子目录匹配。
              gnu_errfmt
                      如果设置，则会在标准GNU错误消息中写入shell错误消息
                      格式。
              histappend
                      如果设置，则历史列表将附加到由值的名称命名的文件中
                      shell退出时的HISTFILE变量，而不是覆盖文件。
              histreedit
                      如果设置，并且正在使用readline，则用户有机会重新
                      编辑失败的历史记录替换。
              histverify
                      如果设置，并且正在使用readline，则历史替换的结果为
                      没有立即传递给shell解析器。相反，生成的行是
                      加载到readline编辑缓冲区，允许进一步修改。
              hostcomplete
                      如果设置，并且正在使用readline，bash将尝试执行主机名
                      完成包含@的单词时的完成（请参阅完成
                      在READLINE上面）。默认情况下启用此选项。
              huponexit
                      如果设置，bash将在交互式登录shell时向所有作业发送SIGHUP
                      退出。
              interactive_comments
                      如果设置，则允许以＃开头的单词导致该单词和所有剩余单词
                      该行上的字符在交互式shell中被忽略（参见COMMENTS
                      以上）。默认情况下启用此选项。
              lastpipe
                      如果设置，并且作业控制未激活，则shell运行a的最后一个命令
                      管道未在当前shell环境中的后台执行。
              lithist如果设置，并且启用了cmdhist选项，则会保存多行命令
                      嵌入换行符而不是使用分号分隔符的历史记录
                      在可能的情况。
              login_shell
                      如果shell作为登录shell启动，则shell会设置此选项（请参阅INVOCATION
                      以上）。该值可能不会更改。
              mailwarn
                      如果设置，则从那时起访问了bash正在检查邮件的文件
                      最后一次检查，邮件``邮件邮件已经邮件
                      显示“是”。
              no_empty_cmd_completion
                      如果设置，并且正在使用readline，则bash将不会尝试搜索PATH
                      在空行上尝试完成时可能的完成。
              nocaseglob
                      如果设置，bash在执行时以不区分大小写的方式匹配文件名
                      路径名扩展（请参阅上面的路径名扩展）。
              nocasematch
                      如果设置，bash在执行时以不区分大小写的方式匹配模式
                      执行大小写时匹配或[[条件命令。
              了nullglob
                      如果设置，bash允许不匹配任何文件的模式（请参阅路径名扩展
                      上面）扩展为空字符串，而不是自己。
              progcomp
                      如果设置，则可编程完成设施（参见可编程完成
                      以上）已启用。默认情况下启用此选项。
              promptvars
                      如果设置，则提示字符串经历参数扩展，命令替换，
                      扩展后的算术扩展和引用删除，如中所述
                      提到上面。默认情况下启用此选项。
              restricted_shell
                      如果以限制模式启动，shell会设置此选项（请参阅
                      受限制的壳下面）。该值可能不会更改。这不会重置
                      执行启动文件时，允许启动文件发现
                      shell是否受限制。
              shift_verbose
                      如果设置，shift builtin在移位计数时打印错误消息
                      超过位置参数的数量。
              源路径
                      如果设置，源（。）builtin使用PATH的值来查找目录
                      包含作为参数提供的文件。此选项已启用
                      默认。
              xpg_echo
                      如果设置，echo builtin默认会扩展反斜杠转义序列。

       暂停[-f]
              挂起此shell的执行，直到收到SIGCONT信号。当。。。的时候
              suspell shell是后台进程，可以通过fg命令重启。对于
              更多信息，请阅读JOB CONTROL部分。 suspend命令无法挂起
              登录shell。但是，如果指定了-f选项，则suspend命令可以挂起
              甚至登录shell。返回状态为0，除非shell是登录shell和-f
              未提供，或者未启用作业控制。

       测试expr
       [expr]
              根据条件表达式的计算，返回0或1的状态
              EXPR。每个运算符和操作数必须是单独的参数。表达式是
              在有条件的表达下提出的上述初选。测试没有
              接受任何选择，也不接受和忽略 - 作为表示的论点
              选项的结束。

              表达式可以使用以下运算符组合，以递减列出
              优先顺序。评估取决于论点的数量;见下文。
              当有五个或更多参数时，使用运算符优先级。
              ！ expr如果expr为false则为True。
              （expr）
                     返回expr的值。这可以用来覆盖正常的先例 - 
                     经营者。
              expr1 -a expr2
                     如果expr1和expr2都为真，则为真。
              expr1 -o expr2
                     如果expr1或expr2为真，则为真。

              测试和[使用基于数字的一组规则来评估条件表达式
              论点。

              0个参数
                     表达式是假的。
              1个论点
                     当且仅当参数不为null时，表达式才为真。
              2个论点
                     如果第一个参数是！，当且仅当第二个参数时，表达式为真
                     参数为null。如果第一个参数是一元条件之一
                     上面列出的条件表达式下的运算符，表达式为真
                     如果一元测试是真的。如果第一个参数不是有效的一元条件 - 
                     运营商，表达是假的。
              3个论点
                     以下列条件适用于所列顺序。如果是第二个
                     参数是上面列出的CONDI-中的二元条件运算符之一
                     TIONAL EXPRESSIONS，表达式的结果是二进制的结果
                     使用第一个和第三个参数作为操作数进行测试。 -a和-o opera-
                     当有三个参数时，tors被认为是二元运算符。如果
                     第一个参数是！，该值是使用的两个参数测试的否定
                     第二和第三个论点。如果第一个参数是完全正确的（和
                     第三个参数确切地说，结果是第二个参数测试
                     ond论点。否则，表达式为false。
              4个论点
                     如果第一个参数是！，则结果是三参数的否定
                     表达式由其余参数组成。否则，表达式是
                     使用上面列出的规则根据优先级进行解析和评估。
              5个或更多参数
                     使用。根据优先级解析和评估表达式
                     上面列出的规则。

              当与test或[，<和>运算符一起使用时，使用ASCII按字典顺序排序
              排序。

       times打印shell的累计用户和系统时间以及运行的进程
              贝壳。返回状态为0。

       陷阱[-lp] [[arg] sigspec ...]
              当shell收到信号时，将读取并执行命令arg
              SIGSPEC。如果没有arg（并且有一个sigspec）或 - ，则每个指定的sig-
              nal被重置为其原始处置（进入该处时的值）
              贝壳）。如果arg是空字符串，则忽略每个sigspec指定的信号
              由shell和它调用的命令。如果arg不存在且-p已经存在
              如果提供，则显示与每个sigspec关联的陷阱命令。如果不
              提供了参数，或者如果只给出-p，则trap打印命令列表
              与每个信号相关联。 -l选项使shell打印一个sig-列表
              最终名称及其相应的数字。每个sigspec都是一个信号名称
              在<signal.h>中定义，或信号编号。信号名称不区分大小写
              SIG前缀是可选的。

              如果sigspec是EXIT（0），则命令arg在从shell退出时执行。如果一个
              sigspec是DEBUG，命令arg在每个简单命令之前执行，
              mand，case命令，select命令，命令的每个算术，以及之前的命令
              第一个命令在shell函数中执行（参见上面的SHELL GRAMMAR）。参考
              内置商店的extdebug选项的描述，以了解其对其影响的详细信息
              DEBUG陷阱。如果sigspec是RETURN，则每次执行命令arg
              shell函数或用它执行的脚本。或源内置完成执行 - 
              ING。

              如果sigspec是ERR，则只要一个简单的命令有一个命令就执行命令arg
              非零退出状态，符合以下条件。 ERR陷阱不是exe-
              如果失败的命令是紧跟在a之后的命令列表的一部分
              while或until关键字，if语句中的部分测试，命令exe的一部分
              在&&或||中提取列表，或者命令的返回值是否被反转！
              这些是errexit选项遵循的相同条件。

              进入shell时忽略的信号不能被捕获，重置或列出。被困
              未被忽略的信号将重置为子shell中的原始值
              创建一个或子shell环境。如果有的话，返回状态为false
              sigspec无效;否则陷阱返回true。

       输入[-aftpP]名称[名称...]
              如果没有选项，请指明在用作命令时如何解释每个名称
              名称。如果使用-t选项，则键入打印字符串，该字符串是别名之一，key-
              word，function，builtin或file如果name是别名，shell保留字，函数，
              内置或磁盘文件。如果找不到名称，那么什么都没有
              打印，并返回退出状态false。如果使用-p选项，请键入
              如果名称是speci，则返回将执行的磁盘文件的名称
              作为命令名称，或者如果``type -t name''不会返回文件。该
              -P选项强制PATH搜索每个名称，即使``type -t name''也不会
              返回文件。如果对命令进行哈希处理，则-p和-P将打印散列值，而不是neces-
              在PATH中首先出现的文件。如果使用-a选项，请键入prints
              包含名为name的可执行文件的所有位置。这包括别名和
              函数，当且仅当不使用-p选项时。哈希表
              使用-a时不咨询mands。 -f选项禁止shell函数
              查找，与内置命令一样。如果所有参数都是，则返回true
              发现，如果没有找到，则为false。

       ulimit [-HSTabcdefilmnpqrstuvx [limit]]
              提供对shell可用资源和已启动进程的控制
              通过它，在允许这种控制的系统上。 -H和-S选项指定了
              为给定资源设置硬限制或软限制。硬限制不能增加
              设置后由非root用户设置;软限制可以增加到值
              硬限制。如果既未指定-H也未指定-S，则均为软限制和硬限制
              已设定。 limit的值可以是为资源指定的单位中的数字
              或其中一个特殊值，硬，软或无限，代表当前
              硬限制，当前软限制，无限制。如果省略限制 - 
              ted，打印资源的软限制的当前值，除非-H
              给出了选项。指定多个资源时，限制名称和单位
              在价值之前印刷。其他选项解释如下：
              -a报告所有当前限制
              -b最大套接字缓冲区大小
              -c创建的核心文件的最大大小
              -d进程数据段的最大大小
              -e最大调度优先级（“nice”）
              -f shell及其子项写入的文件的最大大小
              -i待处理信号的最大数量
              -l可以锁定到内存的最大大小
              -m最大驻留集大小（许多系统不遵守此限制）
              -n打开文件描述符的最大数量（大多数系统不允许这样做
                     要设定的值）
              -p 512字节块中的管道大小（可能未设置）
              -q POSIX消息队列中的最大字节数
              -r最大实时调度优先级
              -s最大堆栈大小
              -t以秒为单位的最大CPU时间量
              -u单个用户可用的最大进程数
              -v shell可用的最大虚拟内存量，在某些系统上
                     tems，给它的孩子们
              -x文件锁的最大数量
              -T最大线程数

              如果给出了limit，则它是指定资源的新值（-a选项是
              仅显示）。如果没有给出选项，则假定为-f。值以1024字节为单位
              增量，除了-t，以秒为单位，-p，以512字节为单位
              块和-T，-b，-n和-u，它们是未缩放的值。返回状态为0
              除非提供了无效的选项或参数，否则在设置时会发生错误
              新的限制。在POSIX模式下，512字节块用于`-c'和`-f'选项。

       umask [-p] [-S] [模式]
              用户文件创建掩码设置为mode。如果模式以数字开头，则为
              解释为八进制数;否则它被解释为符号模式掩码
              类似于chmod（1）所接受的。如果省略mode，则为当前值
              面具被打印出来。 -S选项使掩码以符号形式打印;该
              默认输出是八进制数。如果提供了-p选项，则省略模式 - 
              特德，输出的形式可以作为输入重用。如果返回状态为0
              模式已成功更改或未提供模式参数，并且为false
              除此以外。

       unalias [-a] [name ...]
              从已定义的别名列表中删除每个名称。如果提供-a，则为所有别名
              定义被删除。除非提供的名称不是a，否则返回值为true
              别名。

       未设置[-fv] [名称...]
              对于每个名称，删除相应的变量或函数。如果没有选择
              提供，或给出-v选项，每个名称引用一个shell变量。读-
              只有变量可能不会被取消。如果指定了-f，则每个名称都指向一个shell
              函数，并删除函数定义。每个未设置的变量或函数
              从传递给后续命令的环境中删除。如果任何COMP_WORD-
              未设置BREAKS，RANDOM，SECONDS，LINENO，HISTCMD，FUNCNAME，GROUPS或DIRSTACK，
              他们失去了特殊的属性，即使他们随后被重置。出口
              除非名称是只读的，否则status为true。

       等[n ...]
              等待每个指定的进程并返回其终止状态。每个n可以是a
              进程ID或作业规范;如果给出了工作规范，那么所有流程都是如此
              工作的管道等待。如果没有给出n，那么所有当前活跃的孩子都会
              等待cesses，返回状态为零。如果n指定不存在
              进程或作业，返回状态为127.否则，返回状态为退出
              最后一个进程或作业的状态等待。

受限制的壳
       如果以名称rbash启动bash，或者在调用时提供-r选项，则
       外壳变得受限制。受限制的shell用于建立更加环保的环境
       比标准外壳还要笨拙。它的行为与bash相同，但有例外
       以下是不允许或不执行的：

       ·用cd更改目录

       ·设置或取消设置SHELL，PATH，ENV或BASH_ENV的值

       ·指定包含/的命令名

       ·指定包含/作为参数的文件名。内置命令

       ·指定包含斜杠的文件名作为哈希的-p选项的参数
              内置命令

       ·在启动时从shell环境导入函数定义

       ·在启动时从shell环境中解析SHELLOPTS的值

       ·使用>，> |，<>，>＆，＆>和>>重定向运算符重定向输出

       ·使用exec builtin命令将shell替换为另一个命令

       ·使用-f和-d选项向内置命令添加或删除内置命令
              命令

       ·使用enable builtin命令启用禁用的shell内置命令

       ·为命令builtin命令指定-p选项

       ·使用设定+ r或设定+ o限制关闭限制模式。

       在读取任何启动文件后强制执行这些限制。

       当执行找到shell脚本的命令时（请参阅命令执行
       上面），rbash关闭生成的shell中的任何限制来执行脚本。

也可以看看
       Bash参考手册，Brian Fox和Chet Ramey
       Gnu Readline图书馆，Brian Fox和Chet Ramey
       Gnu历史图书馆，Brian Fox和Chet Ramey
       便携式操作系统接口（POSIX）第2部分：Shell和实用程序，IEEE
       sh（1），ksh（1），csh（1）
       emacs（1），vi（1）
       readline的（3）

FILES
       /斌/庆典
              bash可执行文件
       / etc / profile文件
              系统范围的初始化文件，为登录shell执行
       /etc/bash.bash_logout
              系统范围的登录shell清理文件，在登录shell退出时执行
       在〜/ .bash_profile
              为登录shell执行的个人初始化文件
       在〜/ .bashrc
              单个per-interactive-shell启动文件
       〜/ .bash_logout中
              单个登录shell清理文件，在登录shell退出时执行
       〜/ .inputrc文件
              单独的readline初始化文件

作者
       Brian Fox，自由软件基金会
       bfox@gnu.org

       凯斯西储大学Chet Ramey
       chet.ramey@case.edu

BUG报告
       如果你在bash中发现了一个bug，你应该报告它。但首先，你应该确保它
       真的是一个bug，它出现在最新版本的bash中。最新版本是
       始终可以从ftp://ftp.gnu.org/pub/gnu/bash/获得。

       一旦确定实际存在错误，请使用bashbug命令（来自
       源包）提交错误报告。如果您有修复，建议您发送邮件
       还有！建议和“哲学”错误报告可以邮寄到bug-bash@gnu.org或
       发布到Usenet新闻组gnu.bash.bug。

       所有错误报告应包括：

       bash的版本号
       硬件和操作系统
       用于编译的编译器
       错误行为的描述
       一个简短的脚本或“食谱”，它可以解决这个问题

       有关本手册页的评论和错误报告应直接发送至
       chet.ramey@case.edu。

BUGS
       它太大太慢了。

       bash和传统版本的sh之间存在一些细微差别
       因为POSIX规范。

       别名在某些用途中令人困惑。

       Shell内置命令和函数不可停止/可重新启动。

       复合命令和命令序列形式`a; b; c'没有得到优雅的处理
       当试图暂停过程时。当进程停止时，shell立即生效
       执行序列中的下一个命令。放置命令序列就足够了
       在括号之间强制它进入子壳，它可以作为一个单元停止。

       可能尚未导出数组变量。

       一次可能只有一个活动的协处理器。



GNU Bash-4.2 2010年12月28日BASH（1）
