nsion通过执行命令并替换命令替换
       使用命令的标准输出，删除任何尾随换行符。嵌入式新 - 
       不删除行，但可以在分词期间删除它们。命令替代
       tution $（cat文件）可以用等效但更快的$（<file）替换。

       当使用旧式反引号形式的替换时，反斜杠保留其字面值
       除了后跟$，`或\时的含义。第一个反引号前面没有后面的 - 
       斜杠终止命令替换。使用$（命令）表单时，所有字符
       括号之间组成命令;没有人特别对待。

       命令替换可以嵌套。要在使用反引号表单时进行嵌套，请转义
       带有反斜杠的内部反引号。

       如果替换出现在双引号内，则单词拆分和路径名扩展为
       未对结果执行。

   算术扩展
       算术扩展允许评估算术表达式和替换
       结果。算术扩展的格式是：

              $（（表达式））

       该表达式被视为在双引号内，但在双引号内
       括号不予特别处理。表达式中的所有标记都经过参数
       扩展，字符串扩展，命令替换和引用删除。算术扩展
       sions可能是嵌套的。

       评估是根据ARITHMETIC EVALUA-下列规则进行的。
       TION。如果表达式无效，bash会打印一条消息，指示失败并且没有替换 - 
       发生了。

   流程替代
       支持命名管道（FIFO）或支持命名管道的系统支持进程替换
       / dev / fd命名打开文件的方法。它采用<（list）或>（list）的形式。这个过程
       list的输入或输出连接到FIFO或/ dev / fd中的某个文件。名字
       作为扩展的结果，该文件作为参数传递给当前命令
       锡永。如果使用>（列表）表单，则写入文件将为列表提供输入。如果
       使用<（list）表单时，应该读取作为参数传递的文件以获取out-
       列表。

       可用时，过程替换与参数和变量同时执行
       能够扩展，命令替换和算术扩展。

   单词分裂
       shell扫描参数扩展，命令替换和算术的结果
       单词拆分中双引号内未出现的扩展。

       shell将IFS的每个字符视为分隔符，并拆分另一个字符的结果
       扩展到这些角色的文字。如果未设置IFS，或其值完全正确
       <space> <tab> <newline>，默认情况下，然后是<space>，<tab>和<newline>的序列。
       忽略前面扩展的结果的开始和结束，以及任何序列
       不在开头或结尾的IFS字符用于分隔单词。如果IFS有值
       除了默认值，那么空格字符空格和制表符的序列就是
       在单词的开头和结尾处被忽略，只要空格字符在
       IFS的值（IFS空白字符）。 IFS中任何非IFS白色字符 - 
       空格以及任何相邻的IFS空白字符，用于分隔字段。一系列的
       IFS空白字符也被视为分隔符。如果IFS的值为null，则为no
       发生单词分裂。

       保留显式空参数（“”或“”）。不带引号的隐式空参数，结果 - 
       从没有值的参数的扩展中删除。如果参数有
       没有值在双引号内扩展，null参数结果并保留。

       请注意，如果未发生扩展，则不执行拆分。

   路径名扩展
       分词后，除非设置了-f选项，否则bash会扫描每个单词以查找字符。
       acters *，？和[。如果出现其中一个字符，则该单词被视为a
       模式，并替换为按字母顺序排序的文件名列表
       燕鸥。如果找不到匹配的文件名，并且未启用shell选项nullglob，
       这个词保持不变。如果设置了nullglob选项，并且未找到匹配项，则
       字被删除。如果设置了failglob shell选项，但未找到匹配项，则会出现错误
       打印消息并且不执行该命令。如果是shell选项nocaseglob是
       启用后，执行匹配而不考虑字母字符的情况。什么时候
       一个模式用于路径名扩展，字符“。”在名称的开头或
       除非shell选项dotglob，否则必须明确匹配斜杠后面的斜杠
       已设定。匹配路径名时，必须始终明确匹配斜杠字符。
       在其他情况下，“。”字符不会被特别处理。请参阅说明
       关于nocaseglob，nullglob的描述，请在SHELL BUILTIN COMMANDS下面购买
       failglob和dotglob shell选项。

       GLOBIGNORE shell变量可用于限制与pat-匹配的文件名集
       燕鸥。如果设置了GLOBIGNORE，则每个匹配的文件名也与其中一个模式匹配
       在GLOBIGNORE中从匹配列表中删除。文件名“。”和“..”是
       设置GLOBIGNORE时始终忽略且不为null。但是，将GLOBIGNORE设置为非
       null值具有启用dotglob shell选项的效果，因此所有其他文件名都是如此
       以“。”开头会匹配。为了获得忽略文件名的旧行为，
       用“。”打开，使“。*”成为GLOBIGNORE中的一种模式。 dotglob选项是
       未设置GLOBIGNORE时禁用。

       模式匹配

       除特殊模式字符外，模式中出现的任何字符
       如下所述，匹配自己。 NUL字符可能不会出现在模式中。背面 - 
       斜线逃脱了以下角色;匹配时丢弃转义反斜杠。
       如果要按字面匹配，则必须引用特殊模式字符。

       特殊模式字符具有以下含义：

              *匹配任何字符串，包括空字符串。当globstar shell
                     选项已启用，*用于路径名扩展上下文，两个相邻
                     用作单个模式的cent * s将匹配所有文件，零个或多个direc-
                     托儿所和子目录。如果后跟一个/，则两个相邻的*将匹配
                     只有目录和子目录。
              ？匹配任何单个字符。
              [...]匹配任何一个附带的字符。一对字符分开
                     用连字符表示范围表达式;任何在其间排序的角色
                     这两个字符，包括使用当前区域设置的整理
                     序列和字符集匹配。如果第一个字符跟着
                     [是一个！或者^ ^然后匹配任何未包含的字符。排序
                     范围表达式中的字符顺序由当前区域设置决定
                     以及LC_COLLATE shell变量的值（如果已设置）。 A  - 可能匹配
                     将它包含在集合中的第一个或最后一个字符中。 A]可能是
                     通过将其包含在集合中的第一个字符进行匹配。

                     在[和]中，可以使用语法指定字符类
                     [：class：]，其中class是POSIX中定义的以下类之一
                     标准：
                     alnum alpha ascii空白cntrl数字图表下部打印punct空间上部词
                     xdigit
                     字符类匹配属于该类的任何字符。这个单词
                     字符类匹配字母，数字和字符_。

                     在[和]中，可以使用语法[= c =]指定等价类，
                     它匹配具有相同排序权重的所有字符（由...定义）
                     当前的语言环境）作为字符c。

                     在[和]中，语法[.symbol。]匹配整理符号符号。

       识别了几个扩展模式匹配运算符。在以下描述中，
       模式列表是由|分隔的一个或多个模式的列表。复合图案可以
       使用以下一个或多个子模式形成：

              ？（模式列表）
                     匹配给定模式的零次或一次出现
              *（模式列表）
                     匹配给定模式的零次或多次出现
              +（模式列表）
                     匹配给定模式的一次或多次出现
              @（模式列表）
                     匹配给定模式之一

       如果使用内置shopt启用了extglob shell选项，则遵循模式匹配
       运营商也被认可：

              ！（模式列表）
                     匹配除了给定模式之外的任何内容

   报价删除
       在前面的扩展之后，所有未加引号出现的字符为\，'和“
       没有导致上述扩展之一被删除。

REDIRECTION
       在执行命令之前，可以使用特殊的nota重定向其输入和输出
       由shell解释。重定向也可用于打开和关闭文件
       当前的shell执行环境。可以在以下重定向运算符之前
       或出现在简单命令中的任何位置或可能遵循命令。重定向是亲
       按从左到右的顺序排列。

       可以在每个重定向之前可以在文件描述符号之前
       用{varname}形式的单词。在这种情况下，对于每个重定向运算符，除了&&
       和< -   - ，shell将分配一个大于10的文件描述符并将其分配给var-
       名称。如果>＆ - 或<＆ - 前面有{varname}，则varname的值定义文件
       要关闭的描述符。

       在以下描述中，如果省略文件描述符号，则第一个
       重定向运算符的字符是<，重定向是指标准输入
       （文件描述符0）。如果重定向运算符的第一个字符是>，则重定向
       rection指标准输出（文件描述符1）。

       除非另有说明，否则在以下描述中的重定向运算符后面的单词
       注意到，需要进行支撑扩展，波浪扩展，参数扩展，命令子
       排除，算术扩展，引用删除，路径名扩展和单词拆分。如果
       它扩展到多个单词，bash报告错误。

       请注意，重定向的顺序非常重要。例如，命令

              ls> dirlist 2>＆1

       在命令时将标准输出和标准错误都指向文件dirlist

              ls 2>＆1> dirlist

       仅将标准输出指向文件dirlist，因为标准错误是重复的
       在标准输出重定向到dirlist之前从标准输出。

       如上所述，Bash在重定向时使用它们时会处理多个文件名
       在下表中：

              的/ dev / FD / FD
                     如果fd是有效整数，则重复文件描述符fd。
              的/ dev /标准输入
                     文件描述符0是重复的。
              的/ dev /标准输出
                     文件描述符1是重复的。
              的/ dev /标准错误
                     文件描述符2是重复的。
              的/ dev / TCP /主机/端口
                     如果host是有效的主机名或Internet地址，则port是整数端口
                     数字或服务名称，bash尝试打开与相关的TCP连接
                     支持套接字。
              的/ dev / UDP /主机/端口
                     如果host是有效的主机名或Internet地址，则port是整数端口
                     数字或服务名称，bash尝试打开与相关的UDP连接
                     支持套接字。

       无法打开或创建文件会导致重定向失败。

       使用大于9的文件描述符的重定向应尽可能小心使用
       与shell在内部使用的文件描述符冲突。

   重定向输入
       输入的重定向导致名称来自word扩展的文件
       打开读取文件描述符n，或标准输入（文件描述符0），如果n是
       未标明。

       重定向输入的一般格式是：

              [N] <字

   重定向输出
       输出的重定向导致其名称来自word扩展的文件
       打开用于写入文件描述符n，或标准输出（文件描述符1），如果n是
       未标明。如果文件不存在则创建;如果确实存在，则会被截断
       零尺寸。

       重定向输出的一般格式是：

              [N]>字

       如果重定向运算符是>，则set builtin的noclobber选项已经完成
       启用后，如果名称由扩展名称生成的文件，重定向将失败
       单词存在，是一个常规文件。如果重定向运算符是> |，或重定向
       operator is>并且未启用set builtin命令的noclobber选项，redi-
       即使以word命名的文件存在，也会尝试执行此操作。

   附加重定向输出
       以这种方式重定向输出会导致名称由扩展产生的文件
       要打开以附加到文件描述符n或标准输出（文件
       描述符1）如果未指定n。如果该文件不存在，则创建该文件。

       附加输出的一般格式是：

              [N] >>字

   重定向标准输出和标准错误
       此构造允许标准输出（文件描述符1）和标准错误
       输出（文件描述符2）重定向到名称为扩展名的文件
       字。

       重定向标准输出和标准错误有两种格式：

              ＆>字
       和
              >＆字

       在这两种形式中，第一种是优选的。这在语义上等同于

              >字2>＆1

   附加标准输出和标准错误
       此构造允许标准输出（文件描述符1）和标准错误
       输出（文件描述符2）将附加到名称为单词扩展的文件。

       附加标准输出和标准错误的格式为：

              ＆>>字

       这在语义上等同于

              >>字2>＆1

   这里的文件
       这种类型的重定向指示shell从当前源读取输入，直到a
       可以看到仅包含分隔符（没有尾随空格）的行。所有的线都读了
       然后将该点用作命令的标准输入。

       here-documents的格式是：

              << [ - ]字
                      这里文档
              分隔符

       没有参数扩展，命令替换，算术扩展或路径名扩展
       是在单词上执行的。如果引用单词中的任何字符，则分隔符是结果
       引用删除单词，并且不会展开here-document中的行。如果是的话
       不带引号，here-document的所有行都经过参数扩展，命令子
       结果和算术扩展。在后一种情况下，字符序列\ <newline>
       被忽略，\必须用于引用字符\，$和`。

       如果重定向运算符是<<  - ，则从输入中删除所有前导制表符
       行和包含分隔符的行。这允许shell脚本中的here-documents
       以自然的方式缩进。

   这里的弦乐
       这里文档的一个变体，格式是：

              <<<字

       该字被扩展并在其标准输入上提供给命令。

   复制文件描述符
       重定向运算符

              [N] <＆字

       用于复制输入文件描述符。如果word扩展为一个或多个数字，则
       由n表示的文件描述符被作为该文件描述符的副本。如果是数字
       在word中没有指定打开输入的文件描述符，发生重定向错误。如果
       word求值为 - ，文件描述符n关闭。如果未指定n，则为标准
       使用输入（文件描述符0）。

       运营商

              [N]>＆字

       类似地用于复制输出文件描述符。如果没有指定n，则stan-
       使用dard输出（文件描述符1）。如果单词中的数字未指定文件
       描述符打开输出，发生重定向错误。作为一个特例，如果n省略 - 
       ted，word不会扩展为一个或多个数字，标准输出和标准错误
       如前所述重定向。

   移动文件描述符
       重定向运算符

              [N] <＆digit-

       将文件描述符数字移动到文件描述符n或标准输入（文件描述 - 
       tor 0）如果未指定n。数字在复制到n后关闭。

       同样，重定向运算符

              [N]>＆digit-

       将文件描述符数字移动到文件描述符n，或标准输出（文件描述 - 
       tor 1）如果没有指定n。

   打开阅读和写作的文件描述符
       重定向运算符

              [N] <>字

       导致名称为word扩展的文件被打开以进行读取和写入
       如果未指定n，则在文件描述符n上或在文件描述符0上。如果文件有
       它不存在，它被创造出来。

ALIASES
       别名允许字符串在用作a的第一个单词时替换单词
       简单的命令。 shell维护一个别名列表，可以设置和取消设置
       别名和unalias内置命令（请参阅下面的SHELL BUILTIN命令）。第一个字
       如果不带引号，则检查每个简单命令以查看它是否具有别名。如果是这样，那个词
       由别名的文本替换。字符/，$，`，和=以及任何shell
       上面列出的元字符或引号可能不会出现在别名中。该
       替换文本可能包含任何有效的shell输入，包括shell元字符。该
       替换文本的第一个单词是针对别名测试的，但是与单词相同
       正在扩展的别名不会再次展开。这意味着可以将ls替换为ls
       例如，ls -F和bash不会尝试递归扩展替换文本。如果
       别名值的最后一个字符是空白，然后是下一个命令字
       还检查别名是否有别名扩展。

       使用alias命令创建和列出别名，并使用unalias com-删除
       普通话。

       在替换文本中没有使用参数的机制。如果参数是
       需要时，应使用shell函数（参见下面的功能）。

       当shell不是交互式时，别名不会扩展，除非expand_aliases shell
       使用shopt设置选项（参见SHELL BUILTIN COMMANDS下的shopt说明
       下面）。

       关于别名的定义和使用的规则有些令人困惑。总是打击
       在执行任何命令之前，读取至少一个完整的输入行
       线。读取命令时会扩展别名，而不会在执行时扩展别名。因此，一个
       与另一个命令出现在同一行的别名定义直到生效才会生效
       读取下一行输入。该行上别名定义后面的命令
       不受新别名的影响。当函数执行时，这种行为也是一个问题
       cuted。读取函数定义时会扩展别名，而不是函数定义时
       执行，因为函数定义本身就是一个复合命令。作为结果，
       在执行该函数之后，函数中定义的别名才可用。至
       安全，始终将别名定义放在单独的行上，并且不要在复合中使用别名
       命令。

       对于几乎所有目的，别名都被shell函数取代。

功能
       如上所述在SHELL GRAMMAR中定义的shell函数存储了一系列的
       为以后的执行提供支持。当shell函数的名称用作简单命令时
       name，执行与该函数名关联的命令列表。功能是
       在当前shell的上下文中执行;没有创建新的流程来解释它们
       （与shell脚本的执行形成对比）。执行函数时，
       函数的参数在执行期间成为位置参数。 spe-
       更新cial参数＃以反映更改。特殊参数0不变。该
       FUNCNAME变量的第一个元素设置为函数的名称，而函数
       正在执行。

       shell执行环境的所有其他方面在函数和函数之间是相同的
       它的调用者有以下例外：DEBUG和RETURN陷阱（参见说明书
       除非函数具有，否则不会继承在SHELL BUILTIN COMMANDS下面建立的陷阱
       被赋予trace属性（参见下面声明内置的描述）或-o
       functrace shell选项已使用set builtin启用（在这种情况下所有函数都已启用）
       继承DEBUG和RETURN陷阱），除非-o，否则不会继承ERR陷阱
       errtrace shell选项已启用。

       可以使用local builtin命令声明函数本地的变量。 Ordinar-
       ily，变量及其值在函数和调用者之间共享。

       FUNCNEST变量，如果设置为大于0的数值，则定义最大函数
       筑巢水平。超出限制的函数调用会导致整个命令
       中止。

       如果在函数中执行内置命令返回，则该函数完成并执行
       函数调用后，使用下一个命令恢复。任何与之相关的命令
       在执行恢复之前执行RETURN陷阱。当一个函数完成时，val-
       位置参数和特殊参数＃的ues将恢复为值
       他们在执行函数之前就已经有了。

       可以使用declare或typeset的-f选项列出函数名称和定义
       内置命令。声明或排版的-F选项仅列出函数名称
       （如果启用了extdebug shell选项，则可选择包含源文件和行号）。
       可以导出函数，以便子shell自动使用-f定义它们
       导出内置的选项。可以使用-f选项删除函数定义
       未设置的内置。请注意，可能会导致shell函数和具有相同名称的变量
       在传递给shell的子项的环境中的多个具有相同名称的条目中。
       如果这可能导致问题，应该小心。

       函数可以是递归的。 FUNCNEST变量可用于限制深度
       函数调用堆栈并限制函数调用的数量。默认情况下，没有限制
       强加于递归调用的数量。

算术评估
       在某些情况下，shell允许计算算术表达式（参见
       let和declare内置命令和算术扩展）。评估完成
       固定宽度的整数，没有检查溢出，虽然除以0并且被捕获
       标记为错误。运算符及其优先级，关联性和值是
       与C语言相同。以下运算符列表分为以下级别
       等优先运算符。级别按优先级递减的顺序列出。

       id ++ id--
              变量后增量和后减量
       ++ id --id
              变量预增量和预减量
        -  +一元减号和加号
       ！ 〜逻辑和按位否定
       **取幂
       * /％乘法，除法，余数
       +  - 加法，减法
       << >>左右按位移位
       <=> = <>
              对照
       ==！=平等和不平等
       ＆按位AND
       ^按位异或
       |按位OR
       &&逻辑AND
       ||逻辑或
       EXPR EXPR：EXPR
              条件运算符
       = * = / =％= + =  -  = << = >> =＆= ^ = | =
              分配
       expr1，expr2
              逗号

       允许Shell变量作为操作数;参数扩展在之前执行
       表达式被评估。在表达式中，shell变量也可以引用
       不使用参数扩展语法的名称。一个null变量或未设置的shell变量
       在不使用参数扩展语法的情况下按名称引用时计算结果为0。该
       变量的值在引用时或在何时被计算为算术表达式
       使用declare -i赋予整数属性的变量被赋值。
       null值的计算结果为0. shell变量不需要转换其整数属性
       在表达式中使用。

       前导0的常量被解释为八进制数。前导0x或0X表示
       十六进制。否则，数字采用[base＃] n的形式，其中可选的基数为deci
       表示算术基数的2到64之间的数字，n是其中的数字
       基础。如果省略base＃，则使用基数10。大于9的数字代表
       由小写字母，大写字母，@和_按顺序排列。如果基地
       小于或等于36，小写和大写字母可互换使用
       表示10到35之间的数字。

       按优先顺序评估运算符。括号中的子表达式是评估 - 
       首先，可以覆盖上面的优先规则。

有条件的表达
       条件表达式由[[复合命令和测试和[builtin com-]使用
       mands测试文件属性并执行字符串和算术比较。表达式
       由以下一元或二元原色组成。如果有任何文件参数
       初选的格式为/ dev / fd / n，然后检查文件描述符n。如果是文件
       其中一个原色的参数是/ dev / stdin，/ dev / stdout或/ dev / stderr，file之一
       分别检查描述符0,1或2。

       除非另有规定，对文件进行操作的原色遵循符号链接和操作
       吃了链接的目标，而不是链接本身。

       与[[，<和>运算符一起使用时，使用当前语言环境按字典顺序排序。
       测试命令使用ASCII排序进行排序。

       -一份文件
              如果文件存在则为真。
       -b文件
              如果文件存在则为真，并且是块特殊文件。
       -c文件
              如果文件存在则为真，并且是字符特殊文件。
       -d文件
              如果文件存在且为目录，则为True。
       -e文件
              如果文件存在则为真。
       -f文件
              如果文件存在且为常规文件，则为True。
       -g文件
              如果文件存在且为set-group-id，则为True。
       -h文件
              如果文件存在且为符号链接，则为True。
       -k文件
              如果文件存在且设置了“粘性”位，则为真。
       -p文件
              如果文件存在则为真，并且是命名管道（FIFO）。
       -r文件
              如果文件存在且可读，则为True。
       -s文件
              如果文件存在且大小大于零，则为True。
       -t fd如果文件描述符fd打开并引用终端，则为真。
       -u文件
              如果文件存在且其set-user-id位已设置，则为True。
       -w文件
              如果文件存在且可写，则为True。
       -x文件
              如果文件存在且可执行，则为True。
       -G文件
              如果文件存在并且由有效组ID拥有，则为True。
       -L文件
              如果文件存在且为符号链接，则为True。
       -N档案
              如果文件存在且自上次读取以来已被修改，则为真。
       -O文件
              如果文件存在并且由有效用户标识拥有，则为True。
       -S文件
              如果文件存在且为套接字，则为True。
       file1 -ef file2
              如果file1是真的
