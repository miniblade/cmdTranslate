GDB（1）GNU开发工具GDB（1）



名称
       gdb  -  GNU调试器

概要
       gdb [-help] [-nh] [-nx] [-q] [-batch] [-cd = dir] [-f] [-b bps]
           [-tty = dev] [-s symfile] [-e prog] [-se prog] [-c core] [-p procID]
           [-x cmds] [-d dir] [prog | prog procID | prog core]

描述
       调试器（如GDB）的目的是让您查看内容
       在另一个程序执行时“内部”进行 - 或另一个程序
       程序在崩溃的那一刻正在做。

       GDB可以做四种主要的事情（以及支持的其他事情）
       这些）帮助你捕捉行为中的错误：

       ·启动程序，指定可能影响程序的任何内容
           行为。

       ·使程序在指定条件下停止。

       ·检查程序停止时发生了什么。

       ·更改程序中的内容，以便进行实验
           纠正一个bug的影响，继续学习另一个bug。

       您可以使用GDB来调试用C，C @ t {++}，Fortran和。编写的程序
       Modula-2的。

       使用shell命令“gdb”调用GDB。一旦启动，它会读取
       来自终端的命令，直到你告诉它退出GDB
       命令“退出”。您可以使用以下方式从GDB获得在线帮助
       命令“帮助”。

       您可以运行没有参数或选项的“gdb”;但最常见的方式
       启动GDB是一个或两个参数，指定一个可执行文件
       程序作为参数：

               gdb程序

       您也可以从可执行程序和核心文件开始
       规定：

               gdb程序核心

       相反，您可以指定进程ID作为第二个参数
       想要调试正在运行的进程：

               gdb程序1234
               gdb -p 1234

       将GDB附加到进程1234（除非您还有一个名为的文件
       1234; GDB首先检查核心文件。使用选项-p即可
       省略程序文件名。

       以下是一些最常用的GDB命令：

       break [file：] functiop
           在函数（文件中）设置断点。

       运行[arglist]
           启动程序（使用arglist，如果指定）。

       bt Backtrace：显示程序堆栈。

       打印expr
           显示表达式的值。

       c继续运行程序（停止后，例如在a
           断点）。

       下一个
           执行下一个程序行（停止后）;跨过任何功能
           打电话。

       编辑[file：]功能
           查看目前停止的程序行。

       list [file：]函数
           在附近的地方输入程序的文本
           目前停了。

       步
           执行下一个程序行（停止后）;步入任何功能
           打电话。

       帮助[姓名]
           显示有关GDB命令名称或一般信息的信息
           关于使用GDB。

       放弃
           退出GDB。

       有关GDB的完整详细信息，请参阅使用GDB：GNU源级别指南
       调试器，由Richard M. Stallman和Roland H. Pesch撰写。同样的文字是
       在线提供“info”程序中的“gdb”条目。

OPTIONS
       除options之外的任何参数都指定可执行文件和核心
       文件（或进程ID）;也就是说，遇到的第一个参数为no
       关联选项标志相当于-se选项，第二个，
       如果是，则等同于-c选项，如果它是文件的名称。许多
       选项有长短形式;两者都显示在这里。很久了
       如果你截断它们，也可以识别形式，只要足够多
       该选项是明确的。 （如果你愿意，你可以举旗
       使用+而不是 - 的选项参数，尽管我们说明了更多
       惯例。）

       您提供的所有选项和命令行参数都在中进行处理
       顺序。当-x选项为时，顺序会有所不同
       用过的。

       -救命
       -h列出所有选项，并提供简要说明。

       -symbols =文件
       -s文件
           从文件文件中读取符号表。

       -写
           允许写入可执行文件和核心文件。

       -exec =文件
       -e文件
           使用文件文件作为可执行文件，在适当的时候执行，
           并与核心转储一起检查纯数据。

       -se =文件
           从文件文件中读取符号表并将其用作可执行文件。

       -core =文件
       -c文件
           使用文件文件作为核心转储来检查。

       -command =文件
       -x文件
           从文件文件执行GDB命令。

       -ex命令
           执行给定的GDB命令。

       -directory =目录
       -d目录
           将目录添加到路径以搜索源文件。

       -nh不要执行〜/ .gdbinit中的命令。

       -nx
       -n不要从任何.gdbinit初始化文件执行命令。

       -安静
       -q“安静”。不要打印介绍性和版权信息。
           这些消息也在批处理模式下被抑制。

       -批量
           以批处理模式运行。处理完所有后退出状态为0
           使用-x指定的命令文件（和.gdbinit，如果不禁止）。
           如果在执行GDB时发生错误，则退出非零状态
           命令文件中的命令。

           例如，批处理模式可用于将GDB作为过滤器运行
           在另一台计算机上下载并运行程序;为了要做
           这个消息更有用

                   程序正常退出。

           （通常在GDB下运行程序时发布
           在批处理模式下运行时不会发出控制终止。

       -CD =目录
           使用directory作为其工作目录运行GDB，而不是
           当前目录。

       -全名
       -f Emacs在将GDB作为子进程运行时设置此选项。它说
           GDB以标准输出完整的文件名和行号，
           每次显示堆栈框架时可识别的时尚（哪个
           包括每次程序停止时）。这种可识别的格式
           看起来像两个\ 032个字符，后跟文件名，行
           以冒号分隔的数字和字符位置以及换行符。
           Emacs-to-GDB接口程序使用两个\ 032字符作为
           显示帧源代码的信号。

       -b bps
           设置任何序列的线速度（波特率或每秒位数）
           GDB用于远程调试的接口。

       -tty =设备
           使用设备运行程序的标准输入和输出。

也可以看看
       GDB的完整文档作为Texinfo手册进行维护。如果
       “info”和“gdb”程序以及GDB的Texinfo文档都是
       正确安装在您的站点上的命令

               info gdb

       应该让您访问完整的手册。

       使用GDB：GNU源代码级调试器指南，Richard M.
       Stallman和Roland H. Pesch，1991年7月。

版权
       版权所有（c）1988-2013 Free Software Foundation，Inc。

       允许复制，分发和/或修改本文档
       根据GNU自由文档许可证1.3版或
       自由软件基金会发布的任何更新版本;随着
       不变部分是“自由软件”和“自由软件需要免费”
       文档“，前封面文本是”GNU手册“，和
       使用封底文本，如下面（a）所示。

       （a）FSF的封底文本是：“您可以自由复制和修改此内容
       GNU手册。从GNU Press购买副本支持FSF
       开发GNU并促进软件自由。“



gdb-Red Hat Enterprise Linux 7.6.12018-10-30 GDB（1）
