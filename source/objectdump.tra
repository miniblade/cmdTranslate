OBJDUMP（1）GNU开发工具OBJDUMP（1）



名称
       objdump  - 显示来自目标文件的信息。

概要
       objdump [-a | --archive-headers]
               [-b bfdname | --target = bfdname]
               [-C | --dedeng [= style]]
               [-d | --disassemble]
               [-D | --disassemble-所有]
               [-z | --disassemble-零]
               [-EB | -EL | --endian = {big |小}]
               [-f | --file报头]
               [-F | --file-偏移]
               [--file启动上下文]
               [-g | --debugging]
               [-e | --debugging标签]
               [-h | --section报头| --headers]
               [-i | --info]
               [-j section | --section = section]
               [-l | --line号码]
               [-S | --source]
               [-m machine | --architecture = machine]
               [-M选项| --disassembler-options = options]
               [-P | --private报头]
               [-P选项| --private =选项]
               [-r | --reloc]
               [-R | --dynamic-RELOC]
               [-S | --full-内容]
               [-W [lLiaprmfFsoRt] |
                --dwarf [= rawline，= decodedline，=信息，=缩写，= pubnames，= aranges，=宏，=帧，帧=-interp的，= STR，= LOC，=范围，= pubtypes，= trace_info，= trace_abbrev ，= trace_aranges，= gdb_index]]
               [-G | --stabs]
               [-t | --syms]
               [-T | --dynamic-SYMS]
               [-x |  - 全报头]
               [-w | --wide]
               [--start地址=地址]
               [--stop地址=地址]
               [--prefix-地址]
               [ -  [无糖]显示-原始的insn]
               [ - 调整-VMA =偏移]
               [--special-SYMS]
               [前缀=前缀]
               [--prefix条=级别]
               [--insn宽度=宽度]
               [-V | --version]
               [-H | --help]
               OBJFILE ...

描述
       objdump显示有关一个或多个目标文件的信息。该
       options控制要显示的特定信息。这个
       信息对于正在开展工作的程序员来说非常有用
       编译工具，而不是只想要他们的程序员
       程序编译和工作。

       objfile ...是要检查的目标文件。当你指定
       archives，objdump显示每个成员对象文件的信息。

OPTIONS
       这里显示的长期和短期选项是替代方案
       当量。列表中至少有一个选项
       -a，-d，-D，-e，-f，-g，-G，-H，-H，-p，-P，-R，-R，-S，-S，-t，-T ，-V，-x必须给出。

       -一个
       --archive头
           如果任何objfile文件是归档文件，则显示归档文件
           标题信息（格式类似于ls -l）。除了
           您可以使用ar tv列出的信息，objdump -a显示该对象
           每个档案成员的文件格式。

        - 调整-VMA =偏移
           转储信息时，首先向所有部分添加偏移量
           地址。如果节地址没有，这很有用
           对应于符号表，可以在放置时发生
           使用不能格式的特定地址的部分
           表示节地址，例如a.out。

       -b bfdname
       --target = bfdname
           指定目标文件的对象代码格式
           bfdname。这个选项可能没有必要; objdump可以
           自动识别多种格式。

           例如，

                   objdump -b oasys -m vax -h fu.o

           显示fu.o的节标题（-h）中的摘要信息，
           它被明确地标识为（-m）作为VAX目标文件
           由Oasys编译器生成的格式。您可以列出格式
           可以使用-i选项。

       -C
       --demangle [=式]
           将低级符号名解码（解码）为用户级名称。
           除了删除系统前面的任何初始下划线，
           这使得C ++函数名称可读。不同的编译器有
           不同的破损风格。可选的demangling样式参数
           可以用来为你的选择一个合适的demangling样式
           编译器。

       -G
        - 调试
           显示调试信息。这试图解析STABS和
           IEEE调试格式信息存储在文件中并打印出来
           使用类似C的语法。如果找不到这些格式
           此选项返回-W选项以打印任何DWARF
           文件中的信息。

       -e
       --debugging标签
           与-g类似，但信息以兼容的格式生成
           用ctags工具。

       -d
        - 拆卸
           显示机器指令的汇编程序助记符
           OBJFILE。此选项仅反汇编那些部分
           预计包含说明。

       -D
       --disassemble-ALL
           像-d一样，但是反汇编所有部分的内容，而不仅仅是
           那些预计包含说明的人。

           如果目标是ARM体系结构，则此交换机也具有
           强制反汇编程序解码发现的数据的效果
           在代码段中，就像它们是指令一样。

       --prefix-地址
           拆卸时，打印每行的完整地址。这个
           是旧的反汇编格式。

       -EB
       -EL
       --endian = {大|小}
           指定目标文件的字节顺序。这只会影响
           拆卸。这在反汇编文件格式时非常有用
           它不描述字节序信息，例如S记录。

       -F
       --file-头
           显示每个的整体标题的摘要信息
           objfile文件。

       -F
       --file-偏移
           拆卸部分时，无论何时显示符号，也是
           显示即将成为的数据区域的文件偏移量
           倾倒。如果跳过零，则在反汇编时
           恢复，告诉用户跳过了多少个零和文件
           从反汇编重新开始的位置偏移。什么时候
           转储部分，显示位置的文件偏移量
           转储开始的地方。

       --file启动上下文
           在显示登记的源代码/反汇编时指定
           （假设-S）来自尚未显示的文件，扩展
           文件开头的上下文。

       -H
       --section报头
       --headers
           显示对象的节标题中的摘要信息
           文件。

           可以将文件段重新定位到非标准地址
           例如，使用-Ttext，-Tdata或-Tbss选项来ld。
           但是，某些目标文件格式（如a.out）不存储
           文件段的起始地址。在那些情况下，
           虽然ld使用objdump -h来正确地重新定位节
           列表文件节标题无法显示正确的地址。
           相反，它显示了通常的地址，这是隐含的
           目标。

       -H
        - 救命
           打印objdump和退出选项的摘要。

       -一世
        - 信息
           显示显示所有体系结构和对象格式的列表
           可用于-b或-m的规范。

       -j名字
       --section =名称
           仅显示部分名称的信息。

       -l
       --line号码
           使用文件名标记显示（使用调试信息）
           和对象代码或relocs对应的源行号
           所示。仅对-d，-D或-r有用。

       -m机器
       --architecture =机器
           指定反汇编目标文件时要使用的体系结构。
           这在反汇编没有的目标文件时非常有用
           描述体系结构信息，例如S-records。你可以列出
           使用-i选项的可用体系结构。

           如果目标是ARM体系结构，则此交换机具有
           额外的效果。它将反汇编限制为仅限于那些
           由机器指定的体系结构支持的指令。
           如果有必要使用此开关，因为输入文件
           不包含任何架构信息，但也需要
           反汇编所有指令使用-marm。

       -M选项
       --disassembler选项=选项
           将目标特定信息传递给反汇编程序。只要
           某些目标支持。如果有必要指定多个
           一个反汇编选项然后可以使用多个-M选项
           被放在一个逗号分隔的列表中。

           如果目标是ARM体系结构，则可以使用此开关
           选择反汇编程序中使用的寄存器名称集。
           指定-M reg-names-std（默认值）将选择寄存器
           ARM的指令集文档中使用的名称，但有
           寄存器13称为'sp'，寄存器14称为'lr'，寄存器15
           叫'pc'。指定-M reg-names-apcs将选择名称集
           ARM过程调用标准使用，同时指定-M reg-
           names-raw只使用r后跟寄存器号。

           APCS寄存器命名方案还有两种变体
           由-M reg-names-atpcs和-M reg-names-special-atpcs启用
           使用ARM / Thumb过程调用标准命名约定。
           （使用正常的寄存器名称或特殊寄存器
           名）。

           此选项也可用于ARM体系结构以强制执行
           反汇编程序将所有指令解释为Thumb指令
           使用开关--disassembler-options = force-thumb。这可以
           在尝试反汇编其他人生成的拇指代码时很有用
           编译器。

           对于x86，某些选项会复制-m的功能
           切换，但允许更细粒度的控制。多项选择
           以下内容可以指定为逗号分隔的字符串。
           x86-64，i386和i8086为给定的选择反汇编
           建筑。 intel和att在intel语法模式和
           AT＆T语法模式。英特尔 - 助记符和助记符号之间的选择
           英特尔记忆模式和AT＆T助记模式。英特尔记忆意味着
           英特尔和attneneneic意味着att。 addr64，addr32，addr16，data32
           和data16指定默认地址大小和操作数大小。
           如果x86-64，i386或i8086，将覆盖这四个选项
           稍后出现在选项字符串中。最后，后缀，在AT＆T时
           模式，指示反汇编程序甚至打印助记符后缀
           当后缀可以由操作数推断时。

           对于PowerPC，booke控制BookE指令的反汇编。
           32和64分别选择PowerPC和PowerPC64反汇编。
           e300选择e300系列的拆卸。 440选择
           拆卸PowerPC 440.ppcps选择拆卸
           配对PPC750CL的单个指令。

           对于MIPS，此选项控制指令助记符的打印
           反汇编指令中的名称和注册名称。多
           以下选项可以指定为逗号分隔
           字符串和无效选项被忽略：

           “无别名”
               打印'原始'指令助记符而不是一些伪
               指导助记符。即，打印'daddu'或'或'而不是
               'move'，'sll'而不是'nop'等。

           “MSA”
               反汇编MSA指令。

           “的virt”
               反汇编虚拟化ASE指令。

           “XPA”
               反汇编扩展物理地址（XPA）ASE
               说明。

           “GPR-名= ABI”
               打印适当的GPR（通用寄存器）名称
               指定的ABI。默认情况下，选择GPR名称
               根据被拆解的二进制文件的ABI。

           “FPR-名= ABI”
               根据需要打印FPR（浮点寄存器）名称
               指定的ABI。默认情况下，打印FPR编号
               而不是名字。

           “CP0-名= ARCH”
               打印CP0（系统控制协处理器;协处理器0）寄存器
               适用于指定的CPU或体系结构的名称
               拱。默认情况下，根据选择CP0寄存器名称
               被拆解的二进制文件的体系结构和CPU。

           “HWR-名= ARCH”
               打印HWR（硬件寄存器，由“rdhwr”指令使用）
               适用于指定的CPU或体系结构的名称
               拱。默认情况下，根据选择HWR名称
               被拆解的二进制文件的体系结构和CPU。

           “REG-名= ABI”
               根据所选ABI打印GPR和FPR名称。

           “REG-名= ARCH”
               打印CPU特定的寄存器名称（CP0寄存器和HWR名称）
               适用于所选的CPU或体系结构。

           对于上面列出的任何选项，可以指定ABI或ARCH
           作为数字打印数字而不是名称，为
           选定类型的寄存器。您可以列出可用的值
           ABI和ARCH使用--help选项。

           对于VAX，您可以使用-M指定函数入口地址
           项：0xf00ba。您可以多次使用它来正确使用
           反汇编不包含符号表的VAX二进制文件（如
           ROM转储）。在这些情况下，函数入口掩码会
           否则将被解码为VAX指令，这可能会导致
           其余的功能被错误地拆解了。

       -p
       --private报头
           打印特定于目标文件格式的信息。该
           打印的确切信息取决于目标文件格式。对于
           一些目标文件格式，不打印其他信息。

       -P选项
       --private =选项
           打印特定于目标文件格式的信息。该
           参数选项是一个逗号分隔的列表，取决于
           格式（选项列表随帮助一起显示）。

           对于XCOFF，可用选项包括：header，aout，sections，syms，
           relocs，lineno，loader，除了，typchk，traceback，toc和ldinfo。

       -r
       --reloc
           打印文件的重定位条目。如果与-d或-D一起使用，
           重新安置打印穿插拆卸。

       -R
       --dynamic-RELOC
           打印文件的动态重定位条目。这只是
           对于动态对象有意义，例如某些类型的共享
           库。对于-r，如果与-d或-D一起使用，则重定位是
           打印穿插有拆卸。

       -s
       --full-内容
           显示所请求的任何部分的完整内容。默认情况下
           显示所有非空部分。

       -S
        - 资源
           如果可能，显示与反汇编混合的源代码。
           意味着-d。

       前缀=前缀
           指定与-S一起使用时添加到绝对路径的前缀。

       --prefix条=水平
           指出要剥离的初始目录名称数
           硬连线的绝对路径。没有--prefix =前缀它没有效果。

        - 显示，原始的insn
           拆卸指令时，以十六进制打印指令
           以象征的形式。这是默认值，除非
            - 使用--prefix-addresses。

       --no秀，原始的insn
           拆卸说明时，请勿打印说明
           字节。这是使用--prefix-addresses时的默认值。

       --insn宽度=宽度
           拆卸时在一行上显示宽度字节
           说明。

       -W [lLiaprmfFsoRt]
       --dwarf [= rawline，= decodedline，=信息，=缩写，= pubnames，= aranges，=宏，=帧，帧=-interp的，= STR，= LOC，=范围，= pubtypes，= trace_info，= trace_abbrev ，= trace_aranges，= gdb_index]
           显示文件中调试部分的内容（如果有）
           当下。如果其中一个可选字母或单词跟随
           然后只切换那些特定部分中的数据
           倾倒。

           请注意，没有单个字母选项来显示内容
           跟踪部分或.gdb_index。

           注意：= info选项的输出也可能受到影响
           选项--dwarf-depth， -  dwarf-start和--dwarf-check。

       --dwarf深入=正
           将“.debug_info”部分的转储限制为n个子级。这是
           仅对--dwarf = info有用。默认是打印所有DIE;
           n的特殊值0也会产生这种效果。

           对于n的非零值，处于或等于n级的DIE将
           不打印。 n的范围是从零开始的。

       --dwarf启动=正
           仅打印以编号为n的DIE开头的DIE。这只是
           有用--dwarf = info。

           如果指定，此选项将禁止打印任何标题
           信息和DIE编号为n之前的所有DIE。只有兄弟姐妹
           将打印指定DIE的子项。

           这可以与--dwarf-depth一起使用。

       --dwarf检查
           启用对Dwarf信息一致性的附加检查。

       -G
       --stabs
           显示所请求的任何部分的完整内容。显示
           来自的.stab和.stab.index和.stab.excl部分的内容
           一个ELF文件。这仅适用于系统（例如Solaris 2.0）
           其中“.stab”调试符号表条目在一个中携带
           ELF部分。在大多数其他文件格式中，调试symbol-table
           条目与链接符号交错，并在中可见
           --syms输出。

       --start-地址=地址
           开始在指定地址显示数据。这影响了
           输出-d，-r和-s选项。

       --stop-地址=地址
           停止在指定地址显示数据。这影响了
           输出-d，-r和-s选项。

       -t
       --syms
           打印文件的符号表条目。这类似于
           由nm程序提供的信息，虽然是显示格式
           是不同的。输出的格式取决于格式
           被转储的文件，但有两种主要类型。一看
           像这样：

                   [4]（第3段）（fl 0x00）（ty 0）（scl 3）（nx 1）0x00000000 .bss
                   [6]（第1段）（fl 0x00）（ty 0）（scl 2）（nx 0）0x00000000 fred

           其中方括号内的数字是数字
           在符号表中输入，秒号是节号，
           fl值是符号的标志位，ty数是
           符号的类型，scl编号是符号的存储类和
           nx值是与之关联的辅助条目的数量
           符号。最后两个字段是符号的值及其名称。

           另一种常见的输出格式，通常见于基于ELF的文件，
           看起来像这样：

                   00000000 l d .bss 00000000 .bss
                   00000000 g .text 00000000 fred

           这里第一个数字是符号的值（有时指的是
           作为其地址）。下一个字段实际上是一组字符
           和空格，表示在符号上设置的标志位。
           这些字符如下所述。接下来是部分
           符号相关联的符号或* ABS *如果该部分是绝对的
           （即与任何部分无关），如果该部分是* UND *
           在被转储的文件中引用，但在那里没有定义。

           在节名称之后是另一个字段，一个数字，用于
           常见符号是对齐，而其他符号是大小。
           最后显示符号的名称。

           标志字符分为7组，如下所示：

           “L”
           “G”
           “U”
           “！”符号是本地（l），全局（g），唯一全局（u），
               无论是全球性的还是本地的（空间），还是全球性的和本地的
               （！）。对于各种各样的符号，既不是本地符号也不是全局符号
               原因，例如，因为它用于调试，但确实如此
               可能是一个错误的迹象，如果它是本地的和
               全球。唯一的全局符号是GNU的扩展
               标准的ELF符号绑定集。对于这样的符号
               动态链接器将确保在整个过程中存在
               只是一个使用此名称和类型的符号。

           “w”符号弱（w）或强（空格）。

           “C”符号表示构造函数（C）或普通符号（a
               空间）。

           “W”符号是警告（W）或正常符号（空格）。一个
               警告符号的名称是要显示的消息
               警告符号后面的符号被引用。

           “一世”
           “i”符号是对另一个符号（I）的间接引用，a
               在重定位处理期间要评估的函数（i）或a
               正常符号（空格）。

           “d”
           “D”符号是调试符号（d）或动态符号（D）或
               正常符号（空格）。

           “F”
           “F”
           “O”符号是函数（F）或文件（f）或的名称
               对象（O）或只是一个普通符号（一个空格）。

       -T
       --dynamic，SYMS
           打印文件的动态符号表条目。这只是
           对于动态对象有意义，例如某些类型的共享
           库。这类似于nm提供的信息
           程序给出-D（ - 动态）选项。

       --special，SYMS
           显示符号时包括目标考虑的符号
           在某种程度上是特殊的，通常不会引起兴趣
           给用户。

       -V
        - 版
           打印objdump的版本号并退出。

       -X
        - 全头
           显示所有可用的标头信息，包括符号
           表和重定位条目。使用-x相当于指定
           全部-a -f -h -p -r -t。

       -w
        - 宽
           为超过80的输出设备格式化一些行
           列。也不要截断符号名称
           显示。

       -z
       --disassemble-零
           通常，反汇编输出将跳过零块。这个
           选项指示反汇编程序反汇编这些块
           像任何其他数据一样。

       @文件
           从文件中读取命令行选项。插入的选项被插入
           代替原始的@file选项。如果文件不存在，或
           无法阅读，那么该选项将按字面意思处理，而不是
           除去。

           文件中的选项由空格分隔。一个空白
           字符可以包含在一个选项中，包围整个
           单引号或双引号中的选项。任何角色（包括
           可以通过为角色加前缀来包括反斜杠
           包含反斜杠。该文件本身可能包含其他内容
           @file选项;任何此类选项将以递归方式处理。

也可以看看
       nm（1），readelf（1）和binutils的Info条目。

版权
       版权所有（c）1991-2014 Free Software Foundation，Inc。

       允许复制，分发和/或修改本文档
       根据GNU自由文档许可证1.3版或
       自由软件基金会发布的任何更新版本;没有
       不变章节，没有封面文字，没有封底
       文本。许可证的副本包含在标题为“GNU”的部分中
       免费文档许可证“。



binutils-2.25 2014-12-23 OBJDUMP（1）
