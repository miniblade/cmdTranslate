NM（1）GNU开发工具NM（1）



名称
       nm  - 列出目标文件中的符号

概要
       nm [-A | -o | --print-file-name] [-a | --debug-syms]
          [-B | --format = bsd] [-C | --dedeng [= style]]
          [-D | --dynamic] [-fformat | --format = format]
          [-g | --extern-only] [-h | --help]
          [-l | --line-numbers] [-n | -v | --numeric-sort]
          [-P | --portability] [-p | --no-sort]
          [-r | --reverse-sort] [-S | --print-size]
          [-s | --print-armap] [-t radix | --radix = radix]
          [-u | --undefined-only] [-V | --version]
          [-X 32_64] [--defined-only] [ -  no-demangle]
          [--plugin name] [--size-sort] [--special-syms]
          [--synthetic] [--target = bfdname]
          [OBJFILE ...]

描述
       GNU nm列出来自目标文件objfile的符号....如果没有对象
       文件列为参数，nm假定文件为a.out。

       对于每个符号，nm显示：

       ·符号值，以选项（见下文）选择的基数，或
           十六进制默认情况下。

       ·符号类型。至少使用以下类型;其他
           也是，取决于目标文件格式。如果小写，
           符号通常是本地的;如果是大写，则符号是全局的
           （外部）。然而，有一些小写符号
           显示特殊的全局符号（“u”，“v”和“w”）。

           “A”符号的值是绝对的，不会被改变
               进一步联系。

           “B”
           “b”符号位于未初始化的数据部分（称为BSS）。

           “C”符号很常见。常用符号是未初始化的数据。
               链接时，多个常见符号可能会出现相同的情况
               名称。如果符号在任何地方定义，则为常用符号
               被视为未定义的引用。

           “d”
           “d”符号位于初始化数据部分。

           “G”
           “g”符号位于小对象的初始化数据部分中。
               某些目标文件格式允许更有效地访问小型文件
               数据对象，例如全局int变量而不是a
               大型全局数组。

           “i”对于PE格式文件，这表示符号在a中
               特定于DLL实现的部分。对于ELF格式
               文件这表明该符号是间接功能。
               这是标准ELF符号集的GNU扩展
               类型。它表示一个符号，如果由a引用
               重定位不会评估其地址，而是必须
               在运行时调用。然后将返回运行时执行
               要在重定位中使用的值。

           “I”符号是对另一个符号的间接引用。

           “N”符号是调试符号。

           “p”符号位于堆栈展开部分。

           “R”
           “r”符号位于只读数据部分。

           “S”
           “s”符号位于未初始化的数据部分中
               对象。

           “T”
           “t”符号位于文本（代码）部分。

           “U”符号未定义。

           “你”这个符号是一个独特的全球符号。这是一个GNU扩展
               到标准的ELF符号绑定集。对于这样的符号
               动态链接器将确保在整个过程中
               只有一个符号使用此名称和类型。

           “V”
           “v”符号是一个弱对象。当弱定义的符号是
               与正常定义的符号链接，正常定义的符号
               使用没有错误。当弱的未定义符号被链接时
               并且没有定义符号，弱符号的值
               变为零，没有错误。在某些系统上，大写
               表示已指定默认值。

           “W”
           “w”这个符号是一个没有具体的弱符号
               标记为弱对象符号。当弱定义的符号是
               与正常定义的符号链接，正常定义的符号
               使用没有错误。当弱的未定义符号被链接时
               并且未定义符号，符号的值为
               以系统特定的方式确定而没有错误。一些
               系统，大写表示已经有一个默认值
               指定。

           “ - ”符号是a.out对象文件中的stabs符号。在这
               例如，打印的下一个值是其他字段的刺
               stabs desc field，以及stab类型。刺符号用于
               保存调试信息。

           “？”符号类型未知，或特定于目标文件格式。

       ·符号名称。

OPTIONS
       这里显示的长期和短期选项是替代方案
       当量。

       -一个
       -o
       --print文件名称
           在每个符号前面输入文件（或存档）的名称
           发现它的成员），而不是识别输入
           仅在其所有符号之前提交一次。

       -一个
       --debug-SYMS
           显示所有符号，甚至是仅调试器符号;通常这些都是
           没有列出。

       -B与--format = bsd相同（为了与MIPS nm兼容）。

       -C
       --demangle [=式]
           将低级符号名解码（解码）为用户级名称。
           除了删除系统前面的任何初始下划线，
           这使得C ++函数名称可读。不同的编译器有
           不同的破损风格。可选的demangling样式参数
           可以用来为你的选择一个合适的demangling样式
           编译器。

       --no-还原函数
           不要对低级符号名称进行解码。这是默认值。

       -D
        - 动态
           显示动态符号而不是普通符号。这个
           仅对动态对象有意义，例如某些类型的动态对象
           共享库。

       -f格式
       --format =格式
           使用输出格式格式，可以是“bsd”，“sysv”或
           “POSIX”。默认值为“bsd”。只有格式的第一个字符
           很重要;它可以是大写或小写。

       -G
       --extern只
           仅显示外部符号。

       -H
        - 救命
           显示nm选项的摘要并退出。

       -l
       --line号码
           对于每个符号，使用调试信息尝试查找
           文件名和行号。对于定义的符号，请查找该行
           符号的地址编号。对于未定义的符号，请查看
           对于引用的重定位条目的行号
           符号。如果可以找到行号信息，请在之后打印
           其他符号信息。

       -n
       -v
       --numeric排序
           按地址对数字进行数字排序，而不是
           按字母顺序排列。

       -p
       --no排序
           不要费心按任何顺序对符号进行排序;将它们打印出来
           订单遇到了。

       -P
        - 可移植性
           使用POSIX.2标准输出格式而不是默认输出格式
           格式。相当于-f posix。

       -r
       --reverse排序
           颠倒排序顺序（无论是数字还是字母）;让
           最后来的第一个。

       -S
       --print大小
           打印“bsd”输出的已定义符号的值和大小
           样式。此选项对不支持的对象格式无效
           记录符号大小，除非在这种情况下使用--size-sort
           显示计算的大小。

       -s
       --print-armap
           列出存档成员中的符号时，请包含索引：a
           映射（由ar或ranlib存档在存档中）的模块
           包含名称的定义。

       -t基数
       --radix =基数
           使用radix作为打印符号值的基数。肯定是
           d表示十进制，o表示八进制，x表示十六进制。

       -u
       --undefined只
           仅显示未定义的符号（每个对象外部的符号）
           文件）。

       -V
        - 版
           显示nm的版本号并退出。

       -X与AIX版本的兼容性忽略此选项
           纳米。它需要一个参数，必须是字符串32_64。该
           AIX nm的默认模式对应-X 32，不支持
           通过GNU nm。

       --defined只
           仅显示每个目标文件的已定义符号。

       --plugin名称
           加载名为name的插件以添加对额外目标类型的支持。
           此选项仅在使用工具链构建时可用
           插件支持已启用。

       --size排序
           按大小排序符号。大小计算为差异
           在符号的值和符号的值之间
           下一个更高的价值。如果使用“bsd”输出格式的大小
           打印符号而不是值，-S必须是
           用于打印尺寸和值的顺序。

       --special，SYMS
           显示具有特定目标特殊含义的符号。
           这些符号通常由目标用于某些特殊符号
           处理并且在正常情况下通常不会有用
           符号列表。例如，对于ARM目标，此选项将跳过
           用于标记ARM代码之间转换的映射符号，
           THUMB代码和数据。

       --synthetic
           在输出中包含合成符号。这些是特殊符号
           由链接器创建用于各种目的。它们没有显示出来
           默认，因为它们不是二进制文件原始源的一部分
           码。

       --target = bfdname
           指定系统默认值以外的目标代码格式
           格式。

       @文件
           从文件中读取命令行选项。插入的选项被插入
           代替原始的@file选项。如果文件不存在，或
           无法阅读，那么该选项将按字面意思处理，而不是
           除去。

           文件中的选项由空格分隔。一个空白
           字符可以包含在一个选项中，包围整个
           单引号或双引号中的选项。任何角色（包括
           可以通过为角色加前缀来包括反斜杠
           包含反斜杠。该文件本身可能包含其他内容
           @file选项;任何此类选项将以递归方式处理。

也可以看看
       ar（1），objdump（1），ranlib（1）和binutils的Info条目。

版权
       版权所有（c）1991-2014 Free Software Foundation，Inc。

       允许复制，分发和/或修改本文档
       根据GNU自由文档许可证1.3版或
       自由软件基金会发布的任何更新版本;没有
       不变章节，没有封面文字，没有封底
       文本。许可证的副本包含在标题为“GNU”的部分中
       免费文档许可证“。



binutils-2.25 2014-12-23 NM（1）
